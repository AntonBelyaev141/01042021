&ИзменениеИКонтроль("РассчитатьНалогПоОсновнойСтавке")
Функция АБ_РассчитатьНалогПоОсновнойСтавке(ИсключаемыйРегистратор, Организация, МесяцРасчета, Знач СписокФизическихЛиц, Знач ПервыйМесяцНалоговогоПериода, Знач ПоследнийМесяцНалоговогоПериода, ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога, ДвиженияТекущегоРегистратора)
	
	#Вставка
	//1АБ Беляев 14.03.2021 +
	Если НЕ ТипЗнч(ДвиженияТекущегоРегистратора)=Тип("Неопределено") И ДвиженияТекущегоРегистратора.Свойство("АБ_НеПредоставлятьВычеты") Тогда
	АБ_НеПредоставлятьВычеты=ДвиженияТекущегоРегистратора.АБ_НеПредоставлятьВычеты;
	ДвиженияТекущегоРегистратора=ДвиженияТекущегоРегистратора.ДвиженияТекущегоРегистратора;
	Иначе
	АБ_НеПредоставлятьВычеты=Ложь;
	КонецЕсли;
	//1АБ Беляев 14.03.2021 - 
	#КонецВставки
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	Если Не ПолучитьФункциональнуюОпцию("ВыполнятьРасчетНДФЛПоПрогрессивнойШкале", Новый Структура("Организация", ГоловнаяОрганизация)) Тогда
		#Вставка
		//1АБ Беляев 14.03.2021 +
		ДвиженияТекущегоРегистратора = Новый Структура("АБ_НеПредоставлятьВычеты,ДвиженияТекущегоРегистратора",АБ_НеПредоставлятьВычеты,ДвиженияТекущегоРегистратора);
		//1АБ Беляев 14.03.2021 -
		#КонецВставки
		Возврат РассчитатьНалогПоПлоскойСтавке(ИсключаемыйРегистратор, Организация, МесяцРасчета, СписокФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога, ДвиженияТекущегоРегистратора)
	КонецЕсли;
	
	// 0. Проверим, стОит ли вообще что-то считать: массив физ.лиц может быть пустым, либо доходы межрасчетного
	// регистратора могут быть нулевыми. В обоих случаях результатом расчетов окажется пустая таблица.
	Если Не ЗначениеЗаполнено(СписокФизическихЛиц) Тогда
		Возврат ТаблицаНДФЛ()
	КонецЕсли;
	ЕстьДвиженияТекущегоРегистратораПоДоходам = ДвиженияТекущегоРегистратора <> Неопределено И ПроведениеСервер.ЕстьДвижения(ДвиженияТекущегоРегистратора, "СведенияОДоходахНДФЛ");
	Если Не ОкончательныйРасчет И Не ЕстьДвиженияТекущегоРегистратораПоДоходам Тогда
		Возврат ТаблицаНДФЛ()
	КонецЕсли;
	Если ЕстьДвиженияТекущегоРегистратораПоДоходам Тогда
		ДоходыТекущегоРегистратора = ДвиженияТекущегоРегистратора.СведенияОДоходахНДФЛ.Выгрузить();
		Если Не ОкончательныйРасчет Тогда
			ТаблицаДоходовТекущегоРегистратора = ДоходыТекущегоРегистратора.Скопировать(ДоходыТекущегоРегистратора.НайтиСтроки(Новый Структура("Сторно, ЗарегистрированоПриНачисленииАванса", Ложь, '00010101')), "ФизическоеЛицо, СуммаДохода, СуммаВычета");
			Если СписокФизическихЛиц.Количество() = 1 Тогда
				Если ТаблицаДоходовТекущегоРегистратора.Итог("СуммаДохода") - ТаблицаДоходовТекущегоРегистратора.Итог("СуммаВычета") = 0 Тогда
					Возврат ТаблицаНДФЛ()
				КонецЕсли;
			Иначе
				ТаблицаДоходовТекущегоРегистратора.Свернуть("ФизическоеЛицо", "СуммаДохода, СуммаВычета");
				Для каждого ТекущаяСтрока Из ТаблицаДоходовТекущегоРегистратора Цикл
					Если ТекущаяСтрока.СуммаДохода - ТекущаяСтрока.СуммаВычета = 0 Тогда
						ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СписокФизическихЛиц, ТекущаяСтрока.ФизическоеЛицо)
					КонецЕсли;		
				КонецЦикла;
				Если Не ЗначениеЗаполнено(СписокФизическихЛиц) Тогда
					Возврат ТаблицаНДФЛ()
				КонецЕсли;
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	ЭтоРасчетПоДоходамТекущегоМесяца = ПервыйМесяцНалоговогоПериода = Неопределено Или ПоследнийМесяцНалоговогоПериода = Неопределено;
	НачалоМесяцаРасчета = НачалоМесяца(МесяцРасчета);
	КонецМесяцаРасчета = КонецМесяца(МесяцРасчета); 
	СоответствиеФизическихЛиц = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(СписокФизическихЛиц);
	МаксимальнаяДата = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
	ПараметрыРасчетаНДФЛПоПрогрессивнойШкале = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале();
	
	ПоляПоиска = "ФизическоеЛицо, МесяцНалоговогоПериода";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НачалоМесяцаРасчета", НачалоМесяцаРасчета);
	Запрос.УстановитьПараметр("КонецМесяцаРасчета", КонецМесяцаРасчета);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	// 1.	Определим минимальные и максимальные периоды расчета в целом по всем физическим лицам
	//	Если на вход переданы первый и последний месяцы налогового периода (заказан перерасчет конкретного периода) - ничего не делаем.
	//	Среди записей регистра СведенияОДоходахНДФЛ, зарегистрированных в месяце расчета, получим минимальное и максимальное значение поля МесяцНалоговогоПериода
	Если ЭтоРасчетПоДоходамТекущегоМесяца Тогда
		
		ПервыйМесяцНалоговогоПериода = МаксимальнаяДата;
		ПоследнийМесяцНалоговогоПериода = '00010101';
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода) КАК ПоследнийМесяцНалоговогоПериода,
		|	МИНИМУМ(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода) КАК ПервыйМесяцНалоговогоПериода
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|ГДЕ
		|	СведенияОДоходахНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета
		|	И СведенияОДоходахНДФЛ.ФизическоеЛицо В(&СписокФизическихЛиц)
		|	И СведенияОДоходахНДФЛ.Регистратор <> &ИсключаемыйРегистратор
		|	И СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода
		|	И &УсловиеОблагаемостиУНалоговогоАгента";
		Если ОкончательныйРасчет Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода", "");
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОблагаемостиУНалоговогоАгента", УсловиеОблагаемостиУНалоговогоАгента());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ПервыйМесяцНалоговогоПериода) Тогда
			ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.ПервыйМесяцНалоговогоПериода);
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.ПоследнийМесяцНалоговогоПериода);
		КонецЕсли;
		
		Если ЕстьДвиженияТекущегоРегистратораПоДоходам Тогда
			
			ДоходыТекущегоРегистратора.Сортировать("МесяцНалоговогоПериода");
			
			Для Каждого ТекущаяСтрока Из ДоходыТекущегоРегистратора Цикл
				Если ТекущаяСтрока.МесяцНалоговогоПериода >= ПервыйМесяцНалоговогоПериода Тогда
					Прервать;
				КонецЕсли;
				Если СоответствиеФизическихЛиц[ТекущаяСтрока.ФизическоеЛицо] = Истина
					И ТекущаяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация
					И ТекущаяСтрока.Период >= НачалоМесяцаРасчета
					И ТекущаяСтрока.Период <= КонецМесяцаРасчета	
					И (ОкончательныйРасчет Или ТекущаяСтрока.ДоходМежрасчетногоПериода)	Тогда
					
					ПервыйМесяцНалоговогоПериода = НачалоМесяца(ТекущаяСтрока.МесяцНалоговогоПериода);
					Прервать;
				КонецЕсли;		 			
			КонецЦикла;	 
			Для Сч = 1 По ДоходыТекущегоРегистратора.Количество() Цикл
				ТекущаяСтрока = ДоходыТекущегоРегистратора[ДоходыТекущегоРегистратора.Количество() - Сч];
				Если ТекущаяСтрока.МесяцНалоговогоПериода <= ПоследнийМесяцНалоговогоПериода Тогда
					Прервать;
				КонецЕсли;
				Если СоответствиеФизическихЛиц[ТекущаяСтрока.ФизическоеЛицо] = Истина
					И ТекущаяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация
					И ТекущаяСтрока.Период >= НачалоМесяцаРасчета
					И ТекущаяСтрока.Период <= КонецМесяцаРасчета	
					И (ОкончательныйРасчет Или ТекущаяСтрока.ДоходМежрасчетногоПериода)	Тогда
					
					ПоследнийМесяцНалоговогоПериода = КонецМесяца(ТекущаяСтрока.МесяцНалоговогоПериода);
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПоследнийМесяцНалоговогоПериода = '00010101' Тогда
			ПервыйМесяцНалоговогоПериода = НачалоМесяца(МесяцРасчета);
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(МесяцРасчета);
		КонецЕсли;	
		
	КонецЕсли;	
	
	// 1.1	Если расчет не затрагивает 2021 года, воспользуемся предыдущей реализацией алгоритма расчета
	ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НачалоРасчетаНДФЛПоПрогрессивнойШкале;
	Если ПоследнийМесяцНалоговогоПериода < ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале Тогда
		#Вставка
		//1АБ Беляев 14.03.2021 +
		ДвиженияТекущегоРегистратора = Новый Структура("АБ_НеПредоставлятьВычеты,ДвиженияТекущегоРегистратора",АБ_НеПредоставлятьВычеты,ДвиженияТекущегоРегистратора);
		//1АБ Беляев 14.03.2021 -
		#КонецВставки
		Возврат РассчитатьНалогПоПлоскойСтавке(ИсключаемыйРегистратор, Организация, МесяцРасчета, СписокФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.НачалоРасчетаНДФЛПоПрогрессивнойШкале - 1, ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога, ДвиженияТекущегоРегистратора)
	КонецЕсли;
	
	// 1.2	Для пересмотра расчетов прошлых лет (2020 и ранее) воспользуемся предыдущей реализацией алгоритма расчета. 
	РезультатыПрошлыхЛет = ТаблицаНДФЛ();
	Если ПервыйМесяцНалоговогоПериода < ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале Тогда
		#Вставка
		//1АБ Беляев 14.03.2021 +
		ДвиженияТекущегоРегистратора = Новый Структура("АБ_НеПредоставлятьВычеты,ДвиженияТекущегоРегистратора",АБ_НеПредоставлятьВычеты,ДвиженияТекущегоРегистратора);
		//1АБ Беляев 14.03.2021 -
		#КонецВставки
		РезультатыПрошлыхЛет = РассчитатьНалогПоПлоскойСтавке(ИсключаемыйРегистратор, Организация, МесяцРасчета, СписокФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ОкончательныйРасчет, ДатаУдержанияИсчисленногоНалога, ДвиженияТекущегоРегистратора, Истина)
	КонецЕсли;
	ПервыйМесяцНалоговогоПериода = Макс(ПервыйМесяцНалоговогоПериода, ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале);
	
	// 2.	Получим ТЗ данные о доходах 
	//	Из регистра накоплений СведенияОДоходахНДФЛ получим записи, соответствующие условиям:
	//	- записи, зарегистрированные между началом года, предшествующего полученному на предыдущем шаге минимальному месяцу налогового периода, и окончанием месяца расчета
	//	- месяц налогового периода у записей между началом года месяца минимального налогового периода и концом месяца максимального налогового периода
	//	- доход облагается у налогового агента
	//	- ставка налогообложения дохода для налоговых резидентов РФ - 13%
	//	- для месяца расчета также пропускаем записи, зарегистрированные при начислении аванса
	//	При этом, в случае если выполняется промежуточный расчет и доход зарегистрирован в месяце расчета не для промежуточного расчета (ДоходМежрасчетногоПериода = Ложь), сумму дохода и сумму вычета будем считать равными 0  
	//	Затем добавим записи текущего набора доходов, применив к ним те же условия (уже на языке 1С), что и в запросе.
	
	НачалоПредшествующегоГода = ДобавитьМесяц(НачалоГода(ПервыйМесяцНалоговогоПериода), -12);;
	НачалоГодаПериодаРасчета = НачалоГода(ПервыйМесяцНалоговогоПериода);
	КонецПериодаРасчета = КонецМесяца(ПоследнийМесяцНалоговогоПериода);
	НачалоГодаРасчета = НачалоГода(МесяцРасчета); 
	
	Запрос.УстановитьПараметр("НачалоПредшествующегоГода", НачалоПредшествующегоГода);
	Запрос.УстановитьПараметр("НачалоГодаПериодаРасчета", НачалоГодаПериодаРасчета);
	Запрос.УстановитьПараметр("НачалоГодаРасчета", НачалоГодаРасчета);
	Запрос.УстановитьПараметр("КонецПериодаРасчета", КонецПериодаРасчета);
	Запрос.УстановитьПараметр("ОсновнаяНалоговаяБаза", Перечисления.КатегорииДоходовНДФЛ.ОсновнаяНалоговаяБаза());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.Период КАК Период,
	|	СведенияОДоходахНДФЛ.СтавкаНалогообложения КАК СтавкаНалогообложения,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.Период < &НачалоМесяцаРасчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода
	|	КОНЕЦ КАК ДоходМежрасчетногоПериода,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
	|	СведенияОДоходахНДФЛ.КодВычета КАК КодВычета,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода, ГОД) КАК НалоговыйПериод,
	|	СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор, &ИсключаемыйРегистратор) = &ИсключаемыйРегистратор
	|			ТОГДА СведенияОДоходахНДФЛ.Регистратор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)
	|	КОНЕЦ КАК ДокументОснование,
	|	ЕСТЬNULL(СведенияОДоходахНДФЛ.КодВычета.НеПредоставляетсяНерезидентам, ЛОЖЬ) КАК НеПредоставляетсяНерезидентам,
	|	СУММА(ВЫБОР
	|			КОГДА &ОкончательныйРасчетДоходы
	|				ТОГДА СведенияОДоходахНДФЛ.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДохода,
	|	СУММА(ВЫБОР
	|			КОГДА &ОкончательныйРасчетДоходы
	|				ТОГДА СведенияОДоходахНДФЛ.СуммаВычета
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВычета,
	|	ВЫБОР
	|		КОГДА &ОкончательныйРасчетДоходы
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьДляРаспределения,
	|	ВЫБОР
	|		КОГДА &ОкончательныйРасчетДоходы
	|				И (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоГодаРасчета И &КонецМесяцаРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УчитыватьПериодПриРасчете,
	|	ЕСТЬNULL(ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор, &ИсключаемыйРегистратор) = &ИсключаемыйРегистратор КАК ДоходТекущегоРасчета,
	|	СведенияОДоходахНДФЛ.ЗарегистрированоПриНачисленииАванса КАК ЗарегистрированоПриНачисленииАванса
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
	|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо
	|			И СведенияОДоходахНДФЛ.Регистратор = ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоПредшествующегоГода И &КонецМесяцаРасчета
	|	И СведенияОДоходахНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И СведенияОДоходахНДФЛ.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И СведенияОДоходахНДФЛ.Регистратор <> &ИсключаемыйРегистратор
	|	И СведенияОДоходахНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|	И СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И &УсловиеОблагаемостиУНалоговогоАгента
	|	И СведенияОДоходахНДФЛ.ЗарегистрированоПриНачисленииАванса < &УсловиеНаНачисленноеВАванс
	|	И СведенияОДоходахНДФЛ.КатегорияДохода В(&ОсновнаяНалоговаяБаза)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ),
	|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.МесяцНалоговогоПериода, ГОД),
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Подразделение,
	|	СведенияОДоходахНДФЛ.Период,
	|	СведенияОДоходахНДФЛ.СтавкаНалогообложения,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.Период < &НачалоМесяцаРасчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода
	|	КОНЕЦ,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ,
	|	СведенияОДоходахНДФЛ.КодВычета.НеПредоставляетсяНерезидентам,
	|	СведенияОДоходахНДФЛ.КодВычета,
	|	СведенияОДоходахНДФЛ.КодДохода,
	|	СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента,
	|	СведенияОДоходахНДФЛ.КатегорияДохода,
	|	ЕСТЬNULL(ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор, &ИсключаемыйРегистратор) = &ИсключаемыйРегистратор,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор, &ИсключаемыйРегистратор) = &ИсключаемыйРегистратор
	|			ТОГДА СведенияОДоходахНДФЛ.Регистратор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ОкончательныйРасчетДоходы
	|				И (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоГодаРасчета И &КонецМесяцаРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	СведенияОДоходахНДФЛ.ЗарегистрированоПриНачисленииАванса
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА &ОкончательныйРасчетДоходы
	|					ТОГДА СведенияОДоходахНДФЛ.СуммаДохода
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &ОкончательныйРасчетДоходы
	|					ТОГДА СведенияОДоходахНДФЛ.СуммаВычета
	|				ИНАЧЕ 0
	|			КОНЕЦ) <> 0)";
	
	#Удаление
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОблагаемостиУНалоговогоАгента", УсловиеОблагаемостиУНалоговогоАгента());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеНаНачисленноеВАванс", ?(ЭтоРасчетПоДоходамТекущегоМесяца, "НачалоМесяцаРасчета", "КонецМесяцаРасчета"));
	Если Не ЭтоРасчетПоДоходамТекущегоМесяца Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СведенияОДоходахНДФЛ.Период КАК Период", "&НачалоГодаРасчета КАК Период");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СведенияОДоходахНДФЛ.Период,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода", "ЛОЖЬ");
	КонецЕсли;
	Если ОкончательныйРасчет Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ОкончательныйРасчетДоходы", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ОкончательныйРасчетДоходы", 
		"(СведенияОДоходахНДФЛ.Период < &НачалоМесяцаРасчета
		|					ИЛИ СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода
		|						И (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета))");
	КонецЕсли;	
	#КонецУдаления
	#Вставка
	//1АБ Беляев 14.03.2021 +
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОблагаемостиУНалоговогоАгента", УсловиеОблагаемостиУНалоговогоАгента());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УсловиеНаНачисленноеВАванс", ?(ЭтоРасчетПоДоходамТекущегоМесяца, "НачалоМесяцаРасчета", "КонецМесяцаРасчета"));
	Если Не ЭтоРасчетПоДоходамТекущегоМесяца Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СведенияОДоходахНДФЛ.Период КАК Период", "&НачалоГодаРасчета КАК Период");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СведенияОДоходахНДФЛ.Период,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода", "ЛОЖЬ");
	КонецЕсли;
	Если ОкончательныйРасчет Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ОкончательныйРасчетДоходы", "Истина");
	Иначе
		Если АБ_НеПредоставлятьВычеты Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ОкончательныйРасчетДоходы", "Ложь"); 	
		Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ОкончательныйРасчетДоходы", 
		"(СведенияОДоходахНДФЛ.Период < &НачалоМесяцаРасчета
		|					ИЛИ СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода
		|						И (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета))");
		КонецЕсли;
	КонецЕсли;
	//1АБ Беляев 14.03.2021 - 
	#КонецВставки	
	ДанныеУчетаДоходов = Запрос.Выполнить().Выгрузить();
	
	МесяцыНачисленияЗарплаты = Новый Соответствие; 
	Если ЕстьДвиженияТекущегоРегистратораПоДоходам Тогда
		// Определим месяцы, за которые начисляется з/пл в текущем расчете - по полю период.
		Если ЭтоРасчетПоДоходамТекущегоМесяца Тогда
			МесяцыНачисленияЗарплаты.Вставить(МесяцРасчета, Истина);
		КонецЕсли;
		ДоходыТекущегоРегистратора.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, Подразделение, Период, СтавкаНалогообложения, ДоходМежрасчетногоПериода, ИсточникДоходаЗаПределамиРФ, КодВычета, КодДохода, КатегорияДохода, Сторно, ЗарегистрированоПриНачисленииАванса", "СуммаДохода, СуммаВычета");
		СтавкаРезидента13 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		Для Каждого ТекущаяСтрока Из ДоходыТекущегоРегистратора Цикл
			Если ЗначениеЗаполнено(ТекущаяСтрока.ЗарегистрированоПриНачисленииАванса) Тогда
				Продолжить;
			КонецЕсли;
			Если СоответствиеФизическихЛиц[ТекущаяСтрока.ФизическоеЛицо] = Истина
				И ТекущаяСтрока.КодДохода.СтавкаНалогообложенияРезидента = СтавкаРезидента13
				И ДоходОблагаетсяУНалоговогоАгента(ТекущаяСтрока.КодДохода, ТекущаяСтрока.ДатаПолученияДохода)
				И ТекущаяСтрока.МесяцНалоговогоПериода >= ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале Тогда
			
				НоваяСтрока = ДанныеУчетаДоходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.ДокументОснование = ИсключаемыйРегистратор;
				НоваяСтрока.НеПредоставляетсяНерезидентам = ТекущаяСтрока.КодВычета.НеПредоставляетсяНерезидентам;
				НоваяСтрока.СтавкаНалогообложенияРезидента = СтавкаРезидента13;
				НоваяСтрока.НалоговыйПериод = НачалоГода(ТекущаяСтрока.МесяцНалоговогоПериода);
				НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(НоваяСтрока.МесяцНалоговогоПериода);
				НоваяСтрока.УчитыватьПериодПриРасчете = ТекущаяСтрока.Период >= НачалоГодаРасчета И ТекущаяСтрока.Период <= КонецМесяцаРасчета;	
				НоваяСтрока.ДоходТекущегоРасчета = Не ТекущаяСтрока.Сторно;	
				НоваяСтрока.ИспользоватьДляРаспределения = Истина;
				МесяцыНачисленияЗарплаты.Вставить(НачалоМесяца(ТекущаяСтрока.Период), Истина);
			КонецЕсли;			
		КонецЦикла;	
	КонецЕсли;	
	НеучтенныеРанееОснования = ДанныеУчетаДоходов.Скопировать(Новый Структура("ДоходТекущегоРасчета", Истина), "ФизическоеЛицо, ДокументОснование");
	НеучтенныеРанееОснования.Свернуть("ФизическоеЛицо, ДокументОснование");
	НеучтенныеРанееОснования.Индексы.Добавить("ФизическоеЛицо");
	ДанныеУчетаДоходов.Сортировать("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода", Новый СравнениеЗначений);
	МесяцыНачисленияЗарплатыВЗапрос = Новый Массив;
	Для каждого Элемент Из МесяцыНачисленияЗарплаты Цикл
		МесяцыНачисленияЗарплатыВЗапрос.Добавить(Элемент.Ключ)
	КонецЦикла;
	Запрос.УстановитьПараметр("МесяцыНачисленияЗарплаты", МесяцыНачисленияЗарплатыВЗапрос);
	
	// 3.	Определим минимальные и максимальные месяцы налогового периода по физическим лицам. Результат работы метода - таблица значений (ПериодыРасчетаПоФизическимЛицам)
	ПериодыРасчетаПоФизическимЛицам = Новый ТаблицаЗначений;
	ПериодыРасчетаПоФизическимЛицам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПериодыРасчетаПоФизическимЛицам.Колонки.Добавить("НачалоГодаНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	ПериодыРасчетаПоФизическимЛицам.Колонки.Добавить("ПоследнийМесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	Если ЭтоРасчетПоДоходамТекущегоМесяца Тогда
		//	Среди записей о доходах, полученных на предыдущем шаге, отбираем строки к осмотру по условиям (ранее рассчитано в поле УчитыватьПериодПриРасчете):  
		//	- запись зарегистрирована между началом года месяца расчета и концом месяца расчета
		//	- если выполняется промежуточный расчет, доход зарегистрирован раньше месяца расчета, а в месяце расчета только промежуточного расчета (ДоходМежрасчетногоПериода = Истина)
		//	Минимальная дата (НачалоГодаНалоговогоПериода): если запись зарегистрирована в месяце расчета, возьмем начало года месяца налогового периода этой записи, 
		//		если зарегистрирована в предыдущих месяцах, возьмем начало года от месяца расчета.
		//	Максимальная дата (ПоследнийМесяцНалоговогоПериода): максимальный месяц налогового периода 
		
		// Дополнительно избавимся от "лишних" строк доходов, зарегистрированных начислениями авансов. 
		
		СтрокиКУдалению = Новый Соответствие;
		ТекущееФизическоеЛицо = Неопределено;
		Для Каждого СтрокаТаблицыДоходов Из ДанныеУчетаДоходов Цикл
			Если МесяцыНачисленияЗарплаты[СтрокаТаблицыДоходов.ЗарегистрированоПриНачисленииАванса] <> Неопределено Тогда
				СтрокиКУдалению.Вставить(СтрокаТаблицыДоходов);
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицыДоходов.ФизическоеЛицо <> ТекущееФизическоеЛицо Тогда  
				СтрокаПериодовПоФизическомуЛицу = ПериодыРасчетаПоФизическимЛицам.Добавить();
				СтрокаПериодовПоФизическомуЛицу.ФизическоеЛицо = СтрокаТаблицыДоходов.ФизическоеЛицо;
				СтрокаПериодовПоФизическомуЛицу.НачалоГодаНалоговогоПериода = МаксимальнаяДата;
				
				ТекущееФизическоеЛицо = СтрокаПериодовПоФизическомуЛицу.ФизическоеЛицо; 
			КонецЕсли;
			Если СтрокаТаблицыДоходов.УчитыватьПериодПриРасчете Тогда
				СтрокаПериодовПоФизическомуЛицу.НачалоГодаНалоговогоПериода = Мин(?(НачалоМесяца(СтрокаТаблицыДоходов.Период) = НачалоМесяцаРасчета, СтрокаТаблицыДоходов.НалоговыйПериод, НачалоГодаРасчета), СтрокаПериодовПоФизическомуЛицу.НачалоГодаНалоговогоПериода);
				СтрокаПериодовПоФизическомуЛицу.ПоследнийМесяцНалоговогоПериода = Макс(СтрокаТаблицыДоходов.МесяцНалоговогоПериода, СтрокаПериодовПоФизическомуЛицу.ПоследнийМесяцНалоговогоПериода);
			КонецЕсли;	
		КонецЦикла;	
		Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ДанныеУчетаДоходов.Удалить(УдаляемаяСтрока.Ключ);		
		КонецЦикла;	
	Иначе
		// В случае если расчет выполняется не по доходам текущего месяца, в качестве НачалоГодаНалоговогоПериода будем
		// использовать начала года первого месяца периода, переданного на вход алгоритма расчета, в качестве
		// ПоследнийМесяцНалоговогоПериода - первый день месяца окончания периода, переданного на вход алгоритма расчета
		НачалоПоследнегоМесяцаНалоговогоПериода = НачалоМесяца(ПоследнийМесяцНалоговогоПериода);
		Для Каждого ТекущееФизическоеЛицо Из СписокФизическихЛиц Цикл
			СтрокаТаблицыПериодов = ПериодыРасчетаПоФизическимЛицам.Добавить();
			СтрокаТаблицыПериодов.ФизическоеЛицо = ТекущееФизическоеЛицо;
			СтрокаТаблицыПериодов.НачалоГодаНалоговогоПериода = НачалоГодаПериодаРасчета;
			СтрокаТаблицыПериодов.ПоследнийМесяцНалоговогоПериода = НачалоПоследнегоМесяцаНалоговогоПериода;
		КонецЦикла;	
	КонецЕсли;	
	ПериодыРасчетаПоФизическимЛицам.Индексы.Добавить("ФизическоеЛицо");

	// 4.	Получим данные о статусе налогоплательщиков физических лиц (ТЗ СтатусыФизическихЛиц) из регистра сведений СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.
	//	Вход: список физических лиц,  ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода
	//	Выход: таблица значений с полями ФизическоеЛицо, ДатаНачала, ДатаОкончания, Статус, РезидентРФНаКонецМесяца, ПрименяетсяСтавкаПункта1Статьи224НК, РезидентРФНаКонецГода, СтатусНаКонецГода
	//			таблица индексирована по колонке ФизическоеЛицо 
	//	Описание алгоритма: 
	//		Читаем записи регистра СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный с отбором по списку физических лиц, действующие на начало года минимального месяца расчета, а также зарегистрированные между началом года минимального месяца расчета и концом максимального месяца расчета
	//		Применим отбор по списку физических лиц 
	СтатусыФизическихЛиц = СтатусыФизическихЛиц(СписокФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода);	

	// 5.	Для каждой строки полученных ранее данных учета доходов определим 
	//	- Ставку налогообложения (СтавкаЧислом)
	//	- Рассчитывать ли доход нарастающим итогом (ИсчислятьНалогНарастающимИтогом)
	//	- Сумму дохода за минусом вычета (ДоходыБезВычетов)
	//	- Сумму, используемую как коэффициент при распределении результатов расчета по подразделениям и категориям доходов (БазаРаспределения)
	//		... равна сумме дохода без вычета, для всех строк, если выполняется окончательный расчет, или для строк доходов, зарегистрированных для промежуточного расчета, и для всех строк, зарегистрированных раньше месяца расчета.
	ДополнитьДанныеУчетаСтавками(ДанныеУчетаДоходов, "УчитыватьИзмененияСтатусаДляРасчета", , СтатусыФизическихЛиц, ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода);		
	ДанныеУчетаДоходов.Колонки.Добавить("ДоходыБезВычетов", Новый ОписаниеТипов("Число"));
	ДанныеУчетаДоходов.Колонки.Добавить("БазаРаспределения", Новый ОписаниеТипов("Число"));
	СтрокиКУдалению = Новый Соответствие;
	Для Каждого СтрокаТаблицыДоходов Из ДанныеУчетаДоходов Цикл
		Если СтрокаТаблицыДоходов.РезидентРФвНалоговомПериоде Или Не СтрокаТаблицыДоходов.ИсточникДоходаЗаПределамиРФ Тогда
			Если СтрокаТаблицыДоходов.ИсточникДоходаЗаПределамиРФ Тогда
				УчитыватьВычет = СтрокаТаблицыДоходов.УчитыватьВычетыКДоходамОтИсточникаВнеРФ;
			Иначе 
				УчитыватьВычет = СтрокаТаблицыДоходов.УчитыватьВсеВычетыКДоходамОтИсточникаРФ Или Не СтрокаТаблицыДоходов.НеПредоставляетсяНерезидентам 
			КонецЕсли;
			СтрокаТаблицыДоходов.ДоходыБезВычетов = СтрокаТаблицыДоходов.СуммаДохода - ?(УчитыватьВычет, СтрокаТаблицыДоходов.СуммаВычета, 0);
			Если СтрокаТаблицыДоходов.ИспользоватьДляРаспределения Тогда
				СтрокаТаблицыДоходов.БазаРаспределения = СтрокаТаблицыДоходов.ДоходыБезВычетов;
			КонецЕсли;				
		Иначе
			СтрокиКУдалению.Вставить(СтрокаТаблицыДоходов)
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ДанныеУчетаДоходов.Удалить(УдаляемаяСтрока.Ключ);		
	КонецЦикла;	
	ДанныеУчетаДоходов.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, КодДохода, Подразделение, СтавкаЧислом, ИсчислятьНалогНарастающимИтогом, ДоходМежрасчетногоПериода, КатегорияДохода, ДоходТекущегоРасчета", "ДоходыБезВычетов, СуммаДохода, БазаРаспределения");
 	ДанныеУчетаДоходов.Колонки.СуммаДохода.Имя = "ВсеДоходы";
	
	// 6.	Поделим доходы на две части: для расчета налога нарастающим итогом и по каждой сумме дохода отдельно (абзацы первый и второй пункта 3 статьи 226 НК РФ)

	//	Для выделения доходов с расчетом налога по каждой сумме дохода отдельно из таблицы значений с данными учета доходов (где ранее рассчитана ставка налогообложения и признак расчета налога нарастающим итогом) 
	//	скопируем все строки с ИсчислятьНалогНарастающимИтогом = Ложь
	ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно = ДанныеУчетаДоходов.Скопировать(Новый Структура("ИсчислятьНалогНарастающимИтогом", Ложь));	
	//	Под "каждой суммой", для которой будем исчислять налог, понимаем сумму доходов физ.лица в одну дату получения дохода, по одному коду дохода, подразделению, категории, начисленную по отдельному основанию.
	ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, Подразделение, КатегорияДохода, СтавкаЧислом, ДоходТекущегоРасчета, ДоходМежрасчетногоПериода", "ДоходыБезВычетов");

	// В основной таблице оставим только доходы, по которым налог исчисляется нарастающим итогом.
	СоответствиеНерезидентов = Новый Соответствие;
	СтрокОтдельныхСумм = ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Количество();
	Если СтрокОтдельныхСумм > 0 Тогда
		
		ДанныеУчетаДоходов = ДанныеУчетаДоходов.Скопировать(Новый Структура("ИсчислятьНалогНарастающимИтогом", Истина));
		
		ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Индексы.Добавить(ПоляПоиска);
		ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Сортировать(ПоляПоиска, Новый СравнениеЗначений);
		
		СтрокиКУдалению = Новый Соответствие;
		ТекущееФизическоеЛицо = Неопределено; 
		ИндексОбрабатываемойСтроки = 0;
		Пока ИндексОбрабатываемойСтроки <= СтрокОтдельныхСумм - 1 Цикл
			
			ТекущаяСтрока = ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно[ИндексОбрабатываемойСтроки];
			ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
			Если ТекущаяСтрока.ФизическоеЛицо <> ТекущееФизическоеЛицо Тогда // Начало обработки очередного физлица.
				ТекущееФизическоеЛицо = ТекущаяСтрока.ФизическоеЛицо; 
				МесяцНачала = '00010101'; МесяцОкончания = '00010101';
				СтрокиТаблицыПериодов = ПериодыРасчетаПоФизическимЛицам.НайтиСтроки(Новый Структура("ФизическоеЛицо", ТекущееФизическоеЛицо));
				Если СтрокиТаблицыПериодов.Количество() > 0 Тогда
					МесяцНачала = СтрокиТаблицыПериодов[0].НачалоГодаНалоговогоПериода;
					МесяцОкончания = СтрокиТаблицыПериодов[0].ПоследнийМесяцНалоговогоПериода;
				КонецЕсли;
			КонецЕсли;	
			Если Не (ТекущаяСтрока.МесяцНалоговогоПериода >= МесяцНачала И ТекущаяСтрока.МесяцНалоговогоПериода <= МесяцОкончания) Тогда
				СтрокиКУдалению.Вставить(ТекущаяСтрока);
			КонецЕсли;	
			
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Удалить(УдаляемаяСтрока.Ключ);		
		КонецЦикла;	
		
		ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Индексы.Добавить("ФизическоеЛицо, ДоходТекущегоРасчета, ДоходМежрасчетногоПериода");
		СоответствиеНерезидентов = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.ВыгрузитьКолонку("ФизическоеЛицо"));
		
	КонецЕсли;
	
	РассчитыватьНалогНарастающимИтогом = ДанныеУчетаДоходов.Количество() > 0;
	
	// данные о праве на вычеты будем читать только при наличии резидентов
	Если РассчитыватьНалогНарастающимИтогом Тогда 
			
		// 7.	Получим таблицу с данными для распределения результатов расчета по подразделениям и категориям
		//	Из таблицы значений с данными учета доходов с дополнительно рассчитанной на предыдущем шаге колонкой БазаРаспределения
		//	копированием получаем новую таблицу значений, данные которой сгруппированы по полям 
		//	ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, КатегорияДохода, Подразделение, ДоходМежрасчетногоПериода, ДоходТекущегоРасчета
		ДоходыПоПодразделениямИКатегориям = ДанныеУчетаДоходов.Скопировать(, "ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, КатегорияДохода, Подразделение, ДоходМежрасчетногоПериода, ДоходТекущегоРасчета, ДоходыБезВычетов, БазаРаспределения");
		ДоходыПоПодразделениямИКатегориям.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, КатегорияДохода, Подразделение, ДоходМежрасчетногоПериода, ДоходТекущегоРасчета", "ДоходыБезВычетов, БазаРаспределения");
		ДоходыПоПодразделениямИКатегориям.Колонки.ДоходыБезВычетов.Имя = "СуммаДоходаТекущегоРасчета"; 
		ДоходыПоПодразделениямИКатегориям.Колонки.БазаРаспределения.Имя = "СуммаДохода"; 
		ДоходыПоПодразделениямИКатегориям.Индексы.Добавить("ФизическоеЛицо");
		
		// 8.	Дополним таблицу значений с данными учета доходов итогами по месяцам и датам получения дохода, в том числе нарастающим итогом с начала года. 
		//		В результате в таблице должно получиться как минимум по одной строке на каждый месяц, по которому выполняется расчет по физическому лицу. 
		//	В таблице данных учета оставляем колонки ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, ДоходМежрасчетногоПериода, ДоходыБезВычетов, ВсеДоходы, БазаРаспределения
		//	и добавляем:
		//	- ОблагаемыйДоход - облагаемый доход нарастающим итогом с начала месяца этой даты по дату получения дохода из строки таблицы, причем строка с ДоходМежрасчетногоПериода = Истина предшествует строке "окончательного расчета" той же даты и не включает доход "окончательного расчета".
		//	- ОблагаемыйДоходНарастающимИтогом - облагаемый доход на конец месяца нарастающим итогом с начала года, заполняется только для первой строки за месяц.
		//	- ОблагаемыйДоходЗаМесяц - облагаемый доход месяца (доход - вычеты к доходам), заполняется только для первой строки за месяц.
		//	- ВсеДоходыЗаМесяц - сумма доходов месяца (без учета вычетов), служит флажком наличия доходов, заполняется только для первой строки за месяц.
		//	- СтаршийМесяцПолученияДохода - наибольший месяц налогового периода, за который имеется положительный доход (без учета вычетов), служит ограничением для расчета вычетов, заполняется только для первой строки за месяц.
		//	Для последующего удобства обхода таблицы добавляем признаки первой и последней строки по физическому лицу, налоговому периоду, месяцу налогового периода и дате получения дохода.
		ДанныеУчетаДоходов.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, ДоходМежрасчетногоПериода", "ДоходыБезВычетов, ВсеДоходы");	
		ДанныеУчетаДоходов.Сортировать("ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, ДоходМежрасчетногоПериода УБЫВ", Новый СравнениеЗначений);
		
		ДанныеУчетаДоходов.Колонки.Добавить("ОблагаемыйДоход", Новый ОписаниеТипов("Число")); 
		ДанныеУчетаДоходов.Колонки.Добавить("ОблагаемыйДоходНарастающимИтогом", Новый ОписаниеТипов("Число"));
		ДанныеУчетаДоходов.Колонки.Добавить("ОблагаемыйДоходЗаМесяц", Новый ОписаниеТипов("Число"));
		ДанныеУчетаДоходов.Колонки.Добавить("ВсеДоходыЗаМесяц", Новый ОписаниеТипов("Число"));
		ДанныеУчетаДоходов.Колонки.Добавить("СтаршийМесяцПолученияДохода", Новый ОписаниеТипов("Дата"));
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПоследняяСтрокаЗаДату", Новый ОписаниеТипов("Булево"));
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПоследняяСтрокаЗаМесяц", Новый ОписаниеТипов("Булево"));	
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПоследняяСтрокаЗаГод", Новый ОписаниеТипов("Булево"));	
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПоследняяСтрокаПоФизическомуЛицу", Новый ОписаниеТипов("Булево"));
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПерваяСтрокаЗаДату", Новый ОписаниеТипов("Булево"));
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПерваяСтрокаЗаМесяц", Новый ОписаниеТипов("Булево"));	
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПерваяСтрокаЗаГод", Новый ОписаниеТипов("Булево"));	
		ДанныеУчетаДоходов.Колонки.Добавить("ЭтоПерваяСтрокаПоФизическомуЛицу", Новый ОписаниеТипов("Булево"));
		
		//	Описание алгоритма:
		//	В результирующей таблице (для экономии памяти, модифицируем входную таблицу с доходами) будут строки на каждую дату получения дохода, причем если на дату зарегистрирован 
		//	доход для промежуточного и для окончательно расчета, на дату будет две строки с разными значениями ДоходМежрасчетногоПериода. 
		//	Если облагаемый доход нарастающим итогом с начала месяца по дату получения дохода равен 0 и эта строка не является последней за месяц, то не будем оставлять ее в таблице.
		//	Если за месяц, входящий в период расчета по физическому лицу, вообще не было зарегистрировано доходов, то добавим строку с датой получения дохода, равной концу месяца.
		//	При расчете поля ОблагаемыйДоход (доход нарастающим итогом с начала месяца этой даты по дату получения дохода):
		//		если в строке отражен доход межрасчетного периода (ДоходМежрасчетногоПериода = Истина), возьмем все доходы за предыдущие даты месяца и доход текущей строки
		//		если в строке отражен доход окончательного расчета (ДоходМежрасчетногоПериода = Ложь), возьмем все доходы за предыдущие даты месяца и все доходы за текущую дату
		//	Алгоритм реализуется оптимальным образом за счет сортировки предварительно свернутой таблицы с данными учета доходов  по полям ФизическоеЛицо, МесяцНалоговогоПериода, ДатаПолученияДохода, ДоходМежрасчетногоПериода (по убыванию)  
		СтрокиКУдалению = Новый Соответствие;
		ИндексОбрабатываемойСтроки = 0;
		Пока ИндексОбрабатываемойСтроки <= ДанныеУчетаДоходов.Количество() - 1 Цикл
			
			СтрокиПоФизическомуЛицу = Новый Массив;
			ПервыеСтрокиМесяцев = Новый Массив;
			ТекущаяСтрока = ДанныеУчетаДоходов[ИндексОбрабатываемойСтроки];
			ТекущееФизическоеЛицо = ТекущаяСтрока.ФизическоеЛицо;
			
			МесяцНачала = '00010101';
			МесяцОкончания = '00010101';
			СтрокиТаблицыПериодов = ПериодыРасчетаПоФизическимЛицам.НайтиСтроки(Новый Структура("ФизическоеЛицо", ТекущееФизическоеЛицо));
			Если СтрокиТаблицыПериодов.Количество() > 0 Тогда
				МесяцНачала = СтрокиТаблицыПериодов[0].НачалоГодаНалоговогоПериода;
				МесяцОкончания = СтрокиТаблицыПериодов[0].ПоследнийМесяцНалоговогоПериода;
			КонецЕсли;
			
			ПоследнийОбработанныйМесяц = ТекущаяСтрока.МесяцНалоговогоПериода;
			ПоследнийМесяцДополнения = Мин(НачалоГода(ТекущаяСтрока.МесяцНалоговогоПериода), МесяцОкончания);
			ДополнитьСтрокамиМесяцевБезДоходов(ДанныеУчетаДоходов, СтрокиПоФизическомуЛицу, ПервыеСтрокиМесяцев, ТекущееФизическоеЛицо, МесяцНачала, ПоследнийМесяцДополнения, ИндексОбрабатываемойСтроки);	
			
			ПредыдущаяСтрока = Неопределено;
			ПредыдущийНалоговыйПериод = Неопределено;
			Пока ИндексОбрабатываемойСтроки <= ДанныеУчетаДоходов.Количество() - 1 И ДанныеУчетаДоходов[ИндексОбрабатываемойСтроки].ФизическоеЛицо = ТекущееФизическоеЛицо Цикл
				
				ТекущаяСтрока = ДанныеУчетаДоходов[ИндексОбрабатываемойСтроки];
				ТекущийМесяцНалоговогоПериода = ТекущаяСтрока.МесяцНалоговогоПериода;
				
				Если Не (ТекущийМесяцНалоговогоПериода >= МесяцНачала И ТекущийМесяцНалоговогоПериода <= МесяцОкончания) Тогда
					ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
					СтрокиКУдалению.Вставить(ТекущаяСтрока);
					Продолжить;
				КонецЕсли;	
				
				УдалятьТекущуюСтроку = Ложь;
				ТекущийНалоговыйПериод = НачалоГода(ТекущийМесяцНалоговогоПериода);
				
				Если ТекущийНалоговыйПериод <> ПредыдущийНалоговыйПериод Или ПредыдущаяСтрока = Неопределено Тогда	
					
					Если ПредыдущаяСтрока <> Неопределено Тогда
						ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаГод = Истина;
						ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаМесяц = Истина;
						ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаДату = Истина;
						РассчитатьСтаршийМесяцПолученияДохода(ПервыеСтрокиМесяцев);
					КонецЕсли;	
					
					ПоследнийМесяцДополнения = Мин(ТекущийМесяцНалоговогоПериода, МесяцОкончания);
					ДополнитьСтрокамиМесяцевБезДоходов(ДанныеУчетаДоходов, СтрокиПоФизическомуЛицу, ПервыеСтрокиМесяцев, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод, ПоследнийМесяцДополнения, ИндексОбрабатываемойСтроки);			
					
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаГод = Месяц(ТекущийМесяцНалоговогоПериода) = 1;
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаМесяц = Истина;
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаДату = Истина;
					
					ОблагаемыйДоход = 0;
					ОблагаемыйДоходНарастающимИтогомЗаГод = 0;
					ПерваяСтрокаЗаМесяц = ТекущаяСтрока;
					ПервыеСтрокиМесяцев.Добавить(ПерваяСтрокаЗаМесяц);
					ПредыдущийНалоговыйПериод = ТекущийНалоговыйПериод;
					
				ИначеЕсли ТекущийМесяцНалоговогоПериода <> ПредыдущаяСтрока.МесяцНалоговогоПериода Тогда 			
					
					ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаМесяц = Истина;
					ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаДату = Истина;
					
					ПоследнийМесяцДополнения = Мин(ТекущийМесяцНалоговогоПериода, МесяцОкончания);
					ДополнитьСтрокамиМесяцевБезДоходов(ДанныеУчетаДоходов, СтрокиПоФизическомуЛицу, ПервыеСтрокиМесяцев, ТекущееФизическоеЛицо, ДобавитьМесяц(ПредыдущаяСтрока.МесяцНалоговогоПериода, 1), ТекущийМесяцНалоговогоПериода, ИндексОбрабатываемойСтроки, ОблагаемыйДоходНарастающимИтогомЗаГод);
					
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаМесяц = Истина;
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаДату = Истина;
					
					ОблагаемыйДоход = 0;		
					ПерваяСтрокаЗаМесяц = ТекущаяСтрока;
					ПервыеСтрокиМесяцев.Добавить(ПерваяСтрокаЗаМесяц);
					
				ИначеЕсли ТекущаяСтрока.ДатаПолученияДохода <> ПредыдущаяСтрока.ДатаПолученияДохода Тогда
					ПредыдущаяСтрока.ЭтоПоследняяСтрокаЗаДату = Истина;
					// Если на предыдущую дату доход нарастающим итогом с начала месяца равен 0, то соответствующая строка не нужна: в
					// месяце есть еще строки
					Если ПредыдущаяСтрока.ОблагаемыйДоход = 0 Тогда
						ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПредыдущаяСтрока, "ЭтоПерваяСтрокаПоФизическомуЛицу, ЭтоПерваяСтрокаЗаГод, ЭтоПерваяСтрокаЗаМесяц, ОблагаемыйДоходЗаМесяц, ВсеДоходыЗаМесяц");								
						СтрокиКУдалению.Вставить(ПредыдущаяСтрока);	
						СтрокиПоФизическомуЛицу.Удалить(СтрокиПоФизическомуЛицу.Количество() - 1);
						Если ПредыдущаяСтрока.ЭтоПерваяСтрокаЗаМесяц Тогда
							ПерваяСтрокаЗаМесяц = ТекущаяСтрока;
							ПервыеСтрокиМесяцев.Добавить(ПерваяСтрокаЗаМесяц);
						КонецЕсли;	
					КонецЕсли;		
					ТекущаяСтрока.ЭтоПерваяСтрокаЗаДату = Истина;
				ИначеЕсли ОблагаемыйДоход + ТекущаяСтрока.ДоходыБезВычетов = 0 Тогда 
					УдалятьТекущуюСтроку = Истина;
				КонецЕсли;	
				
				ОблагаемыйДоход = ОблагаемыйДоход + ТекущаяСтрока.ДоходыБезВычетов;
				ОблагаемыйДоходНарастающимИтогомЗаГод = ОблагаемыйДоходНарастающимИтогомЗаГод + ТекущаяСтрока.ДоходыБезВычетов;
				ТекущаяСтрока.ОблагаемыйДоход = ОблагаемыйДоход;	
				ПерваяСтрокаЗаМесяц.ОблагаемыйДоходЗаМесяц = ПерваяСтрокаЗаМесяц.ОблагаемыйДоходЗаМесяц + ТекущаяСтрока.ДоходыБезВычетов;
				ПерваяСтрокаЗаМесяц.ВсеДоходыЗаМесяц = ПерваяСтрокаЗаМесяц.ВсеДоходыЗаМесяц + ТекущаяСтрока.ВсеДоходы;
				ПерваяСтрокаЗаМесяц.ОблагаемыйДоходНарастающимИтогом = ОблагаемыйДоходНарастающимИтогомЗаГод;
				
				ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
				
				Если УдалятьТекущуюСтроку Тогда
					СтрокиКУдалению.Вставить(ТекущаяСтрока);
				Иначе	
					ПредыдущаяСтрока = ТекущаяСтрока;
					СтрокиПоФизическомуЛицу.Добавить(ТекущаяСтрока);
				КонецЕсли;	
			КонецЦикла;	// по физ.лицу                        
			
			Если СтрокиПоФизическомуЛицу.Количество() > 0 Тогда
				СтрокиПоФизическомуЛицу[СтрокиПоФизическомуЛицу.Количество() - 1].ЭтоПоследняяСтрокаПоФизическомуЛицу = Истина;	
				СтрокиПоФизическомуЛицу[СтрокиПоФизическомуЛицу.Количество() - 1].ЭтоПоследняяСтрокаЗаГод = Истина;
				СтрокиПоФизическомуЛицу[СтрокиПоФизическомуЛицу.Количество() - 1].ЭтоПоследняяСтрокаЗаМесяц = Истина;
				СтрокиПоФизическомуЛицу[СтрокиПоФизическомуЛицу.Количество() - 1].ЭтоПоследняяСтрокаЗаДату = Истина;
				СтрокиПоФизическомуЛицу[0].ЭтоПерваяСтрокаПоФизическомуЛицу = Истина;
				СтрокиПоФизическомуЛицу[0].ЭтоПерваяСтрокаЗаГод = Истина;
				СтрокиПоФизическомуЛицу[0].ЭтоПерваяСтрокаЗаМесяц = Истина;
				СтрокиПоФизическомуЛицу[0].ЭтоПерваяСтрокаЗаДату = Истина;
				РассчитатьСтаршийМесяцПолученияДохода(ПервыеСтрокиМесяцев);
			КонецЕсли;	
			
		КонецЦикла;		
		Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ДанныеУчетаДоходов.Удалить(УдаляемаяСтрока.Ключ);		
		КонецЦикла;	
		
		// 9.	Получим доходы с предыдущего места работы
		//	Читаем регистр ДоходыПредыдущегоМестаРаботыНДФЛ с отбором по списку физических лиц, головной организации для всех месяцев периода расчета.
		//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, МесяцНалоговогоПериода, Размер
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоходыПредыдущегоМестаРаботыНДФЛ.ФизическоеЛицо,
		|	ДоходыПредыдущегоМестаРаботыНДФЛ.МесяцНалоговогоПериода,
		|	ДоходыПредыдущегоМестаРаботыНДФЛ.Размер
		|ИЗ
		|	РегистрСведений.ДоходыПредыдущегоМестаРаботыНДФЛ КАК ДоходыПредыдущегоМестаРаботыНДФЛ
		|ГДЕ
		|	ДоходыПредыдущегоМестаРаботыНДФЛ.ФизическоеЛицо В (&СписокФизическихЛиц)
		|	И ДоходыПредыдущегоМестаРаботыНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ДоходыПредыдущегоМестаРаботыНДФЛ.МесяцНалоговогоПериода
		|		МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета";
		ДоходыСПредыдущегоМестаРаботы = Запрос.Выполнить().Выгрузить();
		ДоходыСПредыдущегоМестаРаботы.Индексы.Добавить(ПоляПоиска);
		
		// Признак из учетной политики, определяющий порядок накопления сумм стандартных вычетов. 
		ПрименятьСтандартныеВычетыНарастающимИтогом = Истина;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоНДФЛ.ОсобенностиИсчисленияНДФЛ КАК ОсобенностиИсчисленияНДФЛ
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
		|ГДЕ
		|	УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПрименятьСтандартныеВычетыНарастающимИтогом = Выборка.ОсобенностиИсчисленияНДФЛ = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом;
		КонецЕсли;
		
		// 10.	Информация о правах на стандартные вычеты
		//	Читаем из регистра СтандартныеВычетыПоНДФЛВторичный записи с отбором по списку физических лиц, действующие (определяем по ДатаНачала) на начало года первого месяца 
		//	налогового периода расчета или зарегистрированные между началом года первого месяца налогового периода расчета и последним месяцем налогового периода расчета.
		//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, ДатаНачала, ДатаОкончания, ПериодРегистрацииНачало, ПериодРегистрацииОкончание, КодВычета, ЛичныйВычет, Количество.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВычетыНаДетей.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыНаДетей.ДатаНачала КАК ДатаНачала,
		|	ВычетыНаДетей.ДатаОкончания КАК ДатаОкончания,
		|	ВычетыНаДетей.ПериодРегистрацииНачало КАК ПериодРегистрацииНачало,
		|	ВычетыНаДетей.ПериодРегистрацииОкончание КАК ПериодРегистрацииОкончание,
		|	ВычетыНаДетей.КодВычета КАК КодВычета,
		|	ВычетыНаДетей.ЛичныйВычет КАК ЛичныйВычет,
		|	ВычетыНаДетей.Количество КАК Количество
		|ИЗ
		|	РегистрСведений.СтандартныеВычетыПоНДФЛВторичный КАК ВычетыНаДетей
		|ГДЕ
		|	ВычетыНаДетей.ФизическоеЛицо В(&СписокФизическихЛиц)
		|	И (&НачалоГодаПериодаРасчета МЕЖДУ ВычетыНаДетей.ДатаНачала И ВычетыНаДетей.ДатаОкончания
		|			ИЛИ ВычетыНаДетей.ДатаНачала МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета)
		|	И (НЕ ВычетыНаДетей.ЛичныйВычет
		|			ИЛИ ВычетыНаДетей.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка))";
		#Вставка
		//1АБ Беляев 14.03.2021 + 
		Если НЕ ОкончательныйРасчет И АБ_НеПредоставлятьВычеты Тогда
			Запрос.Текст = Запрос.Текст + "
			|И ЛОЖЬ";
		КонецЕсли;
		//1АБ Беляев 14.03.2021 -
		#КонецВставки
		ВычетыНаДетейИЛичные = Запрос.Выполнить().Выгрузить();
		ВычетыНаДетейИЛичные.Индексы.Добавить("ФизическоеЛицо"); 
		
		// 11.	Получим информацию о применении вычетов по физическим лицам в организации, для которой ведется расчет налога.
		//	Читаем записи регистра ПрименениеСтандартныхВычетовПоНДФЛВторичный по списку физических лиц и головной организации, действующие (определяем по ДатаНачала) на начало года первого месяца 
		//	налогового периода расчета или зарегистрированные между началом года первого месяца налогового периода расчета и последним месяцем налогового периода расчета.
		//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, ДатаНачала, ДатаОкончания, ПрименятьВычеты
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрименениеСтандартныхВычетовПоНДФЛВторичный.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаНачала КАК ДатаНачала,
		|	ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаОкончания КАК ДатаОкончания,
		|	ПрименениеСтандартныхВычетовПоНДФЛВторичный.ПрименятьВычеты КАК ПрименятьВычеты
		|ИЗ
		|	РегистрСведений.ПрименениеСтандартныхВычетовПоНДФЛВторичный КАК ПрименениеСтандартныхВычетовПоНДФЛВторичный
		|ГДЕ
		|	ПрименениеСтандартныхВычетовПоНДФЛВторичный.ФизическоеЛицо В(&СписокФизическихЛиц)
		|	И ПрименениеСтандартныхВычетовПоНДФЛВторичный.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И (&НачалоГодаПериодаРасчета МЕЖДУ ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаНачала И ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаОкончания
		|			ИЛИ ПрименениеСтандартныхВычетовПоНДФЛВторичный.ДатаНачала МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета)";
		#Вставка
		//1АБ Беляев 14.03.2021 +
		Если НЕ ОкончательныйРасчет И АБ_НеПредоставлятьВычеты Тогда
			Запрос.Текст = Запрос.Текст + "
			|И ЛОЖЬ";
		КонецЕсли;
		//1АБ Беляев 14.03.2021 -
		#КонецВставки
		ПрименениеСтандартныхВычетов = Запрос.Выполнить().Выгрузить();
		ПрименениеСтандартныхВычетов.Индексы.Добавить("ФизическоеЛицо");
		
		// Прочитаем размеры вычетов за каждый год периода расчета.
		// В качестве результата получаем соответствие, в котором по годам лежат соответствия, в которых каждому вычету
		// сопоставлена структура с полями Размер и ОграничениеПоДоходам.
		РазмерыВычетов = УчетНДФЛПовтИсп.РазмерыВычетов(НачалоГода(ПервыйМесяцНалоговогоПериода), НачалоГода(ПоследнийМесяцНалоговогоПериода));
		
	КонецЕсли;
	
	// 12.	Получим данные об имущественных вычетах (как ранее предоставленные, так и о праве на вычет)
	//	Читаем записи регистра накопления ИмущественныеВычетыНДФЛ по списку физических лиц и головной организации, зарегистрированные за весь период расчетов.
	//	Для записей прихода (права на вычеты) период дополнительно ограничиваем сверху окончанием месяца расчета (весь период расчетов может заканчиваться позже), а также учитываем только те записи, у которых год поля период совпадает со значением измерения Год.
	//	Для записей расхода (использованные вычеты) дополнительно проверяем условие на "межрасчетность" записей при выполнении промежуточного расчета.
	//	Полученный результат дополняем данными текущего регистратора о праве на вычеты и группируем.
	//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, МесяцНалоговогоПериода, КодВычета, ВидДвижения, Подразделение, Сумма.
	КонецПериодаИмущественныхВычетов = Макс(КонецПериодаРасчета, КонецМесяцаРасчета);
	Запрос.УстановитьПараметр("КонецПериодаИмущественныхВычетов", КонецПериодаИмущественныхВычетов);
	
	#Удаление
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмущественныеВычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(ИмущественныеВычеты.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИмущественныеВычеты.КодВычета КАК КодВычета,
	|	ИмущественныеВычеты.ВидДвижения КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ИмущественныеВычеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ИмущественныеВычеты.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	СУММА(ИмущественныеВычеты.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычеты
	|ГДЕ
	|	ИмущественныеВычеты.Регистратор <> &ИсключаемыйРегистратор
	|	И ИмущественныеВычеты.Период МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаИмущественныхВычетов
	|	И ИмущественныеВычеты.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ИмущественныеВычеты.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И НЕ ИмущественныеВычеты.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	И ВЫБОР
	|			КОГДА ИмущественныеВычеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ИмущественныеВычеты.Год = ГОД(ИмущественныеВычеты.Период)
	|						И ИмущественныеВычеты.Период <= &КонецМесяцаРасчета
	|			ИНАЧЕ ИмущественныеВычеты.Период <= &КонецПериодаРасчета
	|					И &ОкончательныйРасчетВычеты
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИмущественныеВычеты.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(ИмущественныеВычеты.Период, МЕСЯЦ),
	|	ИмущественныеВычеты.КодВычета,
	|	ИмущественныеВычеты.ВидДвижения,
	|	ВЫБОР
	|		КОГДА ИмущественныеВычеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ИмущественныеВычеты.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ";
	#КонецУдаления
	#Вставка
	//1АБ Беляев 14.03.2021 +
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИмущественныеВычеты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(ИмущественныеВычеты.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИмущественныеВычеты.КодВычета КАК КодВычета,
	|	ИмущественныеВычеты.ВидДвижения КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ИмущественныеВычеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ИмущественныеВычеты.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	СУММА(ИмущественныеВычеты.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычеты
	|ГДЕ
	|	ИмущественныеВычеты.Регистратор <> &ИсключаемыйРегистратор
	|	И ИмущественныеВычеты.Период МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаИмущественныхВычетов
	|	И ИмущественныеВычеты.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ИмущественныеВычеты.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И НЕ ИмущественныеВычеты.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	И ВЫБОР
	|			КОГДА ИмущественныеВычеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ИмущественныеВычеты.Год = ГОД(ИмущественныеВычеты.Период)
	|						И ИмущественныеВычеты.Период <= &КонецМесяцаРасчета
	|			ИНАЧЕ ИмущественныеВычеты.Период <= &КонецПериодаРасчета
	|					И &ОкончательныйРасчетВычеты
	|		КОНЕЦ";
	Если НЕ ОкончательныйРасчет И АБ_НеПредоставлятьВычеты Тогда
		Запрос.Текст = Запрос.Текст + "
		|И ЛОЖЬ";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ИмущественныеВычеты.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(ИмущественныеВычеты.Период, МЕСЯЦ),
	|	ИмущественныеВычеты.КодВычета,
	|	ИмущественныеВычеты.ВидДвижения,
	|	ВЫБОР
	|		КОГДА ИмущественныеВычеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ИмущественныеВычеты.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ";
	//1АБ Беляев 14.03.2021 -
	#КонецВставки
	Если ОкончательныйРасчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетВычеты", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетВычеты", 
		"(Период < &НачалоМесяцаРасчета
		|			ИЛИ ВычетМежрасчетногоПериода
		|				И (Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета))");
	КонецЕсли;
	
	ИмущественныеВычеты = Запрос.Выполнить().Выгрузить();
	Если ДвиженияТекущегоРегистратора <> Неопределено И ПроведениеСервер.ЕстьДвижения(ДвиженияТекущегоРегистратора, "ИмущественныеВычетыНДФЛ") Тогда
		ЕстьНовыеЗаписи = Ложь;
		Для Каждого СтрокаВычетовТекущегоРегистратора Из ДвиженияТекущегоРегистратора.ИмущественныеВычетыНДФЛ Цикл
			Если СоответствиеФизическихЛиц[СтрокаВычетовТекущегоРегистратора.ФизическоеЛицо] <> Истина Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаВычетовТекущегоРегистратора.ЗарегистрированоПриНачисленииАванса) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ИмущественныеВычеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВычетовТекущегоРегистратора);
			НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(СтрокаВычетовТекущегоРегистратора.Период);
			НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ЕстьНовыеЗаписи = Истина;
			
		КонецЦикла;	
		Если ЕстьНовыеЗаписи Тогда // Новые права и сторно-записи регистрируются достаточно редко, поэтому проверим, надо ли сворачивать таблицу.
			ИмущественныеВычеты.Свернуть("ФизическоеЛицо, Подразделение, МесяцНалоговогоПериода, ВидДвижения, КодВычета", "Сумма");
		КонецЕсли;
	КонецЕсли;	
	ИмущественныеВычеты.Индексы.Добавить("ФизическоеЛицо, МесяцНалоговогоПериода, ВидДвижения");
	
	// 13.	Получим информацию о предоставленных стандартных и социальных вычетах.
	//	Читаем записи регистра накопления ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛс по списку физических лиц и головной организации, зарегистрированные за 
	//	период между началом года первого месяца налогового периода и концом последнего месяца налогового периода.
	//	Дополнительно проверяем условие на "межрасчетность" записей при выполнении промежуточного расчета.
	//	Для стандартных вычетов заполняем поля Подразделение и КодВычета (для социальных вычетов берем пустые ссылки). 
	//	Рассчитываем поле ЭтоСоциальныйВычет (булево) исходя из группы вычета.
	//	Полученный результат дополняем данными текущего регистратора о праве на социальные вычеты и группируем.
	//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, МесяцНалоговогоПериода, КодВычета, ЭтоСоциальныйВычет, Подразделение, Сумма.
	#Удаление
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВычетыБД.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.КодВычета
	|	КОНЕЦ КАК КодВычета,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСоциальныйВычет,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	НАЧАЛОПЕРИОДА(ВычетыБД.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			КОГДА ВычетыБД.МесяцПериодаПредоставленияВычета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			ИНАЧЕ ВычетыБД.МесяцПериодаПредоставленияВычета
	|		КОНЕЦ, МЕСЯЦ) КАК МесяцПериодаПредоставленияВычета,
	|	СУММА(ВычетыБД.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ КАК ВычетыБД
	|ГДЕ
	|	ВычетыБД.Период МЕЖДУ &НачалоПредшествующегоГода И &КонецМесяцаРасчета
	|	И ВычетыБД.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ВычетыБД.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И (ВЫБОР
	|				КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|					ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|				КОГДА ВычетыБД.МесяцПериодаПредоставленияВычета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|				ИНАЧЕ ВычетыБД.МесяцПериодаПредоставленияВычета
	|			КОНЕЦ МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|			ИЛИ ВычетыБД.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета)
	|	И ВычетыБД.Регистратор <> &ИсключаемыйРегистратор
	|	И НЕ ВычетыБД.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	И &ОкончательныйРасчетВычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВычетыБД.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.Подразделение
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.КодВычета
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			КОГДА ВычетыБД.МесяцПериодаПредоставленияВычета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			ИНАЧЕ ВычетыБД.МесяцПериодаПредоставленияВычета
	|		КОНЕЦ, МЕСЯЦ),
	|	ВычетыБД.МесяцНалоговогоПериода";
	#КонецУдаления
	#Вставка
	//1АБ Беляев 14.03.2021 +
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВычетыБД.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.КодВычета
	|	КОНЕЦ КАК КодВычета,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСоциальныйВычет,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	НАЧАЛОПЕРИОДА(ВычетыБД.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			КОГДА ВычетыБД.МесяцПериодаПредоставленияВычета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			ИНАЧЕ ВычетыБД.МесяцПериодаПредоставленияВычета
	|		КОНЕЦ, МЕСЯЦ) КАК МесяцПериодаПредоставленияВычета,
	|	СУММА(ВычетыБД.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ КАК ВычетыБД
	|ГДЕ
	|	ВычетыБД.Период МЕЖДУ &НачалоПредшествующегоГода И &КонецМесяцаРасчета
	|	И ВычетыБД.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И ВычетыБД.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И (ВЫБОР
	|				КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|					ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|				КОГДА ВычетыБД.МесяцПериодаПредоставленияВычета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|				ИНАЧЕ ВычетыБД.МесяцПериодаПредоставленияВычета
	|			КОНЕЦ МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|			ИЛИ ВычетыБД.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета)
	|	И ВычетыБД.Регистратор <> &ИсключаемыйРегистратор
	|	И НЕ ВычетыБД.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	И &ОкончательныйРасчетВычеты";
	Если НЕ ОкончательныйРасчет И АБ_НеПредоставлятьВычеты Тогда
		Запрос.Текст = Запрос.Текст + "
		|И ЛОЖЬ";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВычетыБД.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.Подразделение
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|		ИНАЧЕ ВычетыБД.КодВычета
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВычетыБД.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			КОГДА ВычетыБД.МесяцПериодаПредоставленияВычета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВычетыБД.МесяцНалоговогоПериода
	|			ИНАЧЕ ВычетыБД.МесяцПериодаПредоставленияВычета
	|		КОНЕЦ, МЕСЯЦ),
	|	ВычетыБД.МесяцНалоговогоПериода";
	//1АБ Беляев 14.03.2021 -
	#КонецВставки
	Если ОкончательныйРасчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетВычеты", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетВычеты", 
		"(Период < &НачалоМесяцаРасчета
		|			ИЛИ ВычетМежрасчетногоПериода
		|				И (Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета))");		
	КонецЕсли;

	ПредоставленныеСтандартныеИСоциальныеВычеты = Запрос.Выполнить().Выгрузить();
	Если ДвиженияТекущегоРегистратора <> Неопределено И ПроведениеСервер.ЕстьДвижения(ДвиженияТекущегоРегистратора, "ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ") Тогда
		ЕстьНовыеЗаписи = Ложь;
		Для Каждого ТекущаяСтрока Из ДвиженияТекущегоРегистратора.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ Цикл
			Если СоответствиеФизическихЛиц[ТекущаяСтрока.ФизическоеЛицо] <> Истина Тогда
				Продолжить;	
			КонецЕсли;			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ЗарегистрированоПриНачисленииАванса) Тогда
				Продолжить;
			КонецЕсли;
				
			НоваяСтрока = ПредоставленныеСтандартныеИСоциальныеВычеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.МесяцНалоговогоПериода = НачалоМесяца(ТекущаяСтрока.МесяцНалоговогоПериода);
			НоваяСтрока.ЭтоСоциальныйВычет = ТекущаяСтрока.КодВычета.ГруппаВычета = Перечисления.ГруппыВычетовПоНДФЛ.Социальные;	
			Если НоваяСтрока.ЭтоСоциальныйВычет Тогда
				НоваяСтрока.МесяцПериодаПредоставленияВычета = НоваяСтрока.МесяцНалоговогоПериода;
				НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				НоваяСтрока.КодВычета = Справочники.ВидыВычетовНДФЛ.ПустаяСсылка();
			ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.МесяцПериодаПредоставленияВычета) Тогда	
				НоваяСтрока.МесяцПериодаПредоставленияВычета = НоваяСтрока.МесяцНалоговогоПериода;
			КонецЕсли;
			НоваяСтрока.МесяцПериодаПредоставленияВычета = НачалоМесяца(НоваяСтрока.МесяцПериодаПредоставленияВычета);
			ЕстьНовыеЗаписи = Истина;
				
		КонецЦикла;
		Если ЕстьНовыеЗаписи Тогда // Сторно-записи регистрируются достаточно редко, поэтому проверим, надо ли сворачивать таблицу.
			ПредоставленныеСтандартныеИСоциальныеВычеты.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, КодВычета, Подразделение, ЭтоСоциальныйВычет", "Сумма");
		КонецЕсли;			
	КонецЕсли;	
	ПредоставленныеСтандартныеИСоциальныеВычеты.Индексы.Добавить("ФизическоеЛицо, МесяцПериодаПредоставленияВычета, ЭтоСоциальныйВычет");
		
	// 14.	Получим информацию об исчисленном ранее налоге
	//	Читаем приходные записи (соответствуют налогу исчисленному) регистра накопления РасчетыНалогоплательщиковСБюджетомПоНДФЛ по списку физических лиц и головной организации со ставкой резидента 13%, 
	//	зарегистрированные за период между началом года первого месяца налогового периода и концом последнего месяца налогового периода.
	//	Дополнительно проверяем условие на "межрасчетность" записей при выполнении промежуточного расчета.
	//	Рассчитываем поле МесяцНалоговогоПериодаДляПоиска как начало месяца налогового периода.
	//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо,  МесяцНалоговогоПериодаДляПоиска, МесяцНалоговогоПериода, Подразделение, КатегорияДохода и НалогПоСтавке13, НалогСПревышенияПоСтавке13
	#Удаление
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериодаДляПоиска,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	-СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма) КАК НалогПоСтавке13,
	|	-СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения) КАК НалогСПревышенияПоСтавке13
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &ИсключаемыйРегистратор
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период МЕЖДУ &НачалоПредшествующегоГода И &КонецМесяцаРасчета
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода В(&ОсновнаяНалоговаяБаза)
	|	И НЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	И &ОкончательныйРасчетПоРасчетам
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ),
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода";
	#КонецУдаления
	#Вставка
	//1АБ Беляев 14.03.2021 +
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериодаДляПоиска,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	-СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма) КАК НалогПоСтавке13,
	|	-СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СуммаСПревышения) КАК НалогСПревышенияПоСтавке13
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &ИсключаемыйРегистратор
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период МЕЖДУ &НачалоПредшествующегоГода И &КонецМесяцаРасчета
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо В(&СписокФизическихЛиц)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода В(&ОсновнаяНалоговаяБаза)
	|	И НЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	И &ОкончательныйРасчетПоРасчетам";
	Если НЕ ОкончательныйРасчет И АБ_НеПредоставлятьВычеты Тогда
		Запрос.Текст = Запрос.Текст + "
		|И ЛОЖЬ";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ),
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода";
	//1АБ Беляев 14.03.2021 -
	#КонецВставки
	Если ОкончательныйРасчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетПоРасчетам", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОкончательныйРасчетПоРасчетам", 
		"(Период < &НачалоМесяцаРасчета
		|			ИЛИ РасчетМежрасчетногоПериода
		|				И (Период МЕЖДУ &НачалоМесяцаРасчета И &КонецМесяцаРасчета))");	
	КонецЕсли;
	ИсчисленныйРанееНалог = Запрос.Выполнить().Выгрузить();
	Если ДвиженияТекущегоРегистратора <> Неопределено И ПроведениеСервер.ЕстьДвижения(ДвиженияТекущегоРегистратора, "РасчетыНалогоплательщиковСБюджетомПоНДФЛ") Тогда
		ЕстьНовыеЗаписи = Ложь;
		Для Каждого СтрокаНалогаТекущегоРегистратора Из ДвиженияТекущегоРегистратора.РасчетыНалогоплательщиковСБюджетомПоНДФЛ Цикл
			
			Если ЗначениеЗаполнено(СтрокаНалогаТекущегоРегистратора.ЗарегистрированоПриНачисленииАванса) Тогда
				Продолжить;
			КонецЕсли;
			Если СоответствиеФизическихЛиц[СтрокаНалогаТекущегоРегистратора.ФизическоеЛицо] <> Истина 
				Или СтрокаНалогаТекущегоРегистратора.ВидДвижения = ВидДвиженияНакопления.Расход 
				Или СтрокаНалогаТекущегоРегистратора.СтавкаНалогообложенияРезидента <> Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 Тогда
				Продолжить;	
			КонецЕсли;			
				 
			НоваяСтрока = ИсчисленныйРанееНалог.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНалогаТекущегоРегистратора);	
			НоваяСтрока.МесяцНалоговогоПериодаДляПоиска = НачалоМесяца(СтрокаНалогаТекущегоРегистратора.МесяцНалоговогоПериода);
			НоваяСтрока.НалогПоСтавке13 = -СтрокаНалогаТекущегоРегистратора.Сумма;
			НоваяСтрока.НалогСПревышенияПоСтавке13 = -СтрокаНалогаТекущегоРегистратора.СуммаСПревышения;
			ЕстьНовыеЗаписи = Истина;
		КонецЦикла;	
		Если ЕстьНовыеЗаписи Тогда // Сторно-записи регистрируются достаточно редко, поэтому проверим, надо ли сворачивать таблицу.
			ИсчисленныйРанееНалог.Свернуть("Подразделение, ФизическоеЛицо, МесяцНалоговогоПериода, МесяцНалоговогоПериодаДляПоиска, КатегорияДохода", "НалогПоСтавке13, НалогСПревышенияПоСтавке13");	
		КонецЕсли;	
	КонецЕсли;	
	ИсчисленныйРанееНалог.Индексы.Добавить("ФизическоеЛицо, МесяцНалоговогоПериодаДляПоиска"); 
	
	// 15.	Получим информацию об остатках авансовых платежей в бюджет
	//	Читаем остатки из регистра АвансовыеПлатежиИностранцевПоНДФЛ по списку физических лиц на конец месяца расчета за годы периода расчета.
	//	Отнимем движения исключаемого регистратора (удовлетворяющих тем же условиям что и данные остатков)
	//	В качестве результата получаем таблицу значений с полями ФизическоеЛицо, НалоговыйПериод (число, год), Остаток
	Запрос.УстановитьПараметр("МинимальныйГод", Год(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("МаксимальныйГод", Год(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("КонецМесяцаРасчета", КонецМесяца(МесяцРасчета) + 1);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Авансы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Авансы.НалоговыйПериод КАК НалоговыйПериод,
	|	СУММА(Авансы.Остаток) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.Год КАК НалоговыйПериод,
	|		АвансовыеПлатежиИностранцевПоНДФЛОбороты.СуммаОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ.Остатки(
	|				&КонецМесяцаРасчета,
	|				ФизическоеЛицо В (&СписокФизическихЛиц)
	|					И (Год МЕЖДУ &МинимальныйГод И &МаксимальныйГод)
	|					И ГоловнаяОрганизация = &ГоловнаяОрганизация) КАК АвансовыеПлатежиИностранцевПоНДФЛОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияРегистратора.ФизическоеЛицо,
	|		ДвиженияРегистратора.Год,
	|		ВЫБОР
	|			КОГДА ДвиженияРегистратора.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДвиженияРегистратора.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ КАК ДвиженияРегистратора
	|	ГДЕ
	|		ДвиженияРегистратора.Регистратор = &ИсключаемыйРегистратор
	|		И ДвиженияРегистратора.ФизическоеЛицо В(&СписокФизическихЛиц)
	|		И ДвиженияРегистратора.Год МЕЖДУ &МинимальныйГод И &МаксимальныйГод
	|		И ДвиженияРегистратора.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|		И НЕ ДвиженияРегистратора.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АвансовыеДвижения.ФизическоеЛицо,
	|		АвансовыеДвижения.Год,
	|		ВЫБОР
	|			КОГДА АвансовыеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АвансовыеДвижения.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.АвансовыеПлатежиИностранцевПоНДФЛ КАК АвансовыеДвижения
	|	ГДЕ
	|		АвансовыеДвижения.ЗарегистрированоПриНачисленииАванса В (&МесяцыНачисленияЗарплаты)
	|		И АвансовыеДвижения.ФизическоеЛицо В(&СписокФизическихЛиц)
	|		И АвансовыеДвижения.Год МЕЖДУ &МинимальныйГод И &МаксимальныйГод
	|		И АвансовыеДвижения.ГоловнаяОрганизация = &ГоловнаяОрганизация) КАК Авансы
	|
	|СГРУППИРОВАТЬ ПО
	|	Авансы.ФизическоеЛицо,
	|	Авансы.НалоговыйПериод";
	ОстаткиПоАвансовымПлатежам = Запрос.Выполнить().Выгрузить();
	Если ДвиженияТекущегоРегистратора <> Неопределено И ПроведениеСервер.ЕстьДвижения(ДвиженияТекущегоРегистратора, "АвансовыеПлатежиИностранцевПоНДФЛ") Тогда 
		ЕстьНовыеЗаписи = Ложь;
		Для Каждого СтрокаНабора Из ДвиженияТекущегоРегистратора.АвансовыеПлатежиИностранцевПоНДФЛ Цикл
			Если СоответствиеФизическихЛиц[СтрокаНабора.ФизическоеЛицо] <> Истина Или СтрокаНабора.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				Продолжить;	
			КонецЕсли;	
			Если ЗначениеЗаполнено(СтрокаНабора.ЗарегистрированоПриНачисленииАванса) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРезультат = ОстаткиПоАвансовымПлатежам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаНабора);
			СтрокаРезультат.НалоговыйПериод = СтрокаНабора.Год;
			СтрокаРезультат.Остаток = - СтрокаНабора.Сумма;
			ЕстьНовыеЗаписи = Истина;
		КонецЦикла;	
		Если ЕстьНовыеЗаписи Тогда // Сторно-записи регистрируются достаточно редко, поэтому проверим, надо ли сворачивать таблицу.
			ОстаткиПоАвансовымПлатежам.Свернуть("ФизическоеЛицо, НалоговыйПериод", "Остаток");
		КонецЕсли;	
	КонецЕсли;	
	ОстаткиПоАвансовымПлатежам.Индексы.Добавить("ФизическоеЛицо, НалоговыйПериод");
	
	РезультатРасчета = ТаблицаНДФЛ();
	
	СтруктураПоискаПоФизическомуЛицу = Новый Структура("ФизическоеЛицо");
	СтруктураПоискаТекущихДоходов = Новый Структура("ДоходТекущегоРасчета, ДоходМежрасчетногоПериода", Истина, Не ОкончательныйРасчет);
	СтруктураПоискаТекущихДоходовНерезидентов = Новый Структура("ФизическоеЛицо, ДоходТекущегоРасчета, ДоходМежрасчетногоПериода", , Истина, Не ОкончательныйРасчет);
	СтруктураПоискаИсчисленного = Новый Структура("ФизическоеЛицо, МесяцНалоговогоПериодаДляПоиска");
	СтруктураПоискаСтандартныхВычетов = Новый Структура("ФизическоеЛицо, МесяцПериодаПредоставленияВычета, ЭтоСоциальныйВычет");
	СтруктураПоискаИмущественныхВычетов = Новый Структура("ФизическоеЛицо, МесяцНалоговогоПериода, ВидДвижения");
	ОписаниеВычетов = УчетНДФЛПовтИсп.ОписаниеВычетов();
	
	// инициализируем общие вспомогательные объекты
	РезультатРасчетаВспомогательный = РезультатРасчета;
	ВспомогательнаяТаблицаМесяца = РезультатРасчета.СкопироватьКолонки("ФизическоеЛицо, МесяцПериодаПредоставленияВычета, МесяцНалоговогоПериода, Подразделение, КатегорияДохода, НалогПоСтавке13, ЗачтеноАвансовыхПлатежейПоСтавке13, НалогСПревышенияПоСтавке13, ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13");
	ВспомогательнаяТаблицаМесяца.Колонки.Добавить("КоличествоВычетов", Новый ОписаниеТипов("Число"));
	ВспомогательнаяТаблицаФизическогоЛица = ВспомогательнаяТаблицаМесяца.СкопироватьКолонки();
	ВспомогательнаяТаблицаПоДоходамПревышения = ВспомогательнаяТаблицаМесяца.СкопироватьКолонки();
	
	ВспомогательнаяТаблицаВычетовМесяца = Новый ТаблицаЗначений;
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("МесяцПериодаПредоставленияВычета", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ВспомогательнаяТаблицаВычетовМесяца.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Начнем с расчета по резидентам и приравненным к ним.
	Если РассчитыватьНалогНарастающимИтогом Тогда
		
		ВспомогательныеДатыПодразделенияКатегории = Новый ТаблицаЗначений;
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("Подразделение", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("Распределение", Новый ОписаниеТипов("ТаблицаЗначений"));
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("ЗаменятьДатуПолученияДохода", Новый ОписаниеТипов("Булево"));
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("ЗаменятьПодразделение", Новый ОписаниеТипов("Булево"));
		ВспомогательныеДатыПодразделенияКатегории.Колонки.Добавить("ЗаменятьКатегориюДохода", Новый ОписаниеТипов("Булево"));
		
		ВычетыЗаМесяц = Новый ТаблицаЗначений;
		ВычетыЗаМесяц.Колонки.Добавить("КодВычета");
		ВычетыЗаМесяц.Колонки.Добавить("РазмерВычета", Новый ОписаниеТипов("Число"));
		
		СтавкаДляРезидента = 0.13; // Пункт 1 статьи 224 НК РФ.
		СтавкаСПревышения = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.СтавкаЧислом;
		ПределПрогрессивнойШкалы = ПараметрыРасчетаНДФЛПоПрогрессивнойШкале.Предел;
		
		ОсобыеКатегорииДохода = Новый Соответствие; // Эти категории дохода определяют собственные ставки налога, поэтому их нельзя заменять текущими даже при перерасчете.
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.Дивиденды, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке05, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке10, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.ДивидендыПоСтавке12, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПоСтавке03, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПоСтавке06, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке05, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке07, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке10, Истина);
		ОсобыеКатегорииДохода.Вставить(Перечисления.КатегорииДоходовНДФЛ.АвторскиеРоялтиПроцентыПоСтавке15, Истина);
		
		ПериодСрезаПравНаВычеты = НачалоМесяца(Макс(МесяцРасчета, ПоследнийМесяцНалоговогоПериода));
		ПереноситьДоходДляПримененияВычетовВМесяцРасчета = Не ОкончательныйРасчет И Год(МесяцРасчета) = Год(ДатаУдержанияИсчисленногоНалога) И МесяцРасчета < НачалоМесяца(ДатаУдержанияИсчисленногоНалога);
		
		// Инициализируем вспомогательные объекты.
		СтруктураПоиска = Новый Структура(ПоляПоиска);
		ПоляПоискаПоДатам = "ДатаПолученияДохода, ДоходМежрасчетногоПериода";
		СтруктураПоискаПоДатам = Новый Структура(ПоляПоискаПоДатам);
		СтруктураПоискаТолькоПоДатам = Новый Структура("ДатаПолученияДохода");
		СтруктураПоискаПоДатамИПодразделениям = Новый Структура("ДатаПолученияДохода,Подразделение");
		
		// Структуру описания остатков создаем однократно, в дальнейшем для каждого сочетания ФЛ+Налоговый период очищаем ее коллекции.
		ОстаткиВычетов = НовыйОстаткиВычетов();
		ТекущиеОстаткиВычетов = ОстаткиВычетов.Остатки; 
		
		ПараметрыЗаполненияРесурсаНалогПоСтавке13 = НовыйПараметрыЗаполненияРесурса("НалогПоСтавке13", "СуммаДохода", 0, "Подразделение, КатегорияДохода", , "НалогСПревышенияПоСтавке13");
		ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13 = НовыйПараметрыЗаполненияРесурса("НалогСПревышенияПоСтавке13", "СуммаДохода", 0, "Подразделение, КатегорияДохода", , "НалогПоСтавке13");
		ПараметрыЗаполненияРесурсаСуммаВычетаПоПодразделению = НовыйПараметрыЗаполненияРесурса("РазмерВычета", "СуммаДохода", , , "КодВычета");
		ПараметрыЗаполненияРесурсаСуммаВычетаПоКатегории = НовыйПараметрыЗаполненияРесурса("РазмерВычета", "СуммаДохода", ,"Подразделение, КатегорияДохода", "КодВычета,МесяцПериодаПредоставленияВычета");
		
		// Однократный обход таблицы ДанныеУчетаДоходов организован двумя вложенными циклами; внутренний цикл выполняет расчет
		// налога за один налоговый период по одному физлицу. В качестве промежуточной структуры данных для результатов
		// расчета за месяц используем две таблицы: в одной оставляем только ресурсы НалогПоСтавке13, НалогСПревышенияПоСтавке13,
		// ЗачтеноАвансовыхПлатежейПоСтавке13, ЗачтеноАвансовыхПлатежейСПревышенияПоСтавке13, во второй таблице храним результат расчета вычетов (измерение КодВычета и ресурс РазмерВычета).
		ИндексТекущейСтрокиТаблицыДоходов = 0;
		Пока ИндексТекущейСтрокиТаблицыДоходов <= ДанныеУчетаДоходов.Количество() - 1 Цикл		
			
			// будет инициализирована только в том случае, если она понадобится
			ТаблицаРаспределенияМесяцаРасчета = Неопределено;	
			
			ТекущаяСтрокаТаблицыДоходов = ДанныеУчетаДоходов[ИндексТекущейСтрокиТаблицыДоходов];
			// получим физическое лицо, по которому выполняется расчет
			ТекущееФизическоеЛицо = ТекущаяСтрокаТаблицыДоходов.ФизическоеЛицо;
			
			// получим налоговый период, по которому далее будет выполняться расчет.
			ТекущийНалоговыйПериод = НачалоГода(ТекущаяСтрокаТаблицыДоходов.МесяцНалоговогоПериода);
			РазмерыВычетовНаГод = РазмерыВычетов[ТекущийНалоговыйПериод];
			
			// обнулим остатки вычетов
			ТекущиеОстаткиВычетов.Очистить();
			ОстаткиВычетов.ТаблицаВычетов.Очистить();	
			ВычетыПредыдущихМесяцев = Новый Соответствие;
			ОтложенныеПраваНаВычеты = Новый Соответствие;
			ВспомогательнаяТаблицаМесяца.Очистить();
			
			ДействующаяИнформацияОСтандартныхВычетах = Неопределено;
			ДействующаяИнформацияОСтатусе = Неопределено;
			                                                                         	
			// инициализируем переменные, хранящие итоги за год
			СтрокиНДФЛЗаГод = Новый Массив;
			ОблагаемыйДоходНаНачалоМесяца = 0;  
			ОблагаемыйДоходНаКонецМесяца = 0;
			
			ДоходЗаМесяцОстаток = 0;	
			НалогИсчисленный = 0;
			НалогСПревышенияИсчисленный = 0;
			ВычетСоциальныйОстаток = 0;
			ИсчисленоНДФЛЗаГод = 0;
			ОблагаемыйДоход = 0;
			ВсегоДоходовТекущегоРасчета = 0;
			
			Если ТекущаяСтрокаТаблицыДоходов.ЭтоПерваяСтрокаПоФизическомуЛицу Тогда // Начало обработки очередного физ.лица.
				
				СтруктураПоискаПоФизическомуЛицу.ФизическоеЛицо = ТекущееФизическоеЛицо;
				СтруктураПоискаТекущихДоходовНерезидентов.ФизическоеЛицо = ТекущееФизическоеЛицо;
				
				// Получим данные, необходимые для определения прав на вычеты.
				СтрокиТаблицыСтатусов = СтатусыФизическихЛиц.НайтиСтроки(СтруктураПоискаПоФизическомуЛицу);
				СтрокиТаблицыПримененияВычетов = ПрименениеСтандартныхВычетов.НайтиСтроки(СтруктураПоискаПоФизическомуЛицу);
				СтрокиТаблицыПравНаВычеты = ВычетыНаДетейИЛичные.НайтиСтроки(СтруктураПоискаПоФизическомуЛицу);
				
				// Если выполняется окончательный расчет, будем вписывать результат расчета сразу в таблицы результата.
				// В случае с промежуточным расчетом будем использовать промежуточную таблицу, а потом переносить в результирующую с
				// учетом ограничений.
				Если Не ОкончательныйРасчет Тогда
					РезультатРасчетаВспомогательный = РезультатРасчета.СкопироватьКолонки();
				КонецЕсли;
				
				РаспределениеДоходовФизлица = ДоходыПоПодразделениямИКатегориям.Скопировать(СтруктураПоискаПоФизическомуЛицу);
				РаспределениеДоходовФизлица.Индексы.Добавить(ПоляПоискаПоДатам);
				ДоходыТекущегоРасчета = РаспределениеДоходовФизлица.Скопировать(СтруктураПоискаТекущихДоходов);
				Если Не ОкончательныйРасчет Тогда
					ВсегоДоходовТекущегоРасчета = ДоходыТекущегоРасчета.Итог("СуммаДоходаТекущегоРасчета");
					ДоходыТекущегоРасчетаНерезидента = ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Скопировать(СтруктураПоискаТекущихДоходовНерезидентов);
				КонецЕсли;
				
			КонецЕсли;
				                                                                             				
			// Характеристики доходов "текущего" расчета за очередной налоговый период.
			ВсеДатыТекущегоРасчета = Новый Соответствие;
			ВсеКатегорииТекущегоРасчета = Новый Соответствие;
			ДатыТекущегоРасчетаПоМесяцам = Новый Соответствие;
			ТекущийГод = Год(ТекущийНалоговыйПериод);
			Для СчМесяцев = 1 По 12 Цикл
				ДатыТекущегоРасчетаПоМесяцам.Вставить(СчМесяцев,'00010101');
			КонецЦикла;
			Для каждого СтрокаТЗ Из ДоходыТекущегоРасчета Цикл
				Если Год(СтрокаТЗ.ДатаПолученияДохода) <> ТекущийГод Тогда
					Продолжить;
				КонецЕсли;
				ВсеДатыТекущегоРасчета.Вставить(СтрокаТЗ.ДатаПолученияДохода, Истина);
				ВсеКатегорииТекущегоРасчета.Вставить(СтрокаТЗ.КатегорияДохода, Истина);
				МесяцДаты = Месяц(СтрокаТЗ.ДатаПолученияДохода);
				ДатыТекущегоРасчетаПоМесяцам.Вставить(МесяцДаты, Макс(ДатыТекущегоРасчетаПоМесяцам[МесяцДаты], СтрокаТЗ.ДатаПолученияДохода));
			КонецЦикла;
			Если ОкончательныйРасчет Тогда
				ДатыРасчетаПоМесяцам = Новый Соответствие;
				ДатаНалоговогоПериода = '00010101';
				Для СчМесяцев = 1 По 12 Цикл
					ДатыРасчетаПоМесяцам.Вставить(СчМесяцев,'00010101');
				КонецЦикла;
				Для каждого СтрокаТЗ Из РаспределениеДоходовФизлица Цикл
					Если Год(СтрокаТЗ.ДатаПолученияДохода) <> ТекущийГод Тогда
						Продолжить;
					КонецЕсли;
					ДатаНалоговогоПериода = Макс(ДатаНалоговогоПериода, СтрокаТЗ.ДатаПолученияДохода); 
					МесяцДаты = Месяц(СтрокаТЗ.ДатаПолученияДохода);
					ДатыРасчетаПоМесяцам.Вставить(МесяцДаты, Макс(ДатыРасчетаПоМесяцам[МесяцДаты], СтрокаТЗ.ДатаПолученияДохода));
				КонецЦикла;
				
				ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам = ДатыТекущегоРасчетаПоМесяцам[Месяц(МесяцРасчета)];
				ОсновнаяДатаМесяцаРасчета = ?(Год(МесяцРасчета) = ТекущийГод, ДатыРасчетаПоМесяцам[Месяц(МесяцРасчета)], '00010101');
				
				ТаблицаРаспределенияМесяцаРасчетаПоТекущимДоходам = Новый Массив;
				ТаблицаРаспределенияКонцаМесяцаРасчета = Новый Массив;
				ТаблицаРаспределенияНалоговогоПериода = Новый Массив;
				Если ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам) Тогда
					СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам;
					ТаблицаРаспределенияМесяцаРасчетаПоТекущимДоходам = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
				КонецЕсли;
				Если ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчета) Тогда
					СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаМесяцаРасчета;
					ТаблицаРаспределенияКонцаМесяцаРасчета = РаспределениеДоходовФизлица.Скопировать(РаспределениеДоходовФизлица.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
				КонецЕсли;
				Если ЗначениеЗаполнено(ДатаНалоговогоПериода) Тогда
					СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ДатаНалоговогоПериода;
					ТаблицаРаспределенияНалоговогоПериода = РаспределениеДоходовФизлица.Скопировать(РаспределениеДоходовФизлица.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
				Иначе
					ДатаНалоговогоПериода = НачалоДня(КонецМесяца(МесяцРасчета))
				КонецЕсли;
			Иначе
				ОсновнаяДатаТекущегоРасчета = ДатаУдержанияИсчисленногоНалога;
				Если ВсеДатыТекущегоРасчета[ОсновнаяДатаТекущегоРасчета] = Неопределено Тогда
					Для СчМесяцев = 1 По 12 Цикл
						Если ЗначениеЗаполнено(ДатыТекущегоРасчетаПоМесяцам[13 - СчМесяцев]) Тогда
							ОсновнаяДатаТекущегоРасчета = ДатыТекущегоРасчетаПоМесяцам[13 - СчМесяцев];
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ДатыТекущегоРасчетаНерезидента = Новый Соответствие;
				Для каждого СтрокаТЗ Из ДоходыТекущегоРасчетаНерезидента Цикл
					Если Год(СтрокаТЗ.ДатаПолученияДохода) <> ТекущийГод Тогда
						Продолжить;
					КонецЕсли;
					ДатыТекущегоРасчетаНерезидента.Вставить(Месяц(СтрокаТЗ.ДатаПолученияДохода), СтрокаТЗ.ДатаПолученияДохода);
				КонецЦикла;
			КонецЕсли;
			
			ПродолжатьРасчет = Истина;
			Пока ПродолжатьРасчет Цикл
				
				ТекущаяСтрокаТаблицыДоходов = ДанныеУчетаДоходов[ИндексТекущейСтрокиТаблицыДоходов]; 
				
				Если ТекущаяСтрокаТаблицыДоходов.ЭтоПерваяСтрокаЗаМесяц Тогда
					
					МесяцНалоговогоПериода = ТекущаяСтрокаТаблицыДоходов.МесяцНалоговогоПериода;
					ПроводитьРасчетЗаОчереднойМесяц = ТекущаяСтрокаТаблицыДоходов.ВсеДоходыЗаМесяц <> 0 Или Не ЭтоРасчетПоДоходамТекущегоМесяца;
					
					// Получаем информацию о статусе налогоплательщика на начало месяца.
					Если ДействующаяИнформацияОСтатусе = Неопределено
						Или Не (МесяцНалоговогоПериода >= ДействующаяИнформацияОСтатусе.ДатаНачала И МесяцНалоговогоПериода <= ДействующаяИнформацияОСтатусе.ДатаОкончания) Тогда
						ДействующаяИнформацияОСтатусе = ИнформацияОСтатусеНалогоплательщика(МесяцНалоговогоПериода, СтрокиТаблицыСтатусов);
					КонецЕсли;	
					
					// Получаем информацию об имеющихся правах на стандартные вычеты.
					Если ДействующаяИнформацияОСтандартныхВычетах = Неопределено 
						Или Не (МесяцНалоговогоПериода >= ДействующаяИнформацияОСтандартныхВычетах.ДатаНачала И МесяцНалоговогоПериода <= ДействующаяИнформацияОСтандартныхВычетах.ДатаОкончания) Тогда
						ДействующаяИнформацияОСтандартныхВычетах = ИнформацияОСтандартныхВычетахДействующихНаДату(МесяцНалоговогоПериода, ПериодСрезаПравНаВычеты, СтрокиТаблицыПравНаВычеты, СтрокиТаблицыПримененияВычетов, ДействующаяИнформацияОСтатусе);	
					КонецЕсли;
					
					ВспомогательнаяТаблицаВычетовМесяца.Очистить();
					ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущаяСтрокаТаблицыДоходов);
					ЗаполнитьЗначенияСвойств(СтруктураПоискаСтандартныхВычетов, ТекущаяСтрокаТаблицыДоходов);
					ЗаполнитьЗначенияСвойств(СтруктураПоискаИмущественныхВычетов, ТекущаяСтрокаТаблицыДоходов);
					ЗаполнитьЗначенияСвойств(СтруктураПоискаИсчисленного, ТекущаяСтрокаТаблицыДоходов);
					СтруктураПоискаИсчисленного.МесяцНалоговогоПериодаДляПоиска = МесяцНалоговогоПериода;
					СтруктураПоискаСтандартныхВычетов.МесяцПериодаПредоставленияВычета = МесяцНалоговогоПериода;
								
					// Вписываем во вспомогательную таблицу месяца исчисленные ранее налоги.
					СтрокиНалога = ИсчисленныйРанееНалог.НайтиСтроки(СтруктураПоискаИсчисленного);
					ВписатьВРезультатЗарегистрированныеВУчетеДанные(ВспомогательнаяТаблицаМесяца, СтрокиНалога, "КатегорияДохода, НалогПоСтавке13, НалогСПревышенияПоСтавке13");	
					УдалитьУчтенныеСтрокиНерезидентов(СоответствиеНерезидентов, СтрокиНалога, ИсчисленныйРанееНалог);					
					
					// Получаем использованный в месяце социальный вычет.
					СтруктураПоискаСтандартныхВычетов.ЭтоСоциальныйВычет = Истина;
					СтрокиПравНаСоциальныеВычеты = ПредоставленныеСтандартныеИСоциальныеВычеты.НайтиСтроки(СтруктураПоискаСтандартныхВычетов);
					ВычетСоциальныйОстаток = ВычетСоциальныйОстаток + ?(СтрокиПравНаСоциальныеВычеты.Количество() > 0 И ДействующаяИнформацияОСтатусе.ПрименяетсяСтавкаПункта1Статьи224НК, СтрокиПравНаСоциальныеВычеты[0].Сумма, 0);
					
					// Создадим набор сумм вычетов, которые могут уменьшить облагаемый доход, начнем с имущественных вычетов.
					СтруктураПоискаИмущественныхВычетов.ВидДвижения = ВидДвиженияНакопления.Приход;
					СтрокиПравНаИмущественныеВычеты = ИмущественныеВычеты.НайтиСтроки(СтруктураПоискаИмущественныхВычетов);
					Для Каждого СтрокаПрав Из СтрокиПравНаИмущественныеВычеты Цикл
						ДобавитьОстатокВычетов(ОстаткиВычетов, СтрокаПрав.КодВычета, СтрокаПрав.Сумма);		
					КонецЦикла;					
					
					// Добавим стандартные вычеты очередного месяца.
					ОблагаемыйДоходНарастающимИтогом = ТекущаяСтрокаТаблицыДоходов.ОблагаемыйДоходНарастающимИтогом;
					ДоходСПредыдущегоМестаРаботы = 0;
					СтрокиДоходаСПредыдущегоМестаРаботы = ДоходыСПредыдущегоМестаРаботы.НайтиСтроки(СтруктураПоиска);
					Если СтрокиДоходаСПредыдущегоМестаРаботы.Количество() > 0 Тогда
						ДоходСПредыдущегоМестаРаботы = СтрокиДоходаСПредыдущегоМестаРаботы[0].Размер;
					КонецЕсли;	
					ОблагаемыйДоходДляВычетов = ОблагаемыйДоходНарастающимИтогом + ДоходСПредыдущегоМестаРаботы;	
					Для Каждого ТекущийВычет Из ДействующаяИнформацияОСтандартныхВычетах.Вычеты Цикл
						ОписаниеРазмераВычета = РазмерыВычетовНаГод[ТекущийВычет.Ключ];
						Если ОписаниеРазмераВычета = Неопределено Тогда
							Продолжить;
						КонецЕсли;	
						Если ОписаниеРазмераВычета.ОграничениеПоДоходам <> 0 И ОблагаемыйДоходДляВычетов > ОписаниеРазмераВычета.ОграничениеПоДоходам Тогда
							Продолжить;
						КонецЕсли;	
						ДобавитьОстатокВычетов(ОстаткиВычетов, ТекущийВычет.Ключ, ТекущийВычет.Значение * ОписаниеРазмераВычета.Размер, ПрименятьСтандартныеВычетыНарастающимИтогом);	
					КонецЦикла;		
					
					СтруктураПоискаСтандартныхВычетов.ЭтоСоциальныйВычет = Ложь;
					СтрокиСтандартныхВычетов = ПредоставленныеСтандартныеИСоциальныеВычеты.НайтиСтроки(СтруктураПоискаСтандартныхВычетов);
						
					// Перенесем ранее предоставленные при исчислении налога для будущих дат получения дохода вычеты 
					// текущего месяца на тот месяц, когда их предоставили на самом деле.
					// Манипуляции производим с правами на стандартные вычеты и со строками зарегистрированных вычетов.
					Для каждого Элемент Из ОтложенныеПраваНаВычеты Цикл
						ТекущийВычет = Элемент.Ключ;
						Если ТекущийВычет.МесяцНалоговогоПериода = МесяцНалоговогоПериода Тогда
							ДобавитьОстатокВычетов(ОстаткиВычетов, ТекущийВычет.КодВычета, Элемент.Значение, Истина);
							ОтложенныеПраваНаВычеты.Удалить(ТекущийВычет);
						КонецЕсли;
					КонецЦикла;
					Для каждого СтрокаТЗ Из СтрокиСтандартныхВычетов Цикл
						Если СтрокаТЗ.МесяцНалоговогоПериода <= МесяцНалоговогоПериода Тогда
							Продолжить;	
						КонецЕсли;
						Если СтрокаТЗ.Сумма > 0 Тогда
							ОстатокВычета = ТекущиеОстаткиВычетов[СтрокаТЗ.КодВычета];
							Если ОстатокВычета <> Неопределено  Тогда
								ВычетКЗачету = Мин(СтрокаТЗ.Сумма, ОстатокВычета);
								ТекущиеОстаткиВычетов.Вставить(СтрокаТЗ.КодВычета, ОстатокВычета - ВычетКЗачету);
								СтрокаТЗ.МесяцПериодаПредоставленияВычета = СтрокаТЗ.МесяцНалоговогоПериода;
								ОтложенныеПраваНаВычеты.Вставить(СтрокаТЗ, ВычетКЗачету);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					// Если вычеты перенесли, надо обновить зарегистрированные вычеты текущего месяца.
					Если ОтложенныеПраваНаВычеты.Количество() > 0 Тогда
						СтрокиСтандартныхВычетов = ПредоставленныеСтандартныеИСоциальныеВычеты.НайтиСтроки(СтруктураПоискаСтандартныхВычетов);
					КонецЕсли;
					
					// Определим доход, который могут уменьшать вычеты.
					ЗапоминатьВычетыНаБудущее = Ложь;
					ОблагаемыйДоходЗаМесяц = ТекущаяСтрокаТаблицыДоходов.ОблагаемыйДоходЗаМесяц;
					Если ПрименятьСтандартныеВычетыНарастающимИтогом Тогда
						Если ПереноситьДоходДляПримененияВычетовВМесяцРасчета И МесяцНалоговогоПериода = НачалоМесяца(МесяцРасчета) Тогда
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток + ОблагаемыйДоходЗаМесяц + ВсегоДоходовТекущегоРасчета;
							ЗапоминатьВычетыНаБудущее = Истина;
						ИначеЕсли ПереноситьДоходДляПримененияВычетовВМесяцРасчета И МесяцНалоговогоПериода = НачалоМесяца(ДатаУдержанияИсчисленногоНалога) Тогда
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток + ОблагаемыйДоходЗаМесяц - ВсегоДоходовТекущегоРасчета;
						Иначе
							ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток + ОблагаемыйДоходЗаМесяц;
						КонецЕсли;
					Иначе
						ДоходЗаМесяцОстаток = ОблагаемыйДоходЗаМесяц;		
					КонецЕсли;	                                                     
					// Имущественные вычеты не могут уменьшать доходы месяцев, предшествующих месяцу начала применения.
					ДоходЗаМесяцДляИмущественныхВычетов = ОблагаемыйДоходЗаМесяц; 
					
					// Рассчитываем примененные за месяц вычеты.
					ВсегоВычетовЗаМесяц = 0;
					ЕстьВычетыЗаМесяц = Ложь;
					ВычетыЗаМесяц.Очистить();	
					Если ДоходЗаМесяцОстаток > 0 И МесяцНалоговогоПериода <= ТекущаяСтрокаТаблицыДоходов.СтаршийМесяцПолученияДохода Тогда
						
						ВычетСоциальныйЗаМесяц = Мин(ДоходЗаМесяцОстаток, ВычетСоциальныйОстаток);
						ВычетСоциальныйОстаток = ВычетСоциальныйОстаток - ВычетСоциальныйЗаМесяц;
						ВсегоВычетовЗаМесяц = ВсегоВычетовЗаМесяц + ВычетСоциальныйЗаМесяц;
						ЕстьВычетыЗаМесяц = ВычетСоциальныйЗаМесяц <> 0;
						
						ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетСоциальныйЗаМесяц;
						ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетСоциальныйЗаМесяц;
						// Для расчета имущественных вычетов учтем ранее не учтенные из-за отсутствия дохода в предшествующих месяцах
						// налогового периода вычеты.
						Для каждого Элемент Из ВычетыПредыдущихМесяцев Цикл
							Если Элемент.Ключ < МесяцНалоговогоПериода Тогда
								ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - Мин(ДоходЗаМесяцДляИмущественныхВычетов, Элемент.Значение);
								Если ДоходЗаМесяцДляИмущественныхВычетов = 0 Тогда
									Прервать;
								КонецЕсли;	
							КонецЕсли;
						КонецЦикла;
						
						Если ДоходЗаМесяцОстаток > 0 Тогда
							// Заполняем таблицу значений ВычетыЗаМесяц (с колонками КодВычета, Сумма) суммами вычетов, которые будут
							// применены в текущем месяце. Строки в таблицу помещаем в соответствии с наиболее выгодным для сотрудника
							// приоритетом применения вычетов (описанным непосредственно в справочнике вычетов), для чего. отсортируем
							// таблицу ТаблицаВычетов по полю ПорядокСписания. Применяемые суммы вычетов переписываем из таблицы Остатки,
							// содержащей права на вычеты, в пределах доходов, которые могут быть уменьшены на стандартные, имущественные
							// вычеты. Если положенных физ.лицу вычетов оказывается больше, чем начисленного дохода, в таблице Остатки
							// оказываются суммы неиспользованных в этом месяце вычетов для предоставления их в будущем.
							ОстаткиВычетов.ТаблицаВычетов.Сортировать("ПорядокСписания");
							Для Каждого ВычетКСписанию Из ОстаткиВычетов.ТаблицаВычетов Цикл
								
								Если ДоходЗаМесяцОстаток = 0 И ДоходЗаМесяцДляИмущественныхВычетов = 0 Тогда
									Прервать;
								КонецЕсли;
								Если ВычетКСписанию.ИмущественныйВычет И Не ПроводитьРасчетЗаОчереднойМесяц Тогда 
									Прервать;
								КонецЕсли;
								
								ВычетЗаМесяц = 0;
								ОстатокВычета = ТекущиеОстаткиВычетов[ВычетКСписанию.КодВычета];
								Если ВычетКСписанию.ИмущественныйВычет Тогда 
									Если ДоходЗаМесяцДляИмущественныхВычетов > 0 Тогда
										ВычетЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ОстатокВычета);	
										ТекущиеОстаткиВычетов.Вставить(ВычетКСписанию.КодВычета, ОстатокВычета - ВычетЗаМесяц);
									КонецЕсли;	
								Иначе	
									ВычетЗаМесяц = Мин(ДоходЗаМесяцОстаток, ОстатокВычета);
									ТекущиеОстаткиВычетов.Вставить(ВычетКСписанию.КодВычета, ОстатокВычета - ВычетЗаМесяц);
								КонецЕсли;	
								Если ВычетЗаМесяц <> 0 Тогда
									СтрокаТаблицыРезультата = ВычетыЗаМесяц.Добавить();	
									СтрокаТаблицыРезультата.КодВычета = ВычетКСписанию.КодВычета;
									СтрокаТаблицыРезультата.РазмерВычета = ВычетЗаМесяц;
									
									ЕстьВычетыЗаМесяц = Истина;
									ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетЗаМесяц;
									ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетЗаМесяц);
								КонецЕсли;
								
							КонецЦикла;	
						КонецЕсли;
						
						ВсегоВычетовЗаМесяц = ВсегоВычетовЗаМесяц + ВычетыЗаМесяц.Итог("РазмерВычета");
					КонецЕсли;
					
					// Перенесем некоторые суммы вычетов из других месяцев.
					Если ПроводитьРасчетЗаОчереднойМесяц Тогда 
						// Учтем ранее не учтенные вычеты из-за отсутствия дохода в предшествующих месяцах налогового периода.
						Для каждого Элемент Из ВычетыПредыдущихМесяцев Цикл
							Если Элемент.Ключ < МесяцНалоговогоПериода Тогда
								ВсегоВычетовЗаМесяц = ВсегоВычетовЗаМесяц + Элемент.Значение;
								ВычетыПредыдущихМесяцев.Вставить(Элемент.Ключ, 0);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;	
					Если ЗапоминатьВычетыНаБудущее Или ЕстьВычетыЗаМесяц И Не ПроводитьРасчетЗаОчереднойМесяц Тогда // Запомним вычеты на будущее.
						ВычетыПредыдущихМесяцев.Вставить(МесяцНалоговогоПериода, ?(ЗначениеЗаполнено(ВычетыПредыдущихМесяцев[МесяцНалоговогоПериода]), ВычетыПредыдущихМесяцев[МесяцНалоговогоПериода], 0) + Макс(ВсегоВычетовЗаМесяц - ОблагаемыйДоходЗаМесяц, 0));
						ВсегоВычетовЗаМесяц = ВсегоВычетовЗаМесяц - Макс(ВсегоВычетовЗаМесяц - ОблагаемыйДоходЗаМесяц, 0);
					КонецЕсли;	
					
					ТаблицаРаспределенияВычетов = РаспределениеДоходовФизлица.СкопироватьКолонки();

					НачисленныйДоходЗаДату = 0;
					ИспользованоВычетовЗаМесяц = 0;

					// Начнем расчет с вычитания уже зарегистрированных в учете вычетов, затем по мере расчета вычеты будут
					// "применяться" к конкретным доходам.
					
					// Строки примененных ранее стандартных вычетов отобрали ранее
					ВписатьПредоставленныеРанееВычетыВДанныеУчета(ВспомогательнаяТаблицаВычетовМесяца, СтрокиСтандартныхВычетов);
					УдалитьУчтенныеСтрокиНерезидентов(СоответствиеНерезидентов, СтрокиСтандартныхВычетов, ПредоставленныеСтандартныеИСоциальныеВычеты);					
					// Строки примененных ранее имущественных вычетов отберем сейчас.
					СтруктураПоискаИмущественныхВычетов.ВидДвижения = ВидДвиженияНакопления.Расход;
					СтрокиВычетов = ИмущественныеВычеты.НайтиСтроки(СтруктураПоискаИмущественныхВычетов);
					ВписатьПредоставленныеРанееВычетыВДанныеУчета(ВспомогательнаяТаблицаВычетовМесяца, СтрокиВычетов);
					УдалитьУчтенныеСтрокиНерезидентов(СоответствиеНерезидентов, СтрокиВычетов, ИмущественныеВычеты);					
					
				КонецЕсли;	
				
				Если ПроводитьРасчетЗаОчереднойМесяц Тогда
					
					Если ТекущаяСтрокаТаблицыДоходов.ЭтоПерваяСтрокаЗаДату Тогда
						
						ОблагаемыйДоходНаНачалоМесяца = ОблагаемыйДоход;
						ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета = 0;
						ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета = 0;
						ЕстьДоходыПромежуточногоРасчета = Ложь;
						ЕстьДоходыОкончательногоРасчета = Ложь;
						
						СтруктураПоискаПоДатам.ДатаПолученияДохода = ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода;
						СтруктураПоискаПоДатам.ДоходМежрасчетногоПериода = Истина;
						ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода = РаспределениеДоходовФизлица.Скопировать(РаспределениеДоходовФизлица.НайтиСтроки(СтруктураПоискаПоДатам)); 
						СтруктураПоискаПоДатам.ДоходМежрасчетногоПериода = Ложь;
						ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета = РаспределениеДоходовФизлица.Скопировать(РаспределениеДоходовФизлица.НайтиСтроки(СтруктураПоискаПоДатам)); 
						
						ТаблицаРаспределенияНаДату = ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода.Скопировать();
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета, ТаблицаРаспределенияНаДату);
						Если ТаблицаРаспределенияНаДату.Итог("СуммаДохода") = 0 Тогда
							// если доходов за прошлый месяц нет - будем использовать текущее распределение
							Если ТаблицаРаспределенияМесяцаРасчета = Неопределено Тогда
								ТекущийГод = Год(МесяцРасчета);
								СтруктураПоискаРаспределения = Новый Структура("МесяцНалоговогоПериода");
								БазаРаспределения = 0;
								МесяцПоиска = НачалоМесяца(МесяцРасчета);                                             
								Пока БазаРаспределения = 0 И Год(МесяцПоиска) = ТекущийГод Цикл
									СтруктураПоискаРаспределения.МесяцНалоговогоПериода = МесяцПоиска;
									ТаблицаРаспределенияМесяцаРасчета = РаспределениеДоходовФизлица.Скопировать(РаспределениеДоходовФизлица.НайтиСтроки(СтруктураПоискаРаспределения));
									БазаРаспределения = ТаблицаРаспределенияМесяцаРасчета.Итог("СуммаДохода");
									МесяцПоиска = ДобавитьМесяц(МесяцПоиска, -1);
								КонецЦикла;
							КонецЕсли;
							ТаблицаРаспределенияНаДату = ТаблицаРаспределенияМесяцаРасчета;
						КонецЕсли;
						ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаРаспределенияНаДату, ТаблицаРаспределенияВычетов);
						
					КонецЕсли;	
					
					НачисленныйДоходЗаДату = ТекущаяСтрокаТаблицыДоходов.ОблагаемыйДоход;
					Если ТекущаяСтрокаТаблицыДоходов.ДоходМежрасчетногоПериода Тогда 
						ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета = Мин(ОблагаемыйДоходНарастающимИтогом, Макс(0, ОблагаемыйДоходНаНачалоМесяца + ТекущаяСтрокаТаблицыДоходов.ОблагаемыйДоход - ВсегоВычетовЗаМесяц));
						ЕстьДоходыПромежуточногоРасчета = Истина;
					Иначе
						ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета = Мин(ОблагаемыйДоходНарастающимИтогом, Макс(0, ОблагаемыйДоходНаНачалоМесяца + ТекущаяСтрокаТаблицыДоходов.ОблагаемыйДоход - ВсегоВычетовЗаМесяц));
						ЕстьДоходыОкончательногоРасчета = Истина;
					КонецЕсли;

					Если ТекущаяСтрокаТаблицыДоходов.ЭтоПоследняяСтрокаЗаДату Тогда
						
						// Расчет сумм налога
						Если Не ТекущаяСтрокаТаблицыДоходов.ЭтоПоследняяСтрокаЗаМесяц Тогда					
							Если ЕстьДоходыПромежуточногоРасчета Тогда
								ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета);
								НалогСДохода = Макс(Окр(Мин(ОблагаемыйДоходДляИсчисленияНалога, ПределПрогрессивнойШкалы) * СтавкаДляРезидента) - НалогИсчисленный, 0);
								НалогИсчисленный = НалогИсчисленный + НалогСДохода;
								НалогСПревышения = Макс(Окр(Макс(ОблагаемыйДоходДляИсчисленияНалога - ПределПрогрессивнойШкалы, 0) * СтавкаСПревышения) - НалогСПревышенияИсчисленный, 0);
								НалогСПревышенияИсчисленный = НалогСПревышенияИсчисленный + НалогСПревышения;
								
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСДохода, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода);
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСПревышения, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода);
							КонецЕсли;
							Если ЕстьДоходыОкончательногоРасчета Тогда
								ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета);
								НалогСДохода = Окр(Мин(ОблагаемыйДоходДляИсчисленияНалога, ПределПрогрессивнойШкалы) * СтавкаДляРезидента) - НалогИсчисленный;
								НалогИсчисленный = НалогИсчисленный + НалогСДохода;
								НалогСПревышения = Окр(Макс(ОблагаемыйДоходДляИсчисленияНалога - ПределПрогрессивнойШкалы, 0) * СтавкаСПревышения) - НалогСПревышенияИсчисленный;
								НалогСПревышенияИсчисленный = НалогСПревышенияИсчисленный + НалогСПревышения;
								
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСДохода, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета);
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСПревышения, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета);
							КонецЕсли;
						Иначе
							Если ЕстьДоходыПромежуточногоРасчета И ЕстьДоходыОкончательногоРасчета Тогда
								
								ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета);
								НалогСДохода = Макс(Окр(Мин(ОблагаемыйДоходДляИсчисленияНалога, ПределПрогрессивнойШкалы) * СтавкаДляРезидента) - НалогИсчисленный, 0);
								НалогИсчисленный = НалогИсчисленный + НалогСДохода;
								НалогСПревышения = Макс(Окр(Макс(ОблагаемыйДоходДляИсчисленияНалога - ПределПрогрессивнойШкалы, 0) * СтавкаСПревышения) - НалогСПревышенияИсчисленный, 0);
								НалогСПревышенияИсчисленный = НалогСПревышенияИсчисленный + НалогСПревышения;
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСДохода, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода);
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСПревышения, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода);
								
								ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета);
								НалогСДохода = Окр(Мин(ОблагаемыйДоходДляИсчисленияНалога, ПределПрогрессивнойШкалы) * СтавкаДляРезидента) - НалогИсчисленный;
								НалогИсчисленный = НалогИсчисленный + НалогСДохода;
								НалогСПревышения = Окр(Макс(ОблагаемыйДоходДляИсчисленияНалога - ПределПрогрессивнойШкалы, 0) * СтавкаСПревышения) - НалогСПревышенияИсчисленный;
								НалогСПревышенияИсчисленный = НалогСПревышенияИсчисленный + НалогСПревышения;
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСДохода, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета);
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСПревышения, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета);
								
								ОблагаемыйДоход = ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;
								
							Иначе
								
								ОблагаемыйДоходДляИсчисленияНалога = Макс(0, ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета + ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета);
								НалогСДохода = Окр(Мин(ОблагаемыйДоходДляИсчисленияНалога, ПределПрогрессивнойШкалы) * СтавкаДляРезидента) - НалогИсчисленный;
								НалогИсчисленный = НалогИсчисленный + НалогСДохода;
								НалогСПревышения = Окр(Макс(ОблагаемыйДоходДляИсчисленияНалога - ПределПрогрессивнойШкалы, 0) * СтавкаСПревышения) - НалогСПревышенияИсчисленный;
								НалогСПревышенияИсчисленный = НалогСПревышенияИсчисленный + НалогСПревышения;
								
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСДохода, ТекущаяСтрокаТаблицыДоходов, ?(ТекущаяСтрокаТаблицыДоходов.ДоходМежрасчетногоПериода, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета));
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода, НалогСПревышения, ТекущаяСтрокаТаблицыДоходов, ?(ТекущаяСтрокаТаблицыДоходов.ДоходМежрасчетногоПериода, ТаблицаРаспределенияНаДатуПоДоходамМежрасчетногоПериода, ТаблицаРаспределенияНаДатуПоДоходамОкончательногоРасчета));
								
								ОблагаемыйДоход = ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета + ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;	
							КонецЕсли;
						КонецЕсли;
						Если ВсеДатыТекущегоРасчета[ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода] = Неопределено Тогда
							СтрокиКУдалению.Очистить();
							РассчитаноНалогаЗаДату = 0;
							РассчитаноНалогаСПревышенияЗаДату = 0;
							Для каждого СтрокаНалога Из ВспомогательнаяТаблицаМесяца Цикл
								Если СтрокаНалога.МесяцНалоговогоПериода = ТекущаяСтрокаТаблицыДоходов.ДатаПолученияДохода Тогда
									РассчитаноНалогаЗаДату = РассчитаноНалогаЗаДату + СтрокаНалога.НалогПоСтавке13;
									РассчитаноНалогаСПревышенияЗаДату = РассчитаноНалогаСПревышенияЗаДату + СтрокаНалога.НалогСПревышенияПоСтавке13;
									СтрокиКУдалению.Вставить(СтрокаНалога);
								КонецЕсли;
							КонецЦикла;
							Если РассчитаноНалогаЗаДату * РассчитаноНалогаЗаДату + РассчитаноНалогаСПревышенияЗаДату * РассчитаноНалогаСПревышенияЗаДату = 0 Тогда
								Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
									ВспомогательнаяТаблицаМесяца.Удалить(УдаляемаяСтрока.Ключ);		
								КонецЦикла;	
							КонецЕсли;
						КонецЕсли;
						
						Если ЕстьДоходыПромежуточногоРасчета И ЕстьДоходыОкончательногоРасчета Тогда
							ОблагаемыйДоходЗаДату = ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;
						Иначе
							ОблагаемыйДоходЗаДату = ОблагаемыйДоходНаКонецМесяцаПромежуточногоРасчета + ОблагаемыйДоходНаКонецМесяцаОкончательногоРасчета;
						КонецЕсли;
						ВсегоВычетовЗаДату = НачисленныйДоходЗаДату - (ОблагаемыйДоходЗаДату - ОблагаемыйДоходНаНачалоМесяца) - ИспользованоВычетовЗаМесяц;
						ИспользованоВычетовЗаМесяц = ИспользованоВычетовЗаМесяц + ВсегоВычетовЗаДату;
						
						Если ВсегоВычетовЗаДату <> 0 Тогда
								
							// Таблица ВычетыЗаМесяц содержит строки с располагаемыми суммами вычетов, упорядоченные в соответствии с
							// наиболее выгодным для сотрудника приоритетом применения вычетов. Переписываем вычеты из таблицы ВычетыЗаМесяц
							// в таблицу ВспомогательнаяТаблицаВычетовМесяца (распределяя суммы по подразделениям из доходов этой даты
							// получения дохода) в пределах рассчитанного ранее примененного за дату вычета (если сумма вычета и остаток
							// вычета на дату одного знака, берем минимальное по модулю). Если располагаемая сумма вычета полностью исчерпана
							// (стала равна 0), удаляем строку из таблицы ВычетыЗаМесяц.
							ИндексПоследнейСтрокиТаблицыВычетов = ВычетыЗаМесяц.Количество() - 1;
							Индекс = 0;
							Пока Индекс <= ИндексПоследнейСтрокиТаблицыВычетов Цикл		
								ТекущийВычет = ВычетыЗаМесяц[Индекс];
								ЗначениеВычетаЗаМесяц = ТекущийВычет.РазмерВычета;
								Если ВсегоВычетовЗаДату * ЗначениеВычетаЗаМесяц > 0 Тогда		
									Учтено = ?(ВсегоВычетовЗаДату > 0, Мин(ЗначениеВычетаЗаМесяц, ВсегоВычетовЗаДату), Макс(ЗначениеВычетаЗаМесяц, ВсегоВычетовЗаДату));
									ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаВычетовМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоПодразделению, '00010101', Учтено, ТекущаяСтрокаТаблицыДоходов, ТаблицаРаспределенияНаДату, ТекущийВычет);
									ВсегоВычетовЗаДату = ВсегоВычетовЗаДату - Учтено;
									ТекущийВычет.РазмерВычета = ЗначениеВычетаЗаМесяц - Учтено;
									Если ТекущийВычет.РазмерВычета = 0 Тогда
										ВычетыЗаМесяц.Удалить(Индекс);
										ИндексПоследнейСтрокиТаблицыВычетов = ИндексПоследнейСтрокиТаблицыВычетов - 1;
										Индекс = Индекс - 1;
									КонецЕсли;
									Если ВсегоВычетовЗаДату = 0 Тогда
										Прервать;
									КонецЕсли;
								КонецЕсли;	
								Индекс = Индекс + 1;
							КонецЦикла;
							
							// Проверим не были ли ранее зарегистрированы в учете предоставленные сейчас вычеты;
							// если были, то при нулевом итоге таблицу очистим, а со следующей даты начнем накапливать вычеты "с чистого листа".
							Если ВспомогательнаяТаблицаВычетовМесяца.Итог("РазмерВычета") = 0 Тогда
								ИтогиПоВычетам = Новый Соответствие;
								Для каждого СтрокаТЗ Из ВспомогательнаяТаблицаВычетовМесяца Цикл
									Значение = ИтогиПоВычетам[СтрокаТЗ.КодВычета];
									ИтогиПоВычетам.Вставить(СтрокаТЗ.КодВычета, ?(Значение = Неопределено, 0, Значение) + СтрокаТЗ.РазмерВычета)
								КонецЦикла;
								Если ИтогиПоВычетам.Количество() = 1 Тогда
									ВспомогательнаяТаблицаВычетовМесяца.Очистить();
								Иначе
									СтрокиКУдалению.Очистить();
									Для каждого СтрокаТЗ Из ВспомогательнаяТаблицаВычетовМесяца Цикл
										Если Не ЗначениеЗаполнено(ИтогиПоВычетам[СтрокаТЗ.КодВычета]) Тогда
											СтрокиКУдалению.Вставить(СтрокаТЗ, Истина)
										КонецЕсли;	
									КонецЦикла;
									Для каждого Элемент Из СтрокиКУдалению Цикл
										ВспомогательнаяТаблицаВычетовМесяца.Удалить(Элемент.Ключ)
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЕсли;	
				
				Если ТекущаяСтрокаТаблицыДоходов.ЭтоПоследняяСтрокаЗаМесяц Тогда				
					
					// Окончательный сбор вычетов в собственной таблице значений.
					
					Для каждого СтрокаТЗ Из ВспомогательнаяТаблицаВычетовМесяца Цикл
						Если Не ОписаниеВычетов[СтрокаТЗ.КодВычета].ИмущественныйВычет Тогда
							СтрокаТЗ.МесяцПериодаПредоставленияВычета = МесяцНалоговогоПериода
						КонецЕсли;
					КонецЦикла; 
					
					// Определяем дату получения дохода, к строке которой будут приписаны вычеты этого месяца.
					Если ОкончательныйРасчет Тогда
						Если ПроводитьРасчетЗаОчереднойМесяц Тогда
							ДатаУчетаВычетов = КонецМесяца(МесяцНалоговогоПериода)
						Иначе
							ОсновнаяДатаПолученияДохода = ДатыТекущегоРасчетаПоМесяцам[Месяц(МесяцНалоговогоПериода)];
							Если ЗначениеЗаполнено(ОсновнаяДатаПолученияДохода) Тогда
								ДатаУчетаВычетов = ОсновнаяДатаПолученияДохода;
							ИначеЕсли ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам) Тогда
								ДатаУчетаВычетов = ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам;
							ИначеЕсли ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчета) Тогда
								ДатаУчетаВычетов = ОсновнаяДатаМесяцаРасчета;
							Иначе
								ДатаУчетаВычетов = ДатаНалоговогоПериода;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ДатаУчетаВычетов = ОсновнаяДатаТекущегоРасчета;
					КонецЕсли;
					
					Если ЕстьВычетыЗаМесяц Тогда // Перераспределим итоговые суммы предоставленных вычетов по категориям, сохраняя подразделения.
						
						// Доходов в месяце может не быть, но вычеты приходится предоставлять, распределим их по доходам текущего расчета.
						Если Не ЗначениеЗаполнено(ТаблицаРаспределенияВычетов) Тогда
							Если ОкончательныйРасчет Тогда
								Если ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам) Тогда
									ТаблицаРаспределенияВычетов = ТаблицаРаспределенияМесяцаРасчетаПоТекущимДоходам;
								ИначеЕсли ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчета) Тогда
									ТаблицаРаспределенияВычетов = ТаблицаРаспределенияКонцаМесяцаРасчета;
								Иначе
									ТаблицаРаспределенияВычетов = ТаблицаРаспределенияНалоговогоПериода;
								КонецЕсли;
							Иначе
								СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаТекущегоРасчета;
								ТаблицаРаспределенияВычетов = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(ВычетыЗаМесяц) Тогда
							БылоСтрокВычетов = ВспомогательнаяТаблицаВычетовМесяца.Количество();
							Для Каждого ТекущийВычет Из ВычетыЗаМесяц Цикл
								ВписатьРесурсВРезультатыРасчетов(ВспомогательнаяТаблицаВычетовМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоПодразделению, '00010101', ТекущийВычет.РазмерВычета, СтруктураПоиска, ТаблицаРаспределенияВычетов, ТекущийВычет);
							КонецЦикла;	
							Для Сч = БылоСтрокВычетов + 1 По ВспомогательнаяТаблицаВычетовМесяца.Количество() Цикл
								ВспомогательнаяТаблицаВычетовМесяца[Сч - 1].МесяцПериодаПредоставленияВычета = МесяцНалоговогоПериода
							КонецЦикла;
						КонецЕсли;
						
						ВычетыМесяца = ВспомогательнаяТаблицаВычетовМесяца.СкопироватьКолонки();
						
						ВспомогательнаяТаблицаВычетовМесяца.ЗаполнитьЗначения(ДатаУчетаВычетов, "МесяцНалоговогоПериода");
						ВспомогательнаяТаблицаВычетовМесяца.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, Подразделение, КатегорияДохода, КодВычета", "РазмерВычета");
						Если ВспомогательнаяТаблицаВычетовМесяца.Количество() > 0 Тогда
							ВспомогательнаяТаблицаВычетовМесяцаФизическогоЛица = ВспомогательнаяТаблицаВычетовМесяца.Скопировать( ,"Подразделение");
							ВспомогательнаяТаблицаВычетовМесяцаФизическогоЛица.Свернуть("Подразделение");
							Если ВспомогательнаяТаблицаВычетовМесяцаФизическогоЛица.Количество() = 1 Тогда
								Для каждого СтрокаТЗ Из ВспомогательнаяТаблицаВычетовМесяца Цикл
									Если СтрокаТЗ.РазмерВычета <> 0 Тогда
										ВписатьРесурсВРезультатыРасчетов(ВычетыМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоКатегории, ДатаУчетаВычетов, СтрокаТЗ.РазмерВычета, СтруктураПоиска, ТаблицаРаспределенияВычетов, СтрокаТЗ);
									КонецЕсли;
								КонецЦикла;
							Иначе 	
								ТаблицаДляРаспределенияПоПодразделению = ТаблицаРаспределенияВычетов.СкопироватьКолонки();
								СтрокиРаспределенияПоПодразделениям = Новый Соответствие;
								Для Каждого СтрокаТаблицыРаспределения Из ТаблицаРаспределенияВычетов Цикл
									СтрокиРаспределения = СтрокиРаспределенияПоПодразделениям[СтрокаТаблицыРаспределения.Подразделение];
									Если СтрокиРаспределения = Неопределено Тогда
										СтрокиРаспределения = Новый Массив;
										СтрокиРаспределенияПоПодразделениям.Вставить(СтрокаТаблицыРаспределения.Подразделение, СтрокиРаспределения);
									КонецЕсли;	
									СтрокиРаспределения.Добавить(СтрокаТаблицыРаспределения);
								КонецЦикла;	
								Для Каждого СтрокаТЗ Из ВспомогательнаяТаблицаВычетовМесяца Цикл
									СтрокиРаспределения = СтрокиРаспределенияПоПодразделениям[СтрокаТЗ.Подразделение];
									Если СтрокиРаспределения = Неопределено Тогда
										ТаблицаРаспределения = ТаблицаРаспределенияВычетов.СкопироватьКолонки();
									Иначе
										ТаблицаРаспределения = ТаблицаРаспределенияВычетов.Скопировать(СтрокиРаспределения);
									КонецЕсли;	
									ВписатьРесурсВРезультатыРасчетов(ВычетыМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоКатегории, ДатаУчетаВычетов, СтрокаТЗ.РазмерВычета, СтруктураПоиска, ТаблицаРаспределения, СтрокаТЗ);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
						
					Иначе // У сторно-строк вычетов оставим имевшиеся ранее подразделения и категории.
						ВычетыМесяца = ВспомогательнаяТаблицаВычетовМесяца.Скопировать();
						Если ВспомогательнаяТаблицаВычетовМесяца.Количество() > 0 Тогда 
							ВычетыМесяца.ЗаполнитьЗначения(ДатаУчетаВычетов, "МесяцНалоговогоПериода");
						КонецЕсли;
					КонецЕсли;
					
					ВычетыМесяца.Свернуть("ФизическоеЛицо, МесяцНалоговогоПериода, МесяцПериодаПредоставленияВычета, Подразделение, КатегорияДохода, КодВычета", "РазмерВычета");
					
					// Если у физ.лица также есть доходы, облагаемые не нарастающим итогом, - добавим и их тоже.
					ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельноПоФизическомуЛицу = ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.НайтиСтроки(СтруктураПоиска);
					ДописыватьОсновнуюДатуПолученияДохода = Не ЗначениеЗаполнено(ДатыТекущегоРасчетаПоМесяцам[Месяц(МесяцНалоговогоПериода)]);
					Для Каждого СтрокаТЗ Из ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельноПоФизическомуЛицу Цикл
						НалогСДохода = Окр(СтрокаТЗ.ДоходыБезВычетов * СтрокаТЗ.СтавкаЧислом);
						СтрокаНалога = ВспомогательнаяТаблицаМесяца.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНалога, СтрокаТЗ, "ФизическоеЛицо, Подразделение, КатегорияДохода");
						СтрокаНалога.НалогПоСтавке13 = НалогСДохода;
						СтрокаНалога.МесяцНалоговогоПериода = СтрокаТЗ.ДатаПолученияДохода;
						Если ДописыватьОсновнуюДатуПолученияДохода И СтрокаТЗ.ДоходТекущегоРасчета Тогда
							МесяцДаты = Месяц(СтрокаТЗ.ДатаПолученияДохода);
							ДатыТекущегоРасчетаПоМесяцам.Вставить(МесяцДаты, Макс(ДатыТекущегоРасчетаПоМесяцам[МесяцДаты], СтрокаТЗ.ДатаПолученияДохода));
						КонецЕсли;
						ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Удалить(СтрокаТЗ);
					КонецЦикла;	
					
					// В "межрасчетном" варианте оставляем только те результаты, которые соответствуют месяцу (-ам) получения дохода
					// текущего акта расчета.
					Если Не ОкончательныйРасчет И Не ЗначениеЗаполнено(ДатыТекущегоРасчетаПоМесяцам[Месяц(МесяцНалоговогоПериода)]) И Не ЗначениеЗаполнено(ДатыТекущегоРасчетаНерезидента[Месяц(МесяцНалоговогоПериода)]) Тогда
						
						// В итоговую таблицу запишем только вычеты.
						ДобавлятьРезультатМесяцаВИтогиФизлица = Ложь;
						
						Если МесяцНалоговогоПериода < КонецМесяца(МесяцРасчета) И ВспомогательнаяТаблицаМесяца.Итог("НалогПоСтавке13") + ВспомогательнаяТаблицаМесяца.Итог("НалогСПревышенияПоСтавке13") = 0 Тогда
							Для каждого СтрокаВычета Из ВычетыМесяца Цикл
								ДобавлятьРезультатМесяцаВИтогиФизлица = СтрокаВычета.РазмерВычета <> 0;
								Если ДобавлятьРезультатМесяцаВИтогиФизлица Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						// Минимизируем появление отсутствующих в текущих доходах категорий дохода.
						Если ДобавлятьРезультатМесяцаВИтогиФизлица Тогда
							
							ДатаМесяца = ОсновнаяДатаТекущегоРасчета;
							СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаТекущегоРасчета;
							ТаблицаРаспределенияТекущегоМесяца = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
							
							ДатыПодразделенияКатегории = ВспомогательныеДатыПодразделенияКатегории.СкопироватьКолонки();
							НаборИзмерений = ВычетыМесяца.Скопировать(, "МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
							НаборИзмерений.Свернуть("МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
							ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборИзмерений, ДатыПодразделенияКатегории);
							Для каждого СтрокаТЗ Из ДатыПодразделенияКатегории Цикл
								СтрокаТЗ.ЗаменятьДатуПолученияДохода = Истина;
								СтрокаТЗ.ЗаменятьКатегориюДохода = ВсеКатегорииТекущегоРасчета[СтрокаТЗ.КатегорияДохода] = Неопределено;
								СтрокаТЗ.ЗаменятьПодразделение = МесяцНалоговогоПериода >= НачалоМесяца(МесяцРасчета) И НачалоМесяца(СтрокаТЗ.МесяцНалоговогоПериода) = НачалоМесяца(ДатаМесяца);
								СтрокаТЗ.Распределение = ТаблицаРаспределенияТекущегоМесяца;
								Если ОсобыеКатегорииДохода[СтрокаТЗ.КатегорияДохода] = Истина Тогда
									СтрокаТЗ.ЗаменятьПодразделение = Ложь;
									СтрокаТЗ.ЗаменятьКатегориюДохода = Ложь;
								ИначеЕсли СтрокаТЗ.ЗаменятьПодразделение Тогда 	
									СтруктураПоискаПоДатамИПодразделениям.ДатаПолученияДохода = СтрокаТЗ.МесяцНалоговогоПериода;
									СтруктураПоискаПоДатамИПодразделениям.Подразделение = СтрокаТЗ.Подразделение;
									СтрокаТЗ.ЗаменятьПодразделение = ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаПоДатамИПодразделениям).Количество() = 0;
								КонецЕсли;
							КонецЦикла;
							Если ДатыПодразделенияКатегории.Количество() > 2 Тогда
								ДатыПодразделенияКатегории.Индексы.Добавить("МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
							КонецЕсли;
							
							ВспомогательнаяТаблицаВычетовМесяца.Очистить();
							ЗаменитьДатыПодразделенияКатегории(ВспомогательнаяТаблицаВычетовМесяца, ВычетыМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоКатегории, ДатыПодразделенияКатегории, ДатаМесяца, "МесяцПериодаПредоставленияВычета, КодВычета");
							
							// Перенесем результат расчета месяца в основную таблицу с результатом расчета.
							ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, СтрокиНДФЛЗаГод, ВспомогательнаяТаблицаМесяца.СкопироватьКолонки(), ВспомогательнаяТаблицаВычетовМесяца, ОписаниеВычетов);
						КонецЕсли;
						
						ВспомогательнаяТаблицаМесяца.Очистить();
						
					Иначе 
					
						ИсчисленоНДФЛЗаГод = ИсчисленоНДФЛЗаГод + ВспомогательнаяТаблицаМесяца.Итог("НалогПоСтавке13") + ВспомогательнаяТаблицаМесяца.Итог("НалогСПревышенияПоСтавке13");
						
						Если ПроводитьРасчетЗаОчереднойМесяц Тогда
							
							// Вычеркнем из результата строки по переброске некоторой суммы с одной категории на другую.
							ТаблицаМесяцаБезКатегорийДохода = ВспомогательнаяТаблицаМесяца.Скопировать();
							ТаблицаМесяцаБезКатегорийДохода.Свернуть("МесяцНалоговогоПериода, Подразделение", "НалогПоСтавке13, НалогСПревышенияПоСтавке13");
							Для каждого СтрокаТЗ Из ТаблицаМесяцаБезКатегорийДохода Цикл
								Если СтрокаТЗ.НалогПоСтавке13 = 0 Или СтрокаТЗ.НалогСПревышенияПоСтавке13 = 0 Тогда
									СтрокиКОбнулению = ВспомогательнаяТаблицаМесяца.НайтиСтроки(Новый Структура("МесяцНалоговогоПериода, Подразделение", СтрокаТЗ.МесяцНалоговогоПериода, СтрокаТЗ.Подразделение));
									Если СтрокаТЗ.НалогПоСтавке13 = 0 И СтрокаТЗ.НалогСПревышенияПоСтавке13 = 0 Тогда
										Для каждого СтрокаКОбнулению Из СтрокиКОбнулению Цикл
											ВспомогательнаяТаблицаМесяца.Удалить(СтрокаКОбнулению);
										КонецЦикла; 	
									ИначеЕсли СтрокаТЗ.НалогПоСтавке13 = 0 Тогда
										Для каждого СтрокаКОбнулению Из СтрокиКОбнулению Цикл
											 СтрокаКОбнулению.НалогПоСтавке13 = 0
										КонецЦикла; 	
									Иначе	
										Для каждого СтрокаКОбнулению Из СтрокиКОбнулению Цикл
											 СтрокаКОбнулению.НалогСПревышенияПоСтавке13 = 0
										КонецЦикла; 	
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							// Минимизируем появление отсутствующих в текущих доходах дат получения и категорий дохода:
							// 1. Определяем подходящую дату получения дохода и соответствующее ей распределение
							// при этом некоторые результаты расчетов могут быть проигнорированы совсем.
							ДобавлятьРезультатМесяцаВИтогиФизлица = Истина;
							ОсновнаяДатаПолученияДохода = ДатыТекущегоРасчетаПоМесяцам[Месяц(МесяцНалоговогоПериода)];
							Если ОкончательныйРасчет Тогда
								Если Не ЗначениеЗаполнено(ОсновнаяДатаПолученияДохода) Тогда // перерасчет налога при отсутствии дохода текущего акта расчета
									Если МесяцНалоговогоПериода > КонецМесяца(МесяцРасчета) Тогда // перерасчет по будущим доходам не производим
										ДобавлятьРезультатМесяцаВИтогиФизлица = Ложь;
									ИначеЕсли ВспомогательнаяТаблицаМесяца.Итог("НалогПоСтавке13") = 0 И ВспомогательнаяТаблицаМесяца.Итог("НалогСПревышенияПоСтавке13") = 0 И МесяцНалоговогоПериода < НачалоМесяца(МесяцРасчета) Тогда // нашли предшествующий месяц с нулевым налогом
										ВычетыДляПроверки = ВычетыМесяца.Скопировать(, "КодВычета, РазмерВычета");
										ВычетыДляПроверки.Свернуть("КодВычета", "РазмерВычета");
										ЕстьДанныеМесяца = Ложь;
										Для каждого СтрокаТЗ Из ВычетыДляПроверки Цикл
											ЕстьДанныеМесяца = СтрокаТЗ.РазмерВычета <> 0;
											Если ЕстьДанныеМесяца Тогда
												Прервать;
											КонецЕсли;
										КонецЦикла;
										Если Не ЕстьДанныеМесяца Тогда // игнорируем различные переброски сумм одного вычета, но не между вычетами 
											ДобавлятьРезультатМесяцаВИтогиФизлица = Ложь;
											ВспомогательнаяТаблицаМесяца.Очистить();
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								Если ДобавлятьРезультатМесяцаВИтогиФизлица Тогда
									Если МесяцНалоговогоПериода < НачалоМесяца(МесяцРасчета) Тогда
										Если ЗначениеЗаполнено(ОсновнаяДатаПолученияДохода) Тогда
											ДатаМесяца = ОсновнаяДатаПолученияДохода;
											СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаПолученияДохода;
											ТаблицаРаспределенияТекущегоМесяца = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
										ИначеЕсли ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам) Тогда
											ДатаМесяца = ОсновнаяДатаМесяцаРасчетаПоТекущимДоходам;
											ТаблицаРаспределенияТекущегоМесяца = ТаблицаРаспределенияМесяцаРасчетаПоТекущимДоходам;
										ИначеЕсли ЗначениеЗаполнено(ОсновнаяДатаМесяцаРасчета) Тогда
											ДатаМесяца = ОсновнаяДатаМесяцаРасчета;
											ТаблицаРаспределенияТекущегоМесяца = ТаблицаРаспределенияКонцаМесяцаРасчета;
										Иначе
											ДатаМесяца = ДатаНалоговогоПериода;
											ТаблицаРаспределенияТекущегоМесяца = ТаблицаРаспределенияНалоговогоПериода;
										КонецЕсли;
									Иначе
										Если ЗначениеЗаполнено(ОсновнаяДатаПолученияДохода) Тогда
											ДатаМесяца = ОсновнаяДатаПолученияДохода;
											СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаПолученияДохода;
											ТаблицаРаспределенияТекущегоМесяца = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
										Иначе
											ДатаМесяца = ДатаНалоговогоПериода;
											ТаблицаРаспределенияТекущегоМесяца = ТаблицаРаспределенияНалоговогоПериода;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							Иначе	
								ДатаМесяца = ОсновнаяДатаПолученияДохода;
								СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = ОсновнаяДатаПолученияДохода;
								ТаблицаРаспределенияТекущегоМесяца = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
							КонецЕсли;
							Если ДобавлятьРезультатМесяцаВИтогиФизлица Тогда
								
								// 2. Заменяем даты получения дохода на подходящую и пересматриваем категорию дохода
								ДатыПодразделенияКатегории = ВспомогательныеДатыПодразделенияКатегории.СкопироватьКолонки();
								НаборИзмерений = ВспомогательнаяТаблицаМесяца.Скопировать(, "МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
								ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВычетыМесяца.Скопировать(, "МесяцНалоговогоПериода, КатегорияДохода, Подразделение"), НаборИзмерений);
								НаборИзмерений.Свернуть("МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
								ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборИзмерений, ДатыПодразделенияКатегории);
								Для каждого СтрокаТЗ Из ДатыПодразделенияКатегории Цикл
									СтрокаТЗ.ЗаменятьДатуПолученияДохода = ВсеДатыТекущегоРасчета[СтрокаТЗ.МесяцНалоговогоПериода] = Неопределено;
									СтрокаТЗ.ЗаменятьКатегориюДохода = ВсеКатегорииТекущегоРасчета[СтрокаТЗ.КатегорияДохода] = Неопределено;
									СтрокаТЗ.ЗаменятьПодразделение = МесяцНалоговогоПериода >= НачалоМесяца(МесяцРасчета) И НачалоМесяца(СтрокаТЗ.МесяцНалоговогоПериода) = НачалоМесяца(ДатаМесяца);
									Если ОсобыеКатегорииДохода[СтрокаТЗ.КатегорияДохода] = Истина Тогда
										СтрокаТЗ.ЗаменятьПодразделение = Ложь;
										СтрокаТЗ.ЗаменятьКатегориюДохода = Ложь;
									ИначеЕсли СтрокаТЗ.ЗаменятьПодразделение Тогда 	
										СтруктураПоискаПоДатамИПодразделениям.ДатаПолученияДохода = СтрокаТЗ.МесяцНалоговогоПериода;
										СтруктураПоискаПоДатамИПодразделениям.Подразделение = СтрокаТЗ.Подразделение;
										СтрокаТЗ.ЗаменятьПодразделение = ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаПоДатамИПодразделениям).Количество() = 0;
									КонецЕсли;
									Если СтрокаТЗ.ЗаменятьДатуПолученияДохода Тогда
										СтрокаТЗ.Распределение = ТаблицаРаспределенияТекущегоМесяца;
									Иначе
										СтруктураПоискаТолькоПоДатам.ДатаПолученияДохода = СтрокаТЗ.МесяцНалоговогоПериода;
										СтрокаТЗ.Распределение = ДоходыТекущегоРасчета.Скопировать(ДоходыТекущегоРасчета.НайтиСтроки(СтруктураПоискаТолькоПоДатам)); 
									КонецЕсли;
								КонецЦикла;
								Если ДатыПодразделенияКатегории.Количество() > 2 Тогда
									ДатыПодразделенияКатегории.Индексы.Добавить("МесяцНалоговогоПериода, КатегорияДохода, Подразделение");
								КонецЕсли;
								
								ВспомогательнаяТаблицаФизическогоЛица.Очистить();
								ВспомогательнаяТаблицаПоДоходамПревышения.Очистить();
								ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВспомогательнаяТаблицаМесяца, ВспомогательнаяТаблицаПоДоходамПревышения);
								ЗаменитьДатыПодразделенияКатегории(ВспомогательнаяТаблицаФизическогоЛица, ВспомогательнаяТаблицаМесяца, ПараметрыЗаполненияРесурсаНалогПоСтавке13, ДатыПодразделенияКатегории, ДатаМесяца);
								ЗаменитьДатыПодразделенияКатегории(ВспомогательнаяТаблицаФизическогоЛица, ВспомогательнаяТаблицаПоДоходамПревышения, ПараметрыЗаполненияРесурсаНалогСПревышенияПоСтавке13, ДатыПодразделенияКатегории, ДатаМесяца);
								ВспомогательнаяТаблицаМесяца.Очистить();
								ВспомогательнаяТаблицаВычетовМесяца.Очистить();
								ЗаменитьДатыПодразделенияКатегории(ВспомогательнаяТаблицаВычетовМесяца, ВычетыМесяца, ПараметрыЗаполненияРесурсаСуммаВычетаПоКатегории, ДатыПодразделенияКатегории, ДатаМесяца, "МесяцПериодаПредоставленияВычета, КодВычета");
								
								// Перенесем результат расчета месяца в основную таблицу с результатом расчета.
								ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, СтрокиНДФЛЗаГод, ВспомогательнаяТаблицаФизическогоЛица, ВспомогательнаяТаблицаВычетовМесяца, ОписаниеВычетов);
							КонецЕсли;
							
						Иначе
							
							// Перенесем результат расчета месяца в основную таблицу с результатом расчета.
							ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, СтрокиНДФЛЗаГод, ВспомогательнаяТаблицаМесяца, ВычетыМесяца, ОписаниеВычетов);
							ВспомогательнаяТаблицаМесяца.Очистить();
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;		
				
				Если ТекущаяСтрокаТаблицыДоходов.ЭтоПоследняяСтрокаЗаГод Тогда
					Если ИсчисленоНДФЛЗаГод <> 0 Тогда
						// вписываем зачтенные авансовые платежи иностранцев
						ВписатьАвансовыеПлатежиВРезультатРасчета(СтрокиНДФЛЗаГод, ОстаткиПоАвансовымПлатежам, ИсчисленоНДФЛЗаГод, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод);
					Иначе // игнорируем различные переброски сумм одного вычета, но не между вычетами
						НетДанных = Истина;
						Для каждого ЭлементОписания Из ОписаниеВычетов Цикл
							ИмяКолонки = ЭлементОписания.Значение.ИмяКолонки;
							СуммаВычета = 0; ЕстьЗначенияВКолонке = Ложь;
							Для каждого СтрокаРезультата Из СтрокиНДФЛЗаГод Цикл
								СуммаВычета = СуммаВычета + СтрокаРезультата[ИмяКолонки];
								ЕстьЗначенияВКолонке = ЕстьЗначенияВКолонке Или СтрокаРезультата[ИмяКолонки] <> 0
							КонецЦикла;
							Если ЕстьЗначенияВКолонке И СуммаВычета = 0 Тогда
								Для каждого СтрокаРезультата Из СтрокиНДФЛЗаГод Цикл
									Если ИмяКолонки = "ПримененныйВычетЛичный" Тогда
										СтрокаРезультата.КодВычетаЛичный = ""	
									КонецЕсли;
									СтрокаРезультата[ИмяКолонки] = 0
								КонецЦикла;
							КонецЕсли;
							НетДанных = НетДанных И СуммаВычета = 0;
						КонецЦикла;
						Если НетДанных Тогда // удаляем незначащие строки за год из результата
							Для каждого СтрокаРезультата Из СтрокиНДФЛЗаГод Цикл
								РезультатРасчетаВспомогательный.Удалить(СтрокаРезультата)
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					ПродолжатьРасчет = Ложь;
				Иначе
					ИндексТекущейСтрокиТаблицыДоходов = ИндексТекущейСтрокиТаблицыДоходов + 1;
				КонецЕсли;	
				
			КонецЦикла;  // по налоговым периодам физ.лиц
			
			Если ТекущаяСтрокаТаблицыДоходов.ЭтоПоследняяСтрокаПоФизическомуЛицу Тогда // заканчиваем обработку физ.лица
				Если ОкончательныйРасчет Тогда
					// Допишем учтенные в расчете документы-основания.
					ВписатьУчтенныеОснованияВРезультатРасчета(РезультатРасчетаВспомогательный, НеучтенныеРанееОснования, СтруктураПоискаПоФизическомуЛицу, ИсключаемыйРегистратор);
					СоответствиеФизическихЛиц.Удалить(ТекущееФизическоеЛицо);
				Иначе 
					// Перенесем результаты расчета в основную таблицу с учетом ограничений.
					ПереписатьМежрасчетныйНДФЛФизическогоЛицаВРезультат(РезультатРасчета, РезультатРасчетаВспомогательный, ДатаУдержанияИсчисленногоНалога, МесяцРасчета, ВсегоДоходовТекущегоРасчета + ДоходыТекущегоРасчетаНерезидента.Итог("ДоходыБезВычетов"));	
				КонецЕсли;
			КонецЕсли;	
			
			ИндексТекущейСтрокиТаблицыДоходов = ИндексТекущейСтрокиТаблицыДоходов + 1;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	// Продолжим расчет по нерезидентам.
	СтрокОтдельныхСумм = ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно.Количество();
	Если СтрокОтдельныхСумм > 0 Тогда

		ИндексОбрабатываемойСтроки = 0;
		ТекущееФизическоеЛицо = Неопределено;
		ТекущийНалоговыйПериод = '00010101';
		МесяцНалоговогоПериодаПредыдущейСтроки = '00010101';
		СтруктураПоискаСтандартныхВычетов.ЭтоСоциальныйВычет = Ложь;
		СтруктураПоискаИмущественныхВычетов.ВидДвижения = ВидДвиженияНакопления.Расход;
		// Если выполняется окончательный расчет, будем вписывать результат расчета сразу в таблицы результата.
		// В случае с промежуточным расчетом будем использовать промежуточную таблицу, а потом переносить в результирующую с
		// учетом ограничений.
		Если Не ОкончательныйРасчет Тогда
			РезультатРасчетаВспомогательный = РезультатРасчета.СкопироватьКолонки();
		КонецЕсли;	
		
		Пока ИндексОбрабатываемойСтроки <= СтрокОтдельныхСумм - 1 Цикл
			
			ТекущаяСтрока = ДоходыДляРасчетаНалогаПоКаждойСуммеОтдельно[ИндексОбрабатываемойСтроки];
			
			Если ТекущаяСтрока.ФизическоеЛицо <> ТекущееФизическоеЛицо Тогда 
				
				Если ТекущееФизическоеЛицо <> Неопределено Тогда  // Завершение обработки предыдущего физлица.
					
					// вычтем ранее исчисленное
					СтруктураПоискаИсчисленного.ФизическоеЛицо = ТекущееФизическоеЛицо;
					Для СчМесяцев = 1 По Месяц(МесяцНалоговогоПериодаПредыдущейСтроки) Цикл
						СтруктураПоискаИсчисленного.МесяцНалоговогоПериодаДляПоиска = ДобавитьМесяц(ТекущийНалоговыйПериод, СчМесяцев - 1);
						ВписатьВРезультатЗарегистрированныеВУчетеДанные(ВспомогательнаяТаблицаМесяца, ИсчисленныйРанееНалог.НайтиСтроки(СтруктураПоискаИсчисленного), "КатегорияДохода, НалогПоСтавке13");	
					КонецЦикла;
					
					// впишем засчитываемые авансовые платежи
					ВписатьАвансовыеПлатежиВРезультатРасчета(ВспомогательнаяТаблицаМесяца, ОстаткиПоАвансовымПлатежам, Неопределено, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод);
					
					// перепишем результаты за последний налоговый период
					ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, Неопределено, ВспомогательнаяТаблицаМесяца, ВспомогательнаяТаблицаВычетовМесяца, ОписаниеВычетов, ТекущийНалоговыйПериод, ПредоставленныеСтандартныеИСоциальныеВычеты, СтруктураПоискаСтандартныхВычетов, ИмущественныеВычеты, СтруктураПоискаИмущественныхВычетов, Месяц(МесяцНалоговогоПериодаПредыдущейСтроки));
					
					// окончательно доработаем результаты
					Если ОкончательныйРасчет Тогда
						Если СоответствиеФизическихЛиц[ТекущееФизическоеЛицо] <> Неопределено Тогда // Допишем учтенные в расчете документы-основания.
							СтруктураПоискаПоФизическомуЛицу.ФизическоеЛицо = ТекущееФизическоеЛицо;
							ВписатьУчтенныеОснованияВРезультатРасчета(РезультатРасчетаВспомогательный, НеучтенныеРанееОснования, СтруктураПоискаПоФизическомуЛицу, ИсключаемыйРегистратор);
						КонецЕсли;
					Иначе
						ПереписатьМежрасчетныйНДФЛФизическогоЛицаВРезультат(РезультатРасчета, РезультатРасчетаВспомогательный, ДатаУдержанияИсчисленногоНалога, МесяцРасчета);	
					КонецЕсли;
					
				КонецЕсли;
				
				ТекущееФизическоеЛицо = ТекущаяСтрока.ФизическоеЛицо; // Начало обработки очередного физлица.
				ТекущийНалоговыйПериод = НачалоГода(ТекущаяСтрока.МесяцНалоговогоПериода);
				ВспомогательнаяТаблицаМесяца.Очистить();
				Если Не ОкончательныйРасчет Тогда
					РезультатРасчетаВспомогательный.Очистить();
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСтандартныхВычетов, ТекущаяСтрока);
				ЗаполнитьЗначенияСвойств(СтруктураПоискаИмущественныхВычетов, ТекущаяСтрока);
			
			КонецЕсли;
			
			Если ТекущийНалоговыйПериод <> НачалоГода(ТекущаяСтрока.МесяцНалоговогоПериода) Тогда
				
				// Завершение обработки предыдущего налогового периода.
				
				// вычтем ранее исчисленное
				СтруктураПоискаИсчисленного.ФизическоеЛицо = ТекущееФизическоеЛицо;
				Для СчМесяцев = 0 По 11 Цикл
					СтруктураПоискаИсчисленного.МесяцНалоговогоПериодаДляПоиска = ДобавитьМесяц(ТекущийНалоговыйПериод, СчМесяцев);
					ВписатьВРезультатЗарегистрированныеВУчетеДанные(ВспомогательнаяТаблицаМесяца, ИсчисленныйРанееНалог.НайтиСтроки(СтруктураПоискаИсчисленного), "КатегорияДохода, НалогПоСтавке13, НалогСПревышенияПоСтавке13");	
				КонецЦикла;
				
				// впишем засчитываемые авансовые платежи
				ВписатьАвансовыеПлатежиВРезультатРасчета(ВспомогательнаяТаблицаМесяца, ОстаткиПоАвансовымПлатежам, Неопределено, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод);
				
				// перепишем результаты за налоговый период
				ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, Неопределено, ВспомогательнаяТаблицаМесяца, ВспомогательнаяТаблицаВычетовМесяца, ОписаниеВычетов, ТекущийНалоговыйПериод, ПредоставленныеСтандартныеИСоциальныеВычеты, СтруктураПоискаСтандартныхВычетов, ИмущественныеВычеты, СтруктураПоискаИмущественныхВычетов);
				
				// Начало обработки очередного налогового периода.
				
				ТекущийНалоговыйПериод = НачалоГода(ТекущаяСтрока.МесяцНалоговогоПериода); 
				ВспомогательнаяТаблицаМесяца.Очистить();
				
			КонецЕсли;
			
			// Расчет налога по очередной строке дохода.
			
			СтрокаНалога = ВспомогательнаяТаблицаМесяца.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНалога, ТекущаяСтрока, "ФизическоеЛицо, Подразделение, КатегорияДохода");
			СтрокаНалога.НалогПоСтавке13 = Окр(ТекущаяСтрока.ДоходыБезВычетов * ТекущаяСтрока.СтавкаЧислом);
			СтрокаНалога.МесяцНалоговогоПериода = ТекущаяСтрока.ДатаПолученияДохода;
			
			МесяцНалоговогоПериодаПредыдущейСтроки = ТекущаяСтрока.МесяцНалоговогоПериода;
			ИндексОбрабатываемойСтроки = ИндексОбрабатываемойСтроки + 1;
			
		КонецЦикла;
		
		Если ТекущееФизическоеЛицо <> Неопределено Тогда  // Завершение обработки последнего по порядку физлица.
			
			// вычтем ранее исчисленное
			СтруктураПоискаИсчисленного.ФизическоеЛицо = ТекущееФизическоеЛицо;
			Для СчМесяцев = 1 По Месяц(ТекущаяСтрока.МесяцНалоговогоПериода) Цикл
				СтруктураПоискаИсчисленного.МесяцНалоговогоПериодаДляПоиска = ДобавитьМесяц(ТекущийНалоговыйПериод, СчМесяцев - 1);
				ВписатьВРезультатЗарегистрированныеВУчетеДанные(ВспомогательнаяТаблицаМесяца, ИсчисленныйРанееНалог.НайтиСтроки(СтруктураПоискаИсчисленного), "КатегорияДохода, НалогПоСтавке13");	
			КонецЦикла;
			
			// впишем засчитываемые авансовые платежи
			ВписатьАвансовыеПлатежиВРезультатРасчета(ВспомогательнаяТаблицаМесяца, ОстаткиПоАвансовымПлатежам, Неопределено, ТекущееФизическоеЛицо, ТекущийНалоговыйПериод);
			
			// перепишем результаты за последний налоговый период
			ПереписатьЧастичныйРезультатРасчетаВРезультатПоФизическомуЛицу(РезультатРасчетаВспомогательный, Неопределено, ВспомогательнаяТаблицаМесяца, ВспомогательнаяТаблицаВычетовМесяца, ОписаниеВычетов, ТекущийНалоговыйПериод, ПредоставленныеСтандартныеИСоциальныеВычеты, СтруктураПоискаСтандартныхВычетов, ИмущественныеВычеты, СтруктураПоискаИмущественныхВычетов, Месяц(ТекущаяСтрока.МесяцНалоговогоПериода));
					
			// окончательно доработаем результаты
			Если ОкончательныйРасчет Тогда
				Если СоответствиеФизическихЛиц[ТекущееФизическоеЛицо] <> Неопределено Тогда // Допишем учтенные в расчете документы-основания.
					СтруктураПоискаПоФизическомуЛицу.ФизическоеЛицо = ТекущееФизическоеЛицо;
					ВписатьУчтенныеОснованияВРезультатРасчета(РезультатРасчетаВспомогательный, НеучтенныеРанееОснования, СтруктураПоискаПоФизическомуЛицу, ИсключаемыйРегистратор);
				КонецЕсли;
			Иначе
				ПереписатьМежрасчетныйНДФЛФизическогоЛицаВРезультат(РезультатРасчета, РезультатРасчетаВспомогательный, ДатаУдержанияИсчисленногоНалога, МесяцРасчета);	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Дозаполним категорию дохода значением по умолчанию.
	Для Каждого СтрокаРезультат Из РезультатРасчета Цикл
		Если Не ЗначениеЗаполнено(СтрокаРезультат.КатегорияДохода) Тогда
			СтрокаРезультат.КатегорияДохода = Перечисления.КатегорииДоходовНДФЛ.ОплатаТруда;
		КонецЕсли;
	КонецЦикла;

	// Допишем полученные ранее результаты расчета прошлых лет
	Для каждого СтрокаРезультат Из РезультатыПрошлыхЛет Цикл
		Если СтрокаРезультат.МесяцНалоговогоПериода < ПервыйМесяцРасчетаНДФЛПоПрогрессивнойШкале Тогда
			ЗаполнитьЗначенияСвойств(РезультатРасчета.Добавить(), СтрокаРезультат);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатРасчета;
		
КонецФункции
