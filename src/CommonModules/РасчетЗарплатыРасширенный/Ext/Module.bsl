#Область АБ_Доработка1_ПромежуточныеФункции_От_ГрафическогоИнтерфейса_До_ФункцииПолученияНужногоЗначения_3
&ИзменениеИКонтроль("ПерезаполнитьДанныеФормы")
Функция АБ_ПерезаполнитьДанныеФормы(Форма, ОписаниеДокумента, Знач СотрудникиФизическиеЛица, СохранятьИсправления, ИспользоватьДлительнуюОперацию, ПерезаполнятьВедущиеТаблицы, СотрудникиПериодДействияПерерасчет) Экспорт

	Объект = Форма.Объект;

	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];

	Организация = Объект.Организация;
	ДокументСсылка = Объект.Ссылка;
	Подразделение = Объект.Подразделение;

	ФизическиеЛица = Неопределено;
	ПозицииВставки = Неопределено;

	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	Если СотрудникиФизическиеЛица <> Неопределено Тогда
		ВедущиеОбъекты = СотрудникиФизическиеЛица(СотрудникиФизическиеЛица, Организация);
		Если ВедущиеОбъекты = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Сотрудники = ВедущиеОбъекты.Сотрудники;
		ФизическиеЛица = ВедущиеОбъекты.ФизическиеЛица;
		ПозицииВставки = Новый Структура;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") И Сотрудники <> Неопределено Тогда 
		ПараметрыПолученияПодработок = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники, МесяцНачисления, КонецМесяца(МесяцНачисления));
		МассивПодработок = КадровыйУчетРасширенный.ПодработкиСотрудников(Истина, ПараметрыПолученияПодработок);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, МассивПодработок, Истина);
	КонецЕсли;

	// Период заполнения данных определяем по месяцу начисления, 
	// если он не определяется отдельными полями.
	ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	Если ЗначениеЗаполнено(ОписаниеДокумента.Окончание) Тогда
		ОкончаниеПериода = КонецДня(Объект[ОписаниеДокумента.Окончание]);
	КонецЕсли;

	РежимНачисления = РежимНачисления(Объект, ОписаниеДокумента);
	ПорядокВыплаты = ПорядокВыплаты(Объект, ОписаниеДокумента);
	ДатаВыплаты = ДатаВыплаты(Объект, ОписаниеДокумента);

	СтруктураПараметров = РасчетЗарплатыРасширенныйКлиентСервер.ПараметрыПолученияДанныхЗаполненияДокумента();
	#Вставка
	//1АБ Беляев 08.03.2021 + 
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
	СтруктураПараметров.ИспользоватьНеТиповойРасчетНочных=Объект.АБ_ИспользоватьНеТиповойРасчетНочных;
	СтруктураПараметров.ИспользоватьНеТиповойРасчетПраздничных=Объект.АБ_ИспользоватьНеТиповойРасчетПраздничных;
	КонецЕсли;
	//1АБ Беляев 08.03.2021 -
	#КонецВставки	
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ДокументСсылка = ДокументСсылка;
	СтруктураПараметров.Подразделение = Подразделение;
	СтруктураПараметров.МесяцНачисления = МесяцНачисления;
	СтруктураПараметров.ДатаВыплаты = ДатаВыплаты;
	СтруктураПараметров.Сотрудники = Сотрудники;
	СтруктураПараметров.ОкончаниеПериода = ОкончаниеПериода;
	СтруктураПараметров.РежимНачисления = РежимНачисления;
	СтруктураПараметров.ПорядокВыплаты = ПорядокВыплаты;
	СтруктураПараметров.ОписаниеДокумента = ОписаниеДокумента;
	СтруктураПараметров.СохранятьИсправления = СохранятьИсправления;
	СтруктураПараметров.СодержимоеДокумента = СодержимоеДокументаРасчетаЗарплаты(Объект, ОписаниеДокумента, ПозицииВставки, ФизическиеЛица);
	СтруктураПараметров.КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
	СтруктураПараметров.СотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет;
	СтруктураПараметров.РежимПересчетаНДФЛ = ОписаниеДокумента.ЭтоНачислениеЗарплаты И Форма.РежимПересчетаНДФЛ;
	СтруктураПараметров.РежимПересчетаВзносов = ОписаниеДокумента.ЭтоНачислениеЗарплаты И Форма.РежимПересчетаВзносов;
	СтруктураПараметров.ПозицииВставки = ПозицииВставки;
	Если ОписаниеДокумента.ЭтоНачислениеЗарплаты
		И РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет Тогда

		ПараметрыВС = Новый Структура("ИспользоватьВоеннуюСлужбу,НачислениеЗарплатыВоеннослужащим",Ложь,Ложь);
		ЗаполнитьЗначенияСвойств(ПараметрыВС, Форма);
		ЗаполнитьЗначенияСвойств(ПараметрыВС, Объект);
		СтруктураПараметров.ИспользоватьВоеннуюСлужбу = ПараметрыВС.ИспользоватьВоеннуюСлужбу;
		СтруктураПараметров.НачислениеЗарплатыВоеннослужащим = ПараметрыВС.НачислениеЗарплатыВоеннослужащим;
	КонецЕсли;

	Если Не ПустаяСтрока(ОписаниеДокумента.НДФЛИмя) Тогда
		СтруктураПараметров.ОкончательныйРасчетНДФЛ = Форма["ОкончательныйРасчетНДФЛ"];
	КонецЕсли;                                                        
	#Вставка                                                          
	//1АБ Самойленко +
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.НачислениеЗаПервуюПоловинуМесяца") Тогда
		СтруктураПараметров.Вставить("НеПредоставлятьВычеты", Истина);
	КонецЕсли;
	//1АБ Самойленко -
	#КонецВставки

	ДанныеРаспределения = Новый Структура;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено;

	Если ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата <> Неопределено Тогда 
		Для Каждого КлючИЗначение Из ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата Цикл
			ПутьКДанным = КлючИЗначение.Значение.ПутьКДаннымАдресРаспределенияРезультатовВХранилище;
			Если ЗначениеЗаполнено(ПутьКДанным) И ЗначениеЗаполнено(Форма[ПутьКДанным]) И Не ДанныеРаспределения.Свойство(ПутьКДанным) Тогда
				ДанныеРаспределения.Вставить(ПутьКДанным, ПолучитьИзВременногоХранилища(Форма[ПутьКДанным]));
			КонецЕсли;
			ПутьКДанным = КлючИЗначение.Значение.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда;
			Если ЗначениеЗаполнено(ПутьКДанным) И ЗначениеЗаполнено(Форма[ПутьКДанным]) И ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено Тогда
				ДанныеРаспределенияПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(Форма[ПутьКДанным]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	СтруктураПараметров.РаспределениеРезультатов = ДанныеРаспределения;
	СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда;

	Если Не ИспользоватьДлительнуюОперацию Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища);
		Возврат Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	КонецЕсли;

	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Начисление зарплаты""'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
	Форма.УникальныйИдентификатор,
	"РасчетЗарплатыРасширенный.ПодготовитьДанныеДляПерезаполнения",
	СтруктураПараметров,
	НаименованиеЗадания);

	Возврат Результат;

КонецФункции

&ИзменениеИКонтроль("ПодготовитьДанныеДляПерезаполнения")
Процедура АБ_ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеЗаполнения = ОписаниеДанныхДляЗаполненияТаблицДокумента();
	#Вставка
	//1АБ Беляев 08.03.2021 + 
	ИспользоватьНеТиповойРасчетНочных=Ложь;
	ИспользоватьНеТиповойРасчетПраздничных=Ложь;
	Если СтруктураПараметров.Свойство("ИспользоватьНеТиповойРасчетНочных",ИспользоватьНеТиповойРасчетНочных) Тогда
	Иначе
	ИспользоватьНеТиповойРасчетНочных=Ложь;
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ИспользоватьНеТиповойРасчетПраздничных",ИспользоватьНеТиповойРасчетПраздничных) Тогда
	Иначе
	ИспользоватьНеТиповойРасчетПраздничных=Ложь;
	КонецЕсли;
	//1АБ Беляев 08.03.2021 -
	#КонецВставки 
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	ДокументСсылка = СтруктураПараметров.ДокументСсылка;
	Подразделение = СтруктураПараметров.Подразделение;
	МесяцНачисления = СтруктураПараметров.МесяцНачисления;
	ДатаВыплаты = СтруктураПараметров.ДатаВыплаты;
	Сотрудники = СтруктураПараметров.Сотрудники;
	ОкончаниеПериода = СтруктураПараметров.ОкончаниеПериода;
	РежимНачисления = СтруктураПараметров.РежимНачисления;
	СохранятьИсправления = СтруктураПараметров.СохранятьИсправления;
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	КонтролируемыеПоля = СтруктураПараметров.КонтролируемыеПоля;
	РежимПересчетаНДФЛ = СтруктураПараметров.РежимПересчетаНДФЛ;
	РежимПересчетаВзносов = СтруктураПараметров.РежимПересчетаВзносов;
	РаспределениеРезультатов = СтруктураПараметров.РаспределениеРезультатов;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	ОкончательныйРасчетНДФЛ = СтруктураПараметров.ОкончательныйРасчетНДФЛ;
	ПозицииВставки = СтруктураПараметров.ПозицииВставки;
	ПроверятьРегистрациюПроцентаЕНВД = СтруктураПараметров.ПроверятьРегистрациюПроцентаЕНВД;
	НастройкиРасчетаЗарплаты = НастройкиРасчетаЗарплаты();
	ДоначислениеПерерасчетЗарплатыОтдельнымДокументом = НастройкиРасчетаЗарплаты.ВыполнятьДоначислениеПерерасчетЗарплатыОтдельнымДокументом;
	ЗаполнятьПерерасчеты = ОписаниеДокумента.РежимДоначисления Или Не ДоначислениеПерерасчетЗарплатыОтдельнымДокументом;
	НачислениеЗарплатыВоеннослужащим = СтруктураПараметров.НачислениеЗарплатыВоеннослужащим;
	ИспользоватьВоеннуюСлужбу = СтруктураПараметров.ИспользоватьВоеннуюСлужбу;
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;
	
	ЕстьНачисления = ОписаниеДокумента.НачисленияИмя <> Неопределено;
	ЕстьПособия = ОписаниеДокумента.ПособияИмя <> Неопределено;
	ЕстьУдержания = ОписаниеДокумента.УдержанияИмя <> Неопределено;
	ЕстьНачисленияПерерасчет = ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено;
	ЕстьПособияПерерасчет = ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено;
	ЕстьУдержанияПерерасчет = ОписаниеДокумента.УдержанияПерерасчетИмя <> Неопределено;
	ЕстьЛьготы = ОписаниеДокумента.ЛьготыИмя <> Неопределено;
	
	РассчитыватьНачисления = ЕстьНачисления Или ЕстьНачисленияПерерасчет Или ЕстьПособия Или ЕстьПособияПерерасчет Или ЕстьЛьготы;
	РассчитыватьУдержания = ЕстьУдержания Или ЕстьУдержанияПерерасчет;
	РассчитыватьНДФЛ = ОписаниеДокумента.НДФЛИмя <> Неопределено;
	
	ЗаполнятьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено;
	ЗаполнятьНачисленияПоТрудовымДоговорам = Не ЗаполнятьНачисленияПоДоговорамПодряда Или РассчитыватьНачисления;
	
	РассчитыватьВзносы = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ВзносыИмя <> Неопределено;
	ЗаполнятьПогашениеЗаймов = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено;
	
	ЗаполнениеДокумента = Сотрудники = Неопределено;
	ИмяДанныхЗаполнения = ?(ЗаполнениеДокумента, "ДанныеДляЗаполненияТаблицДокумента", "ДанныеДляПерезаполненияТаблицДокумента");
	
	РасчетПервойПоловиныМесяца = РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца;
	ПолучатьДанныеУчета = Не РежимПересчетаНДФЛ И Не РежимПересчетаВзносов;
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	Если Сотрудники = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  		= Организация;
		ПараметрыПолученияСотрудников.Подразделение 	= Подразделение;
		ПараметрыПолученияСотрудников.НачалоПериода		= МесяцНачисления;
		ПараметрыПолученияСотрудников.ОкончаниеПериода  = ОкончаниеПериода;
		ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		
		АвансТолькоРасчетомЗаПервуюПоловинуМесяца = УчетНДФЛ.ДатаЗакона263ФЗ() > МесяцНачисления;
		Если АвансТолькоРасчетомЗаПервуюПоловинуМесяца Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПолученияСотрудников.Отборы, "СпособРасчетаАванса", "=", Перечисления.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца);
		КонецЕсли;
			
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник", Истина);
		
		Если ЗаполнятьНачисленияПоТрудовымДоговорам Тогда
			ПараметрыСотрудников = ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
			ПараметрыСотрудников.ОкончаниеПериода = ОкончаниеПериода;
			ПараметрыСотрудников.ЗаполнятьНачисленияПоТрудовымДоговорам = ЗаполнятьНачисленияПоТрудовымДоговорам;
			ПараметрыСотрудников.ЗаполнятьНачисленияПоДоговорамПодряда = Не РасчетПервойПоловиныМесяца;
			ПараметрыСотрудников.ИспользоватьВоеннуюСлужбу = ИспользоватьВоеннуюСлужбу;
			ПараметрыСотрудников.НачислениеЗарплатыВоеннослужащим = НачислениеЗарплатыВоеннослужащим;
			ПараметрыСотрудников.РасчетПервойПоловиныМесяца = РасчетПервойПоловиныМесяца;
			СотрудникиДополнительныйДоход = СотрудникиДополнительныйДоход(
				Организация,
				Подразделение,
				МесяцНачисления,
				ПараметрыСотрудников,
				Сотрудники,
				РассчитыватьНДФЛ,
				РассчитыватьВзносы);
				
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиДополнительныйДоход);
		КонецЕсли;
		
		СтруктураПараметров.Сотрудники = Сотрудники;
	КонецЕсли;
	
	СотрудникиНеудовлетворенныеДенежнымДовольствием = Неопределено;
	Если НачислениеЗарплатыВоеннослужащим И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		СотрудникиНеудовлетворенныеДенежнымДовольствием = Модуль.СотрудникиНеудовлетворенныеДенежнымДовольствием(
			Организация,
			Подразделение,
			МесяцНачисления,
			Сотрудники);
	КонецЕсли;
		
	МенеджерРасчета = СоздатьМенеджерРасчета(МесяцНачисления, Организация);
	МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;
	
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = РассчитыватьНачисления;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьДоговорыПодряда = ЗаполнятьНачисленияПоДоговорамПодряда;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = РассчитыватьУдержания;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = РассчитыватьНДФЛ;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы = РассчитыватьВзносы;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьЗаймы = ЗаполнятьПогашениеЗаймов;
	
	МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = СохранятьИсправления;
	
	МенеджерРасчета.НастройкиРасчета.ПерваяПоловинаМесяца = РасчетПервойПоловиныМесяца;
	МенеджерРасчета.НастройкиРасчета.ОкончательныйРасчет = РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет;
	МенеджерРасчета.НастройкиРасчета.Сотрудники = Сотрудники;
	#Вставка
	//1АБ Беляев +
	НеПредоставлятьВычеты = Ложь;
	Если СтруктураПараметров.Свойство("НеПредоставлятьВычеты", НеПредоставлятьВычеты) Тогда
		Если НеПредоставлятьВычеты Тогда
			МенеджерРасчета.НастройкиНДФЛ.АБ_НеПредоставлятьВычеты = Истина;
		Иначе
			МенеджерРасчета.НастройкиНДФЛ.АБ_НеПредоставлятьВычеты = Ложь;
		КонецЕсли;
	Иначе
		МенеджерРасчета.НастройкиНДФЛ.АБ_НеПредоставлятьВычеты = Ложь;
	КонецЕсли;    
	//1АБ Беляев -
	#КонецВставки
	
	МенеджерРасчета.НастройкиНачислений.РассчитыватьНачисления = ЕстьНачисления Или ЕстьНачисленияПерерасчет;
	#Вставка
	//1АБ Беляев 08.03.2021 + 
	МенеджерРасчета.НастройкиНачислений.ИспользоватьНеТиповойРасчетНочных=ИспользоватьНеТиповойРасчетНочных;
	МенеджерРасчета.НастройкиНачислений.ИспользоватьНеТиповойРасчетПраздничных=ИспользоватьНеТиповойРасчетПраздничных;
	//1АБ Беляев 08.03.2021 -
	#КонецВставки
	МенеджерРасчета.НастройкиНачислений.РассчитыватьПособия = ЕстьПособия Или ЕстьПособияПерерасчет;
	МенеджерРасчета.НастройкиНачислений.РассчитыватьЛьготы = ЕстьЛьготы;
	
	МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = РасчетПервойПоловиныМесяца
		Или Не ЗаполнятьНачисленияПоТрудовымДоговорам;
	
	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиНДФЛ.ДатаВыплаты = ДатаВыплаты;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = ОкончательныйРасчетНДФЛ;
	Если РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет
		И Не ОписаниеДокумента.РежимДоначисления Тогда
		
		МенеджерРасчета.НастройкиНДФЛ.ЗасчитыватьДанныеАвансов = Истина;
	КонецЕсли;
	
	МенеджерРасчета.НастройкиЗаймов.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиЗаймов.ДатаПогашения = КонецМесяца(МесяцНачисления);
	
	МенеджерРасчета.НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД = ПроверятьРегистрациюПроцентаЕНВД;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриИнициализацииМенеджераРасчетаДляЗаполненияДокументаРасчетаЗарплаты(МенеджерРасчета);
	КонецЕсли;
	
	Если ПолучатьДанныеУчета Тогда
		СотрудникиДляНачислений = МенеджерРасчета.ТаблицаСотрудников();
		СотрудникиДляУдержаний = МенеджерРасчета.ТаблицаСотрудников();
		РассчитыватьУдержанияПерерасчет = Ложь;
		
		// Сотрудники перерасчета.
		Если ЗаполнятьПерерасчеты
			И (ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено 
				Или ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено
				Или ЕстьУдержанияПерерасчет) Тогда
		
			ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаПустаяСтруктура();
			Если ЕстьНачисленияПерерасчет Тогда
				ДанныеПерерасчета.НачисленияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
			КонецЕсли;
			Если ЕстьПособияПерерасчет Тогда
				ДанныеПерерасчета.ПособияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
			КонецЕсли;
			ДанныеПерерасчета.ТаблицаСотрудников = СотрудникиДляНачислений;
			ДанныеПерерасчета.ТаблицаУдержаний = МенеджерРасчета.ТаблицаСотрудников();
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
				Модуль.ДополнитьПустуюСтруктуруДанныхПерерасчета(ДанныеПерерасчета, МенеджерРасчета.ТаблицаНачислений());
			КонецЕсли;
		
			ПерерасчетЗарплаты.ЗаполнитьДанныеПерерасчета(
				ДанныеПерерасчета, 
				Организация, 
				Подразделение, 
				МесяцНачисления, 
				Сотрудники, 
				СтруктураПараметров.СотрудникиПериодДействияПерерасчет, 
				ДокументСсылка, 
				ОписаниеДокумента.РежимДоначисления,
				МенеджерРасчета);
		
			Если ДанныеПерерасчета.ТаблицаУдержаний.Количество() > 0 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ТаблицаУдержаний, СотрудникиДляУдержаний);
				РассчитыватьУдержанияПерерасчет = Истина;
			КонецЕсли;
			
			МассивСотрудниковДляУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиДляНачислений, "Сотрудник", Истина);
			Для Каждого Сотрудник Из МассивСотрудниковДляУдержаний Цикл
				НоваяСтрока = СотрудникиДляУдержаний.Добавить();
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ДатаНачала = МесяцНачисления;
				НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
			КонецЦикла;
		
			ДанныеЗаполнения.СотрудникиПерерасчет = ДанныеПерерасчета.СотрудникиПерерасчет;
		КонецЕсли;
		
		Если ЕстьНачисления Или ЕстьПособия Или ЕстьЛьготы
			Или РассчитыватьУдержания Или РассчитыватьУдержанияПерерасчет
			Или ЗаполнятьНачисленияПоДоговорамПодряда Тогда
			
			Для Каждого Сотрудник Из Сотрудники Цикл
				Если СотрудникиНеудовлетворенныеДенежнымДовольствием <> Неопределено
					И СотрудникиНеудовлетворенныеДенежнымДовольствием.Найти(Сотрудник) <> Неопределено Тогда
					
					БезусловноСоответствуетКадровымДанным = Истина;
				Иначе
					БезусловноСоответствуетКадровымДанным = Ложь;
				КонецЕсли;
				
				Если ЕстьНачисления Или ЕстьПособия Или ЕстьЛьготы Или ЗаполнятьНачисленияПоДоговорамПодряда Тогда
					НоваяСтрока = СотрудникиДляНачислений.Добавить();
					НоваяСтрока.Сотрудник = Сотрудник;
					НоваяСтрока.ДатаНачала = МесяцНачисления;
					НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
					НоваяСтрока.БезусловноСоответствуетКадровымДанным = БезусловноСоответствуетКадровымДанным;
				КонецЕсли;
				
				Если ЕстьУдержания Тогда 
					НоваяСтрока = СотрудникиДляУдержаний.Добавить();
					НоваяСтрока.Сотрудник = Сотрудник;
					НоваяСтрока.ДатаНачала = МесяцНачисления;
					НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
					НоваяСтрока.БезусловноСоответствуетКадровымДанным = БезусловноСоответствуетКадровымДанным;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СохранятьИсправления Тогда 
			ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров);
		КонецЕсли;
		
		ОтборМенеджераРасчета = МенеджерРасчета.СоздатьОтборы();
		ОтборМенеджераРасчета.Подразделение = Подразделение;
		МенеджерРасчета.ЗаполнитьНачислениеЗарплаты(СотрудникиДляНачислений, ОтборМенеджераРасчета, СотрудникиДляУдержаний);
		Если ЗаполнятьПерерасчеты
			И (ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено 
				Или ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено) Тогда
				
			Если ЕстьНачисленияПерерасчет Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.НачисленияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
			КонецЕсли;
			Если ЕстьПособияПерерасчет Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ПособияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
			КонецЕсли;
		КонецЕсли;
		МенеджерРасчета.РассчитатьЗарплату();
	Иначе
		ЗаполнитьМенеджерРасчетаСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров);
		Если РежимПересчетаВзносов Тогда
			МенеджерРасчета.ПересчитатьВзносы();
		КонецЕсли;
		Если РежимПересчетаНДФЛ Тогда
			МенеджерРасчета.ПересчитатьНДФЛ();
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Начисления = МенеджерРасчета.Зарплата.Начисления;
	ДанныеЗаполнения.НачисленияПоДоговорам = МенеджерРасчета.Зарплата.ДоговорыПодряда;
	ДанныеЗаполнения.Удержания = МенеджерРасчета.Зарплата.Удержания;
	ДанныеЗаполнения.НДФЛ = МенеджерРасчета.Зарплата.НДФЛ;
	ДанныеЗаполнения.ПогашениеЗаймов = МенеджерРасчета.Зарплата.ПогашениеЗаймов;
	ДанныеЗаполнения.Взносы = МенеджерРасчета.Зарплата.Взносы;
	ДанныеЗаполнения.КорректировкиВыплаты = МенеджерРасчета.Зарплата.КорректировкиВыплаты;
	
	РезультатЗаполнения = Новый Структура;
	
	РезультатЗаполнения.Вставить(ИмяДанныхЗаполнения, ДанныеЗаполнения);
	РезультатЗаполнения.Вставить("СтруктураПараметров", СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
	
КонецПроцедуры

&ИзменениеИКонтроль("ДополнительныеПараметрыЗаполненияТаблицДокумента")
Функция АБ_ДополнительныеПараметрыЗаполненияТаблицДокумента()
	
	ДополнительныеПараметры = Новый Структура(
		"Подразделение,
		|ДокументСсылка, 
		|Сотрудники, 
		|ОкончаниеПериода, 
		|РежимНачисления, 
		|ПорядокВыплаты, 
		|ДатаВыплаты,
		#Вставка
		//1АБ Беляев 08.03.2021 +
		|ИспользоватьНеТиповойРасчетНочных,
		|ИспользоватьНеТиповойРасчетПраздничных,
		//1АБ Беляев 08.03.2021 -
		#КонецВставки
		|СотрудникиПериодДействияПерерасчет, 
		|ИспользоватьВоеннуюСлужбу, 
		|НачислениеЗарплатыВоеннослужащим,
		|МногопотоковоеЗаполнение,
		|СотрудникиДополнительныйДоход,
		|АдресХранилища,
		|ОкончательныйРасчетНДФЛ,
		|ПроверятьРегистрациюПроцентаЕНВД");
		                           
	ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = Ложь;
	ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = Ложь;
	ДополнительныеПараметры.МногопотоковоеЗаполнение = Ложь;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = Ложь;
	ДополнительныеПараметры.ПроверятьРегистрациюПроцентаЕНВД = Ложь;
	#Вставка
	//1АБ Беляев 08.03.2021 +
	ДополнительныеПараметры.ИспользоватьНеТиповойРасчетНочных = Ложь;
	ДополнительныеПараметры.ИспользоватьНеТиповойРасчетПраздничных = Ложь;
	//1АБ Беляев 08.03.2021 -
	#КонецВставки
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриСозданииДополнительныхПараметровДанныхДляНачисленияЗарплаты(ДополнительныеПараметры);
	КонецЕсли;

	Возврат ДополнительныеПараметры;
	
КонецФункции

&ИзменениеИКонтроль("ДанныеДляЗаполненияТаблицДокумента")
Функция АБ_ДанныеДляЗаполненияТаблицДокумента(ОписаниеДокумента, Организация, МесяцНачисления, ДополнительныеПараметры)

	ЗамерПодготовкаДанныхЗаполненияДокумента = ОценкаПроизводительности.НачатьЗамерВремени();

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыЗаполненияТаблицДокумента();
	КонецЕсли;

	Сотрудники = ДополнительныеПараметры.Сотрудники;
	ДокументСсылка = ДополнительныеПараметры.ДокументСсылка;
	Подразделение = ДополнительныеПараметры.Подразделение;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
	РежимНачисления = ДополнительныеПараметры.РежимНачисления;
	ПорядокВыплаты = ДополнительныеПараметры.ПорядокВыплаты;
	ДатаВыплаты = ДополнительныеПараметры.ДатаВыплаты;
	СотрудникиПериодДействияПерерасчет = ДополнительныеПараметры.СотрудникиПериодДействияПерерасчет;
	ИспользоватьВоеннуюСлужбу = ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу;
	НачислениеЗарплатыВоеннослужащим = ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим;
	МногопотоковоеЗаполнение = ДополнительныеПараметры.МногопотоковоеЗаполнение;
	СотрудникиДополнительныйДоход = ДополнительныеПараметры.СотрудникиДополнительныйДоход;
	АдресХранилища = ДополнительныеПараметры.АдресХранилища;
	ОкончательныйРасчетНДФЛ = ДополнительныеПараметры.ОкончательныйРасчетНДФЛ;
	ПроверятьРегистрациюПроцентаЕНВД = ДополнительныеПараметры.ПроверятьРегистрациюПроцентаЕНВД;
	НастройкиРасчетаЗарплаты = НастройкиРасчетаЗарплаты();
	ДоначислениеПерерасчетЗарплатыОтдельнымДокументом = НастройкиРасчетаЗарплаты.ВыполнятьДоначислениеПерерасчетЗарплатыОтдельнымДокументом;
	ЗаполнятьПерерасчеты = ОписаниеДокумента.РежимДоначисления Или Не ДоначислениеПерерасчетЗарплатыОтдельнымДокументом;
	ДанныеЗаполнения = ОписаниеДанныхДляЗаполненияТаблицДокумента();
	СотрудникиНеудовлетворенныеДенежнымДовольствием = Неопределено;
	#Вставка
	//1АБ Беляев 08.03.2021 +
	ИспользоватьНеТиповойРасчетНочных=Ложь;
	ИспользоватьНеТиповойРасчетПраздничных=Ложь;
	Если ДополнительныеПараметры.Свойство("ИспользоватьНеТиповойРасчетНочных",ИспользоватьНеТиповойРасчетНочных) Тогда
	Иначе
	ИспользоватьНеТиповойРасчетНочных=Ложь;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("ИспользоватьНеТиповойРасчетПраздничных",ИспользоватьНеТиповойРасчетПраздничных) Тогда
	Иначе
	ИспользоватьНеТиповойРасчетПраздничных=Ложь;
	КонецЕсли;
	//1АБ Беляев 08.03.2021 -
	#КонецВставки

	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;

	РасчетПервойПоловиныМесяца = (РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца);

	// Флаги выполняемых действия при заполнении
	ЕстьНачисления = ОписаниеДокумента.НачисленияИмя <> Неопределено;
	ЕстьУдержания = ОписаниеДокумента.УдержанияИмя <> Неопределено;
	ЕстьПособия = ОписаниеДокумента.ПособияИмя <> Неопределено;
	ЕстьНачисленияПерерасчет = ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено;
	ЕстьПособияПерерасчет = ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено;
	ЕстьУдержанияПерерасчет = ОписаниеДокумента.УдержанияПерерасчетИмя <> Неопределено;
	ЕстьЛьготы = ОписаниеДокумента.ЛьготыИмя <> Неопределено;

	РассчитыватьНачисления = ЕстьНачисления Или ЕстьНачисленияПерерасчет Или ЕстьПособия Или ЕстьПособияПерерасчет Или ЕстьЛьготы;
	РассчитыватьУдержания = ЕстьУдержания Или ЕстьУдержанияПерерасчет;
	РассчитыватьНДФЛ = ОписаниеДокумента.НДФЛИмя <> Неопределено;

	ЕстьУдержанияПерерасчет = ОписаниеДокумента.УдержанияПерерасчетИмя <> Неопределено;

	ЗаполнятьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено;
	ЗаполнятьНачисленияПоТрудовымДоговорам = Не ЗаполнятьНачисленияПоДоговорамПодряда Или РассчитыватьНачисления;

	РассчитыватьВзносы = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ВзносыИмя <> Неопределено;
	ЗаполнятьПогашениеЗаймов = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Имена временных таблиц для последующего сбора физических лиц.
	ИменаВТ = Новый Массив;

	Если МногопотоковоеЗаполнение Тогда 
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.МногопотоковоеЗаполнениеДокументов") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("МногопотоковоеЗаполнениеДокументов");
			Модуль.СформироватьВременныеТаблицыСотрудников(ИменаВТ, МенеджерВременныхТаблиц, Сотрудники, СотрудникиДополнительныйДоход);
		КонецЕсли;
	КонецЕсли;

	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	ЗамерВыявленияСотрудников = ОценкаПроизводительности.НачатьЗамерВремени();
	Если Сотрудники = Неопределено Тогда
		ПараметрыСотрудников = ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
		ПараметрыСотрудников.ОкончаниеПериода = ОкончаниеПериода;
		ПараметрыСотрудников.ЗаполнятьНачисленияПоТрудовымДоговорам = ЗаполнятьНачисленияПоТрудовымДоговорам;
		ПараметрыСотрудников.ЗаполнятьНачисленияПоДоговорамПодряда = Не РасчетПервойПоловиныМесяца;
		ПараметрыСотрудников.ИспользоватьВоеннуюСлужбу = ИспользоватьВоеннуюСлужбу;
		ПараметрыСотрудников.НачислениеЗарплатыВоеннослужащим = НачислениеЗарплатыВоеннослужащим;
		ПараметрыСотрудников.РежимДоначисления = ОписаниеДокумента.РежимДоначисления;
		ПараметрыСотрудников.СотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет;
		ПараметрыСотрудников.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ПараметрыСотрудников.РасчетПервойПоловиныМесяца = РасчетПервойПоловиныМесяца;

		Сотрудники = СотрудникиДляНачисленияЗарплаты(Организация, Подразделение, МесяцНачисления, ПараметрыСотрудников);

		ИменаВТ.Добавить("ВТВсеСотрудникиОрганизации");

		// Для сотрудников, уже не работающих, но, возможно, имевших доход в выбранном периоде.
		Если ЗаполнятьНачисленияПоТрудовымДоговорам Тогда
			СотрудникиДополнительныйДоход = СотрудникиДополнительныйДоход(
			Организация,
			Подразделение,
			МесяцНачисления,
			ПараметрыСотрудников,
			Сотрудники,
			РассчитыватьНДФЛ,
			РассчитыватьВзносы);

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиДополнительныйДоход);
		КонецЕсли;

		Если НачислениеЗарплатыВоеннослужащим И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
			СотрудникиНеудовлетворенныеДенежнымДовольствием = Модуль.СотрудникиНеудовлетворенныеДенежнымДовольствием(
			Организация,
			Подразделение,
			МесяцНачисления);

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиНеудовлетворенныеДенежнымДовольствием, Истина);
		КонецЕсли;

		Если Сотрудники.Количество() = 0 Тогда 
			Возврат ДанныеЗаполнения;
		КонецЕсли;

	КонецЕсли;
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("НачислениеЗарплаты.ВыявлениеСотрудников", ЗамерВыявленияСотрудников);

	МенеджерРасчета = СоздатьМенеджерРасчета(МесяцНачисления, Организация);
	МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;

	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = РассчитыватьНачисления;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьДоговорыПодряда = ЗаполнятьНачисленияПоДоговорамПодряда;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = РассчитыватьУдержания;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = РассчитыватьНДФЛ;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы = РассчитыватьВзносы;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьЗаймы = ЗаполнятьПогашениеЗаймов;
	#Вставка
	//1АБ Беляев 08.03.2021 + 
	МенеджерРасчета.НастройкиНачислений.ИспользоватьНеТиповойРасчетНочных=ИспользоватьНеТиповойРасчетНочных;
	МенеджерРасчета.НастройкиНачислений.ИспользоватьНеТиповойРасчетПраздничных=ИспользоватьНеТиповойРасчетПраздничных;
	//1АБ Беляев 08.03.2021 -
	#КонецВставки

	МенеджерРасчета.НастройкиРасчета.ПерваяПоловинаМесяца = РасчетПервойПоловиныМесяца;
	МенеджерРасчета.НастройкиРасчета.ОкончательныйРасчет = РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет;

	МенеджерРасчета.НастройкиРасчета.Сотрудники = Сотрудники;

	МенеджерРасчета.НастройкиНачислений.РассчитыватьНачисления = ЕстьНачисления Или ЕстьНачисленияПерерасчет;
	МенеджерРасчета.НастройкиНачислений.РассчитыватьПособия = ЕстьПособия Или ЕстьПособияПерерасчет;
	МенеджерРасчета.НастройкиНачислений.РассчитыватьЛьготы = ЕстьЛьготы;

	МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = РасчетПервойПоловиныМесяца
	Или Не ЗаполнятьНачисленияПоТрудовымДоговорам;

	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиНДФЛ.ДатаВыплаты = ДатаВыплаты;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = ОкончательныйРасчетНДФЛ;
	Если РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет
		И Не ОписаниеДокумента.РежимДоначисления Тогда

		МенеджерРасчета.НастройкиНДФЛ.ЗасчитыватьДанныеАвансов = Истина;
	КонецЕсли;
	
	#Вставка
	//1АБ Самойленко +
	НеПредоставлятьВычеты = Ложь;	
	Если ДополнительныеПараметры.Свойство("НеПредоставлятьВычеты", НеПредоставлятьВычеты) Тогда
		Если НеПредоставлятьВычеты Тогда
			МенеджерРасчета.НастройкиНДФЛ.АБ_НеПредоставлятьВычеты = Истина;
		Иначе
			МенеджерРасчета.НастройкиНДФЛ.АБ_НеПредоставлятьВычеты = Ложь;
		КонецЕсли;
	Иначе
		МенеджерРасчета.НастройкиНДФЛ.АБ_НеПредоставлятьВычеты = Ложь;
	КонецЕсли;
	//1АБ Самойленко -
	#КонецВставки
	МенеджерРасчета.НастройкиЗаймов.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиЗаймов.ДатаПогашения = КонецМесяца(МесяцНачисления);

	МенеджерРасчета.НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД = ПроверятьРегистрациюПроцентаЕНВД;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриИнициализацииМенеджераРасчетаДляЗаполненияНачисленияЗарплаты(МенеджерРасчета, ДополнительныеПараметры);
	КонецЕсли;

	СотрудникиДляНачислений = МенеджерРасчета.ТаблицаСотрудников();

	РассчитыватьУдержанияПерерасчет = Ложь;
	СотрудникиДляУдержаний = МенеджерРасчета.ТаблицаСотрудников();

	// Сотрудники перерасчета.
	Если ЗаполнятьПерерасчеты Тогда

		ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаПустаяСтруктура();
		Если ЕстьНачисленияПерерасчет Тогда
			ДанныеПерерасчета.НачисленияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
		КонецЕсли;
		Если ЕстьПособияПерерасчет Тогда
			ДанныеПерерасчета.ПособияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
		КонецЕсли;
		ДанныеПерерасчета.ТаблицаСотрудников = СотрудникиДляНачислений;
		ДанныеПерерасчета.ТаблицаУдержаний = МенеджерРасчета.ТаблицаСотрудников();

		Если ЕстьНачисленияПерерасчет Или ЕстьПособияПерерасчет Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
				Модуль.ДополнитьПустуюСтруктуруДанныхПерерасчета(ДанныеПерерасчета, МенеджерРасчета.ТаблицаНачислений());
			КонецЕсли;

			ПерерасчетЗарплаты.ЗаполнитьДанныеПерерасчета(
			ДанныеПерерасчета, 
			Организация, 
			Подразделение, 
			МесяцНачисления, 
			Сотрудники, 
			СотрудникиПериодДействияПерерасчет, 
			ДокументСсылка, 
			ОписаниеДокумента.РежимДоначисления,
			МенеджерРасчета);
		ИначеЕсли ЕстьУдержанияПерерасчет Тогда

			ПерерасчетЗарплаты.РегистрацияПерерасчетовПоПредварительнымДанным(,Организация);
			ПерерасчетЗарплаты.УстановитьОтборыПерерасчетовУдержаний(
			ДанныеПерерасчета,
			МенеджерРасчета,
			Организация,
			Подразделение,
			Сотрудники,
			СотрудникиПериодДействияПерерасчет,
			МесяцНачисления,
			ОписаниеДокумента.РежимДоначисления);
		КонецЕсли;

		Если НачислениеЗарплатыВоеннослужащим И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
			Модуль.ЗаполнитьБезусловноСоответствуетКадровымДанным(ДанныеПерерасчета.ТаблицаСотрудников);
		КонецЕсли;

		Если ДанныеПерерасчета.ТаблицаУдержаний.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ТаблицаУдержаний, СотрудникиДляУдержаний);
			РассчитыватьУдержанияПерерасчет = Истина;
		КонецЕсли;

		МассивСотрудниковДляУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиДляНачислений, "Сотрудник", Истина);
		Для Каждого Сотрудник Из МассивСотрудниковДляУдержаний Цикл
			НоваяСтрока = СотрудникиДляУдержаний.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.ДатаНачала = МесяцНачисления;
			НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
		КонецЦикла;

		ДанныеЗаполнения.СотрудникиПерерасчет = ДанныеПерерасчета.СотрудникиПерерасчет;
	КонецЕсли;

	// Сотрудники начислений (и удержаний, и договоров).
	Если ЕстьНачисления Или ЕстьПособия Или ЕстьЛьготы
		Или РассчитыватьУдержания Или РассчитыватьУдержанияПерерасчет
		Или ЗаполнятьНачисленияПоДоговорамПодряда Тогда

		Для Каждого Сотрудник Из Сотрудники Цикл
			Если СотрудникиНеудовлетворенныеДенежнымДовольствием <> Неопределено
				И СотрудникиНеудовлетворенныеДенежнымДовольствием.Найти(Сотрудник) <> Неопределено Тогда

				БезусловноСоответствуетКадровымДанным = Истина;
			Иначе
				БезусловноСоответствуетКадровымДанным = Ложь;
			КонецЕсли;

			Если ЕстьНачисления Или ЕстьПособия Или ЕстьЛьготы Или ЗаполнятьНачисленияПоДоговорамПодряда Тогда 
				НоваяСтрока = СотрудникиДляНачислений.Добавить();
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ДатаНачала = МесяцНачисления;
				НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
				НоваяСтрока.БезусловноСоответствуетКадровымДанным = БезусловноСоответствуетКадровымДанным;
			КонецЕсли;

			Если ЕстьУдержания Тогда
				НоваяСтрока = СотрудникиДляУдержаний.Добавить();
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ДатаНачала = МесяцНачисления;
				НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
				НоваяСтрока.БезусловноСоответствуетКадровымДанным = БезусловноСоответствуетКадровымДанным;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ОтборМенеджераРасчета = МенеджерРасчета.СоздатьОтборы();
	ОтборМенеджераРасчета.Подразделение = Подразделение;
	МенеджерРасчета.ЗаполнитьНачислениеЗарплаты(СотрудникиДляНачислений, ОтборМенеджераРасчета, СотрудникиДляУдержаний);

	Если ЗаполнятьПерерасчеты
		И (ЕстьНачисленияПерерасчет Или ЕстьПособияПерерасчет) Тогда

		// Добавляем в менеджер сторно строки.
		Если ЕстьНачисленияПерерасчет Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.НачисленияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
		КонецЕсли;
		Если ЕстьПособияПерерасчет Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ПособияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
		КонецЕсли;
	КонецЕсли;

	МенеджерРасчета.РассчитатьЗарплату();

	ДанныеЗаполнения.Начисления = МенеджерРасчета.Зарплата.Начисления;
	ДанныеЗаполнения.НачисленияПоДоговорам = МенеджерРасчета.Зарплата.ДоговорыПодряда;
	ДанныеЗаполнения.Удержания = МенеджерРасчета.Зарплата.Удержания;
	ДанныеЗаполнения.НДФЛ = МенеджерРасчета.Зарплата.НДФЛ;
	ДанныеЗаполнения.ПогашениеЗаймов = МенеджерРасчета.Зарплата.ПогашениеЗаймов;
	ДанныеЗаполнения.Взносы = МенеджерРасчета.Зарплата.Взносы;
	ДанныеЗаполнения.КорректировкиВыплаты = МенеджерРасчета.Зарплата.КорректировкиВыплаты;

	Если МногопотоковоеЗаполнение Тогда 
		ПоместитьВоВременноеХранилище(ДанныеЗаполнения, АдресХранилища);
	КонецЕсли;

	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("НачислениеЗарплаты.ПодготовкаДанныхЗаполненияДокумента", ЗамерПодготовкаДанныхЗаполненияДокумента);

	Возврат ДанныеЗаполнения;

КонецФункции

#КонецОбласти

