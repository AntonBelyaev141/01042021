&НаСервере
Перем АдресСхемы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораРегистра();
	СпособЗакрытияРегистраНакопления = ВидДвиженияНакопления.Расход;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораРегистра()
	
	Элементы.РегистрОстатков.СписокВыбора.Очистить();
	
	Для Каждого МетаданныеРегистр Из Метаданные.РегистрыНакопления Цикл
		Если НЕ ПравоДоступа("Чтение", МетаданныеРегистр) Тогда
			Продолжить;
		КонецЕсли;
		Если МетаданныеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки  Тогда
			Элементы.РегистрОстатков.СписокВыбора.Добавить(МетаданныеРегистр.Имя, МетаданныеРегистр.Представление());			
		КонецЕсли;
	КонецЦикла;
	
	Объект.ДатаКонца = ТекущаяДата();
			
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаПоРегиструНакопления(ИмяРегистра)
	
	// формируем базовый запрос
	ТекстЗапроса = "";
	ПерваяСтрока = Истина;
	
	РегистрНакопления = Метаданные.РегистрыНакопления[ИмяРегистра];
	Для Каждого Измерение ИЗ РегистрНакопления.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + ?(НЕ ПерваяСтрока, "," + Символы.ВК,"ВЫБРАТЬ ") + Измерение.Имя;
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;			
		КонецЕсли; 
	КонецЦикла;
	
	Для Каждого Ресурс ИЗ РегистрНакопления.Ресурсы Цикл
		ТекстЗапроса = ТекстЗапроса + "," + Символы.ВК + Ресурс.Имя + "Остаток КАК " + Ресурс.Имя;
	КонецЦикла ;
	
	ТекстЗапроса = ТекстЗапроса+" ИЗ РегистрНакопления." + ИмяРегистра + ".Остатки ";
	
	//// отборы по измерениям в виртуальной таблице остатков
	//ПерваяСтрока = Истина;
	//Для Каждого Измерение ИЗ РегистрНакопления.Измерения Цикл
	//	ТекстЗапроса = ТекстЗапроса + ?(ПерваяСтрока, "{",  ", ") + Измерение.Имя + ".*";
	//	ПерваяСтрока = Ложь;
	//КонецЦикла;
	//
	//ТекстЗапроса = ТекстЗапроса + ? (ПерваяСтрока,"","}") + ") КАК " + ИмяРегистра;
	//
	//// добавляем отборы по ресурсам
	//ПерваяСтрока = Истина;
	//Для Каждого Ресурс ИЗ РегистрНакопления.Ресурсы Цикл
	//	ТекстЗапроса = ТекстЗапроса + ?(ПерваяСтрока, "{ГДЕ ",  ", ") + Ресурс.Имя + "Остаток";
	//	ПерваяСтрока = Ложь;
	//КонецЦикла;
	
	//ТекстЗапроса = ТекстЗапроса + ? (ПерваяСтрока,"","}");
	
	ТекстЗапроса = ТекстЗапроса + " КАК " + ИмяРегистра;
	
	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПолейРегистра(ИмяРегистра)
	
	СтруктураПолей = Новый Структура;
	РегистрНакопления = Метаданные.РегистрыНакопления[ИмяРегистра];
	
	Для Каждого Измерение ИЗ РегистрНакопления.Измерения Цикл
		СтруктураПолей.Вставить(Измерение.Имя, Измерение.Тип);
	КонецЦикла;
	
	Для Каждого Ресурс ИЗ РегистрНакопления.Ресурсы Цикл
		СтруктураПолей.Вставить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;                         	
	
	Возврат СтруктураПолей;
	
КонецФункции

&НаСервере
Функция ПолучитьСхемуКомпоновкиДанныхПоТекстуЗапроса(ТекстЗапроса)

    СхемаКомпоновки = Новый СхемаКомпоновкиДанных();
    
    Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
    Источник.Имя = "Источник1";
    Источник.СтрокаСоединения="";
    Источник.ТипИсточникаДанных = "local";
    
    НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
    НаборДанных.Запрос = ТекстЗапроса;
    НаборДанных.Имя = "Запрос";
    НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
    НаборДанных.ИсточникДанных = "Источник1";
	
	// параметры
    ДобавитьПараметрПериодВСхему(СхемаКомпоновки);
	ДобавитьГруппировкуВСхему(СхемаКомпоновки);
	ДобавитьОтборВСхему(СхемаКомпоновки);	
	
    Возврат СхемаКомпоновки;

КонецФункции

&НаСервере
Процедура ДобавитьОтборВСхему(СхемаКомпоновки)
	
	Для Каждого ЭлементОтбора Из Объект.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		НовыйЭлементОтбора = СхемаКомпоновки.ВариантыНастроек.Основной.Настройки.Отбор.Элементы.Добавить(ТипЗнч(ЭлементОтбора));
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
	КонецЦикла;                                                     		
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппировкуВСхему(СхемаКомпоновки)
	
	ГруппировкаСхемы = СхемаКомпоновки.ВариантыНастроек.Основной.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаСхемы.Использование = Истина;
	СтруктураПолей = ПолучитьСтруктуруПолейРегистра(РегистрОстатков);
	Для Каждого ПолеРегистра Из СтруктураПолей Цикл
		ВыбранноеПоле = ГруппировкаСхемы.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеРегистра.Ключ);
		ВыбранноеПоле.Использование = Истина;		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрПериодВСхему(СхемаКомпоновки)
	
	ПараметрПериод = СхемаКомпоновки.Параметры.Найти("Период");
	Если ПараметрПериод = Неопределено Тогда 
		ПараметрПериод = СхемаКомпоновки.Параметры.Добавить();
		ПараметрПериод.Имя 			= "Период";
		ПараметрПериод.Заголовок 	= "Период";
	КонецЕсли;	
	ПараметрПериод.Использование 	= ИспользованиеПараметраКомпоновкиДанных.Авто;
	ПараметрПериод.ТипЗначения 	= Новый ОписаниеТипов("Дата");
	ПараметрПериод.Значение		= КонецДня(Объект.ДатаКонца);
	ПараметрПериод.ВключатьВДоступныеПоля = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиКомпоновщика()
	
	ТекстЗапроса = ПолучитьТекстЗапросаПоРегиструНакопления(РегистрОстатков);
	СхемаКомпоновкиДанных = ПолучитьСхемуКомпоновкиДанныхПоТекстуЗапроса(ТекстЗапроса);
	Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки;
 	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных); 	
    Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
    Объект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Объект.КомпоновщикНастроек.РазвернутьАвтоПоля();

КонецПроцедуры	
	
&НаКлиенте
Процедура РегистрОстатковПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(РегистрОстатков) Тогда 
		
		Объект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		ЗаполнитьНастройкиКомпоновщика();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДвижений(ВыводВФорму = Истина)
	
	ТекстЗапроса = ПолучитьТекстЗапросаПоРегиструНакопления(РегистрОстатков);
	СхемаКомпоновкиДанных = ПолучитьСхемуКомпоновкиДанныхПоТекстуЗапроса(ТекстЗапроса);
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// в табличный документ
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
               
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТабличныйДокумент = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// в таблицу значений
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,СхемаКомпоновкиДанных.НастройкиПоУмолчанию,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ТаблицаВывода = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаВывода);
	ТаблицаВывода = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаВывода);
	Возврат АдресТаблицы;
	
КонецФункции

&НаКлиенте
Процедура СформироватьДвижения(Команда)
	
	АдресТаблицы = ПолучитьТаблицуДвижений();
	ЗаполнитьНастройкиКомпоновщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКорректировкуЗаписейРегистра(Команда)
	
	ФормаКорректировки = Неопределено;
	
	Если ЕстьДокумент("ПереносДанных") Тогда 
		ФормаКорректировки = ПолучитьФорму("Документ.ПереносДанных.ФормаОбъекта");
	ИначеЕсли ЕстьДокумент("КорректировкаРегистров") Тогда 	
	    ФормаКорректировки = ПолучитьФорму("Документ.КорректировкаРегистров.ФормаОбъекта");
	ИначеЕсли ЕстьДокумент("КорректировкаРегистровНакопления") Тогда 	
	    ФормаКорректировки = ПолучитьФорму("Документ.КорректировкаРегистровНакопления.ФормаОбъекта");
	КонецЕсли;
	
	Если ФормаКорректировки = Неопределено Тогда
		Сообщить("В конфигурации не обнаружено документов корректировки регистров и переноса данных");
		Возврат;		
	КонецЕсли;
	
	НовыйОбъект = ФормаКорректировки.Объект;                     	
	Результат = ЗаполнитьНовыйДокументКорректировки(НовыйОбъект);
	
	Если НЕ ПустаяСтрока(Результат) Тогда 
		СообщениеОбОшибке = Новый СообщениеПользователю;
		СообщениеОбОшибке.Текст = Результат;
		СообщениеОбОшибке.Сообщить();
		Возврат;
	КонецЕсли;                                                    	
	КопироватьДанныеФормы(НовыйОбъект, ФормаКорректировки.Объект);
	//ФормаКорректировки.ПоказатьРегистры();
	ФормаКорректировки.Открыть();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНовыйДокументКорректировки(ОбъектЗаполнения)
	
	АдресТаблицы = ПолучитьТаблицуДвижений(Ложь);
	ТаблицаДвижений = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ТаблицаДвижений.Количество()=0 Тогда 
		Возврат "Отсутствуют данные для создания документа.";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособЗакрытияРегистраНакопления) Тогда
		Возврат "Не указан спопособ закрытия регистров накопления!";		
	КонецЕсли;
		
	ОбъектЗаполнения.Дата = КонецДня(Объект.ДатаКонца) ;
	ОбъектЗаполнения.Комментарий = "Закрытие регистров накопления на " + Формат(Объект.ДатаКонца,"ДЛФ=D");
	ОбъектЗаполнения.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	РегистрНакопления = Метаданные.РегистрыНакопления[РегистрОстатков];
	НоваяСтрока = ОбъектЗаполнения.ТаблицаРегистров.Добавить();
	НоваяСтрока.Имя = РегистрНакопления.Имя;
	//НоваяСтрока.Представление = РегистрНакопления.Представление();
	
	НаборТекущегоОбъекта = ОбъектЗаполнения.Движения[РегистрНакопления.Имя];
		
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		НоваяЗапись = НаборТекущегоОбъекта.Добавить();
		НоваяЗапись.Активность  = Истина;
		НоваяЗапись.ВидДвижения = СпособЗакрытияРегистраНакопления;
		НоваяЗапись.Период      = КонецДня(Объект.ДатаКонца);
		
		Для каждого Измерение Из РегистрНакопления.Измерения Цикл
			НоваяЗапись[Измерение.Имя] = СтрокаТаблицы[Измерение.Имя];
		КонецЦикла; 
		
		Для каждого Ресурс Из РегистрНакопления.Ресурсы Цикл
			//+
			Если Ресурс.Имя<>"СуммаСПревышения" Тогда
			//-	
				НоваяЗапись[Ресурс.Имя] = ? (СпособЗакрытияРегистраНакопления = ВидДвиженияНакопления.Приход, - СтрокаТаблицы[Ресурс.Имя], СтрокаТаблицы[Ресурс.Имя]);
			//+	
			КонецЕсли;
			//-
		КонецЦикла; 
		
			//+
		 	НоваяЗапись["ВариантУдержания"]=Перечисления.ВариантыУдержанияНДФЛ.Удержано;
			НоваяЗапись["СрокПеречисления"]=Перечисления.СрокиПеречисляемогоНалога.ПрочиеДоходы;
			НоваяЗапись["КрайнийСрокУплаты"]=Дата(2020,12,31,23,59,59);
			//-

		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция ЕстьДокумент(ИмяДокумента)
	
	Если Метаданные.Документы.Найти(ИмяДокумента) = Неопределено Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
		
КонецФункции

#Область АльтернативнаяРеализация
&НаСервере
Процедура СформироватьДвиженияАльтернативноНаСервере()
	//1 - очищаем ТЗ
	Объект.ТабДвижений.Очистить();
	
	//2 - формируем новую
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода КАК КатегорияДохода,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация КАК Организация,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.УдалитьКодДохода КАК УдалитьКодДохода,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода КАК КодДохода,
	             |	СУММА(ВЫБОР
	             |			КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	             |				ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма
	             |			ИНАЧЕ РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма * -1
	             |		КОНЕЦ) КАК Сумма,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК ДокументОснование
	             |ИЗ
	             |	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	             |ГДЕ
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период < &КонецТекущегоГода
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КодДохода,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.УдалитьКодДохода,
	             |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование";
	Запрос.УстановитьПараметр("КонецТекущегоГода",КонецГода(КонецДня(Объект.ДатаКонца_2)+1));
	Результат=Запрос.Выполнить().Выгрузить();
	
	ПромежуточнаяТЗ=Объект.ТабДвижений.Выгрузить();
	Для Каждого Строка Из Результат Цикл
		НовСтрока=ПромежуточнаяТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,Строка,"ГоловнаяОрганизация,РегистрацияВНалоговомОргане,КодДохода,Организация,СтавкаНалогообложенияРезидента,МесяцНалоговогоПериода,КатегорияДохода,ФизическоеЛицо,УдалитьКодДохода,ДокументОснование,Сумма");
		НовСтрока.ВариантУдержания=Перечисления.ВариантыУдержанияНДФЛ.Удержано;
		НовСтрока.СрокПеречисления=Перечисления.СрокиПеречисляемогоНалога.ПрочиеДоходы;
		НовСтрока.КрайнийСрокУплаты=КонецМесяца(Объект.ДатаКонца_2);
	КонецЦикла;
	
	//3 - Загружаем обратно
	Объект.ТабДвижений.Загрузить(ПромежуточнаяТЗ);


КонецПроцедуры

&НаКлиенте
Процедура СформироватьДвиженияАльтернативно(Команда)
	СформироватьДвиженияАльтернативноНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументАльтернативноНаСервере()
	ПереносДанных_2=Объект.ПереносДанных;
	НаборЗаписей=РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПереносДанных_2);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	ПромежуточнаяТЗ=Объект.ТабДвижений.Выгрузить();
	Для Каждого Строка Из ПромежуточнаяТЗ Цикл
		Если Строка.Сумма<>0 Тогда
		НоваяСтрока=НаборЗаписей.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка,"ГоловнаяОрганизация,ФизическоеЛицо,СтавкаНалогообложенияРезидента,МесяцНалоговогоПериода,КатегорияДохода,РегистрацияВНалоговомОргане,Организация,УдалитьКодДохода,КодДохода,Сумма,ДокументОснование,ВариантУдержания,СрокПеречисления,КрайнийСрокУплаты");
		НоваяСтрока.Регистратор=ПереносДанных_2;
		НоваяСтрока.Период=КонецМесяца(Объект.ДатаКонца_2)-86400;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Сообщить("Набор записей не удалось записать по документу: " + Объект.ПереносДанных);
	КонецПопытки;
		
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументАльтернативно(Команда)
	СформироватьДокументАльтернативноНаСервере();
КонецПроцедуры
#КонецОбласти