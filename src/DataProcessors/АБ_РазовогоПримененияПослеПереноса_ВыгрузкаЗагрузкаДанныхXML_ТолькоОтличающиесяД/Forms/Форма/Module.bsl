
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВерсиюИРежимСовместимостиПлатформы();
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ОбъектНаСервере.Инициализация();
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаНастройкиКонсолиЗапросов" Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаВыгрузкиПриИзменении(Элемент)
	
	Файл = Новый Файл(ИмяФайлаВыгрузки);
	Объект.ИспользоватьФорматFastInfoSet = (Файл.Расширение = ".fi");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, "ИмяФайлаВыгрузки", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораФайла(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФорматFastInfoSetПриИзменении(Элемент)
	
	Если Объект.ИспользоватьФорматFastInfoSet Тогда
		ИмяФайлаВыгрузки = СтрЗаменить(ИмяФайлаВыгрузки, ".xml", ".fi");
	Иначе
		ИмяФайлаВыгрузки = СтрЗаменить(ИмяФайлаВыгрузки, ".fi", ".xml");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаРежимПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	РежимВыгрузки = (Элементы.ГруппаРежим.ТекущаяСтраница = Элементы.ГруппаРежим.ПодчиненныеЭлементы.ГруппаВыгрузка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОбъектыДляВыгрузкиПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Объект) Тогда
		
		Элемент.ТекущиеДанные.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(Элемент.ТекущиеДанные.Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, "ИмяФайлаЗагрузки", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораФайла(СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоМетаданных

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.Выгружать = 2 Тогда
		ТекущиеДанные.Выгружать = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Выгружать");
	УстановитьПометкиРодителей(ТекущиеДанные, "Выгружать");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхВыгружатьПриНеобходимостиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМетаданных.ТекущиеДанные;
	
	Если ТекущиеДанные.ВыгружатьПриНеобходимости = 2 Тогда
		ТекущиеДанные.ВыгружатьПриНеобходимости = 0;
	КонецЕсли;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	УстановитьПометкиРодителей(ТекущиеДанные, "ВыгружатьПриНеобходимости");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеОбъектыДляВыгрузки

&НаКлиенте
Процедура ДополнительныеОбъектыДляВыгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Элемент.ТекущийЭлемент.ОграничениеТипа = ТипОбъектовДляВыгрузки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзЗапроса(Команда)
	
	ОткрытьФорму(ИмяФормыКонсолиЗапросов(),ПараметрыКонсолиЗапросов(),ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДополнительныеОбъектыВыгрузки(Команда)
	
	Объект.ДополнительныеОбъектыДляВыгрузки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	Объект.ДатаНачала = ПериодВыгрузки.ДатаНачала;
	Объект.ДатаОкончания = ПериодВыгрузки.ДатаОкончания;
	
	ОчиститьСообщения();
	
	Если Не РежимРаботыНаКлиенте Тогда
		
		Если ПустаяСтрока(ИмяФайлаВыгрузки) Тогда
			
			ТекстСообщения = Нстр("ru = 'Поле ""Имя файла"" не заполнено'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаВыгрузки");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Состояние(Нстр("ru = 'Выполняется выгрузка данных. Пожалуйста, подождите...'"));
	
	АдресФайлаВоВременномХранилище = "";
	ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище);
	
	Если РежимРаботыНаКлиенте И Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
		
		ИмяФайла = ?(Объект.ИспользоватьФорматFastInfoSet, Нстр("ru = 'Файл выгрузки.fi'"), Нстр("ru = 'Файл выгрузки.xml'"));
		ПолучитьФайл(АдресФайлаВоВременномХранилище, ИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ОчиститьСообщения();
	АдресФайлаВоВременномХранилище = "";
	
	Если РежимРаботыНаКлиенте Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище,Нстр("ru = 'Файл выгрузки'"),, УникальныйИдентификатор);
		
	Иначе
		
		Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
			
			ТекстСообщения = Нстр("ru = 'Поле ""Имя файла"" не заполнено'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаЗагрузки");
			Возврат;
			
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайлаЗагрузки);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = Нстр("ru = 'Файл не существует'");
			СообщитьПользователю(ТекстСообщения, "ИмяФайлаЗагрузки");
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьДанныеЗавершение(Истина, АдресФайлаВоВременномХранилище, ИмяФайлаЗагрузки, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКонсолиЗапросов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантИспользованияКонсолиЗапросов", ВариантИспользованияКонсолиЗапросов);
	ПараметрыФормы.Вставить("ПутьКВнешнейКонсолиЗапросов", ПутьКВнешнейКонсолиЗапросов);
	
	ОткрытьФорму(ИмяФормыНастроекКонсолиЗапросов(), ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВыгружаемыеПоСсылке(Команда)
	
	Состояние(Нстр("ru = 'Выполняется поиск объектов метаданных, которые могут быть выгружены по ссылкам...'"));
	СохранитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	ПересчитатьВыгружаемыеПоСсылкеНаСервере();
	ВосстановитьОтображениеДерева(Объект.ДеревоМетаданных.ПолучитьЭлементы());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИмяФормыКонсолиЗапросов()
	
	Если ВариантИспользованияКонсолиЗапросов = 0 Тогда
		
		Обработка = РеквизитФормыВЗначение("Объект");
		ИдентификаторФормы = ".Форма.ВыборИзЗапроса";
		
	ИначеЕсли ВариантИспользованияКонсолиЗапросов = 1 Тогда
		
		Обработка = Обработки["КонсольЗапросов"].Создать();
		ИдентификаторФормы = ".Форма";
		
	Иначе //ВариантИспользованияКонсолиЗапросов = 2
		
		Обработка = ВнешниеОбработки.Создать(ПутьКВнешнейКонсолиЗапросов);
		ИдентификаторФормы = ".ФормаОбъекта";
		
	КонецЕсли;
	
	Возврат Обработка.Метаданные().ПолноеИмя() + ИдентификаторФормы;
	
КонецФункции

&НаСервере
Функция ИмяФормыНастроекКонсолиЗапросов()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ИмяФормыНастроек = Обработка.Метаданные().ПолноеИмя() + ".Форма.НастройкиКонсолиЗапросов";
	
	Возврат ИмяФормыНастроек;
	
КонецФункции

&НаКлиенте
Функция ПараметрыКонсолиЗапросов()
	
	ПараметрыФормы = Новый Структура;
	
	Если ВариантИспользованияКонсолиЗапросов = 0 Тогда
		
		ПараметрыФормы.Вставить("ВариантИспользованияКонсолиЗапросов", ВариантИспользованияКонсолиЗапросов);
		ПараметрыФормы.Вставить("ПутьКВнешнейКонсолиЗапросов", ПутьКВнешнейКонсолиЗапросов);
		
	Иначе
		
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Выбор данных для выгрузки'"));
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВПриложении(Элемент, ПутьКДанным, СтандартнаяОбработка)

	Файл = Новый Файл(Элемент.ТекстРедактирования);
	
	Если Файл.Существует() Тогда
		
		ЗапуститьПриложение(Элемент.ТекстРедактирования);
		
	Иначе
		
		СообщитьПользователю(Нстр("ru = 'Файл не найден'"), ПутьКДанным);
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаРаботы()
	
	РежимРаботыНаКлиенте = (РежимРаботыНаКлиентеИлиНаСервере = 0);
	
	Элементы.ИмяФайлаВыгрузки.Доступность = Не РежимРаботыНаКлиенте;
	Элементы.ИмяФайлаЗагрузки.Доступность = Не РежимРаботыНаКлиенте;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораФайла(СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РежимДиалога = ?(РежимВыгрузки, РежимДиалогаВыбораФайла.Сохранение, РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Не РежимВыгрузки;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = Нстр("ru = 'Задайте имя файла выгрузки'");
	ДиалогВыбораФайла.ПолноеИмяФайла = ?(РежимВыгрузки, ИмяФайлаВыгрузки, ИмяФайлаЗагрузки);
	
	ДиалогВыбораФайла.Фильтр = "Формат выгрузки(*.xml)|*.xml|FastInfoSet (*.fi)|*.fi|Все файлы (*.*)|*.*";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Если РежимВыгрузки Тогда
			ИмяФайлаВыгрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		Иначе
			ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище)
	
	Если РежимРаботыНаКлиенте Тогда
		
		Расширение = ?(Объект.ИспользоватьФорматFastInfoSet, ".fi", ".xml");
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		
	Иначе
		
		ИмяВременногоФайла = ИмяФайлаВыгрузки;
		
	КонецЕсли;
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	
	ОбъектНаСервере.ВыполнитьВыгрузку(ИмяВременногоФайла);
	
	Если РежимРаботыНаКлиенте Тогда
		
		Файл = Новый Файл(ИмяВременногоФайла);
		
		Если Файл.Существует() Тогда
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьПометкиВыгружаемыхДанных(СтрокиИсходногоДерева, СтрокиЗаменяемогоДерева)
	
	КолонкаВыгружать = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Выгружать");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружать, "Выгружать");
	
	КолонкаВыгружатьПриНеобходимости = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("ВыгружатьПриНеобходимости");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВыгружатьПриНеобходимости, "ВыгружатьПриНеобходимости");
	
	КолонкаРазвернут = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Развернут");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаРазвернут, "Развернут");
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		ИндексСтроки = СтрокиИсходногоДерева.Индекс(СтрокаИсходногоДерева);
		СтрокаИзменяемогоДерева = СтрокиЗаменяемогоДерева.Получить(ИндексСтроки);
		
		ПроставитьПометкиВыгружаемыхДанных(СтрокаИсходногоДерева.Строки, СтрокаИзменяемогоДерева.Строки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Состояние(Нстр("ru = 'Выполняется загрузка данных. Пожалуйста, подождите...'"));
		
		Файл = Новый Файл(ВыбранноеИмяФайла);
		Если Не Файл.Существует() Тогда
			
			ТекстСообщения = Нстр("ru = 'Указанный файл не существует'");
			ПутьКДанным = ?(РежимРаботыНаКлиенте, "", "ИмяФайлаЗагрузки");
			СообщитьПользователю(ТекстСообщения, ПутьКДанным);
			Возврат;
			
		КонецЕсли;
		
		ЗагрузитьДанныеНаСервере(Адрес, Файл.Расширение);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресФайлаВоВременномХранилище, Расширение)
	
	Если РежимРаботыНаКлиенте Тогда
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
	Иначе
		
		ИмяВременногоФайла = ИмяФайлаЗагрузки;
		
	КонецЕсли;
	
	РеквизитФормыВЗначение("Объект").ВыполнитьЗагрузку(ИмяВременногоФайла);
	
	Если РежимРаботыНаКлиенте Тогда
		
		Файл = Новый Файл(ИмяВременногоФайла);
		
		Если Файл.Существует() Тогда
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВыгружаемыеПоСсылкеНаСервере()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере);
	ОбъектНаСервере.СоставВыгрузки(Истина);
	ЗначениеВРеквизитФормы(ОбъектНаСервере.ДеревоМетаданных, "Объект.ДеревоМетаданных");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоМетаданныхНаСервере(ОбъектНаСервере)
	
	ДеревоМетаданных = РеквизитФормыВЗначение("Объект.ДеревоМетаданных");
	
	ОбъектНаСервере.Инициализация();
	
	ПроставитьПометкиВыгружаемыхДанных(ОбъектНаСервере.ДеревоМетаданных.Строки, ДеревоМетаданных.Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Строка.Развернут = Элементы.ДеревоМетаданных.Развернут(ИдентификаторСтроки);
		
		СохранитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОтображениеДерева(СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Если Строка.Развернут Тогда
			Элементы.ДеревоМетаданных.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
		
		ВосстановитьОтображениеДерева(Строка.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъектаПоТипуДляЗапроса(Ссылка)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ИмяМетаданных = МетаданныеОбъекта.Имя;
	
	ИмяДляЗапроса = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Документ";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовХарактеристик";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланСчетов";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланВидовРасчета";
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "ПланОбмена";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "БизнесПроцесс";
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		ИмяДляЗапроса = "Задача";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяДляЗапроса) Тогда
		Возврат "";
	Иначе
		Возврат ИмяДляЗапроса + "." + ИмяМетаданных;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранныеЗначения)
	
	Если ТипЗнч(ВыбранныеЗначения) = Тип("Структура") Тогда
		
		РезультатЗапроса = ПолучитьИзВременногоХранилища(ВыбранныеЗначения.ДанныеВыбора);
		
		Если ТипЗнч(РезультатЗапроса)=Тип("Массив") Тогда
			
			РезультатЗапроса = РезультатЗапроса[РезультатЗапроса.ВГраница()];
			
			Если РезультатЗапроса.Колонки.Найти("Ссылка") <> Неопределено Тогда
				ВыбранныеСсылки = РезультатЗапроса.Выгрузить();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВыбранныеСсылки = ВыбранныеЗначения;
		
	КонецЕсли;
	
	Для Каждого Значение Из ВыбранныеСсылки Цикл
		
		НоваяСтрока = Объект.ДополнительныеОбъектыДляВыгрузки.Добавить();
		НоваяСтрока.Объект = Значение.Ссылка;
		НоваяСтрока.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(Значение.Ссылка);
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаНаКлиентеИлиНаСервереПриИзменении(Элемент)
	
	ПриИзмененииРежимаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНаКлиентеИлиНаСервереПриИзменении(Элемент)
	
	ПриИзмененииРежимаРаботы();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВерсиюИРежимСовместимостиПлатформы()
	
	Информация = Новый СистемнаяИнформация;
	Если Не (Лев(Информация.ВерсияПриложения, 3) = "8.3"
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
		Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_2_16"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_1"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_2"]))) Тогда
		
		ВызватьИсключение Нстр("ru = 'Обработка предназначена для запуска на версии платформы
			|1С:Предприятие 8.3 с отключенным режимом совместимости или выше'");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область ПолучитьДокументы
&НаСервере
Процедура ПолучитьДокументыНаСервере()
	СтруктураОбъектовДляПодключения=ВыполнитьПодключаниеНаСервере();
	ОбъектПодключения=СтруктураОбъектовДляПодключения.V83_База;
	МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	ИмяВТ="ВТДокументы";
	Для Каждого Документ Из Метаданные.Документы Цикл
		ДокументИмя=Документ.ПолноеИмя();
		Для Каждого Реквизит Из Документ.Реквизиты Цикл
			ДокументИмя2=СтрЗаменить(ДокументИмя,"Документ.","Документы.");
			МенеджерДокумента=Вычислить(ДокументИмя2);
			ПустаяСсылкаДокумента=МенеджерДокумента.ПустаяСсылка();
			Если ТипЗнч(ПустаяСсылкаДокумента[Реквизит.Имя])=Тип("СправочникСсылка.Организации") Тогда
				РеквизитИмя=Реквизит.Имя;
				Исходная_Таблица_Источник=ПустаяТаблицаДляОбработкиДанных_Источник_Документы();
				Исходная_Таблица_Источник=ПолучитьДанныеИзИсточника_Документы(ОбъектПодключения,Исходная_Таблица_Источник,ДокументИмя);
				Исходная_Таблица_Приемник=ПолучитьДанныеИзПриемника_Документы(ДокументИмя,РеквизитИмя);
				ТаблицаРазностейДокументов=СравнитьДваДокумента(Исходная_Таблица_Источник,Исходная_Таблица_Приемник,ДокументИмя);
				Если ТаблицаРазностейДокументов.Количество()>0 Тогда
				ЗарплатаКадры_СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц,ТаблицаРазностейДокументов,ИмяВТ);
				КонецЕсли;
				Прервать;
			Иначе
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ВыполнитьОтключение(СтруктураОбъектовДляПодключения);
	Если ЗарплатаКадры_ВТСуществует(МенеджерВременныхТаблиц,ИмяВТ) Тогда
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	             |	ВТДокументы.Ссылка_Приемник КАК Ссылка
	             |ИЗ
	             |	ВТДокументы КАК ВТДокументы";
	РезультирующаяТаблицаЗначений=Запрос.Выполнить().Выгрузить();
	//ТабДок=ВывестиДокументыНаПечать(РезультирующаяТаблицаЗначений);
	Иначе
	КвС=Новый КвалификаторыСтроки(250);
	РезультирующаяТаблицаЗначений=Новый ТаблицаЗначений;
	РезультирующаяТаблицаЗначений.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("ДокументСсылка.НачислениеЗарплаты"));
	
	//ТабДок=ВывестиДокументыНаПечать(РезультирующаяТаблицаЗначений);			 
	КонецЕсли;
	
	Для Каждого Значение Из РезультирующаяТаблицаЗначений Цикл
		
		НоваяСтрока = Объект.ДополнительныеОбъектыДляВыгрузки.Добавить();
		НоваяСтрока.Объект = Значение.Ссылка;
		НоваяСтрока.ИмяОбъектаДляЗапроса = ИмяОбъектаПоТипуДляЗапроса(Значение.Ссылка);
		
	КонецЦикла;
	

	//Возврат ТабДок;
	
	
КонецПроцедуры


&НаСервере
Функция ПустаяТаблицаДляОбработкиДанных_Источник_Документы()
	КвС=Новый КвалификаторыСтроки(250);
	ТаблицаЗначений=Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Ссылка_Источник");
	ТаблицаЗначений.Колонки.Добавить("Ссылка_Источник_Строка",Новый ОписаниеТипов("Строка",,,,КвС));
	Возврат ТаблицаЗначений;
КонецФункции

&НаСервере
Функция ПолучитьДанныеИзИсточника_Документы(ОбъектПодключения,Исходная_ТЗ_Источник,ИскомыйТип)
	Text="ВЫБРАТЬ
	|	ВыбранныйРегистр.Ссылка КАК Ссылка_Источник
	|ИЗ
	|	# КАК ВыбранныйРегистр";
	Query=ОбъектПодключения.NewObject("Запрос");
	Text=StrReplace(Text,"#",ИскомыйТип);
	Query.Text=Text;
	Result=Query.Execute();
	Choose=Result.Choose();
	
	
	While Choose.Next() Цикл
		НоваяСтрока=Исходная_ТЗ_Источник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Choose);
		НоваяСтрока.Ссылка_Источник_Строка=ОбъектПодключения.XMLString(Choose.Ссылка_Источник);
	КонецЦикла;
	Возврат Исходная_ТЗ_Источник;
КонецФункции

&НаСервере
Функция ПолучитьДанныеИзПриемника_Документы(ИскомыйТип,ИмяРеквизита)
	Текст="ВЫБРАТЬ
	|	ВыбранныйРегистр.Ссылка КАК Ссылка_Приемник
	|ИЗ
	|	# КАК ВыбранныйРегистр
	|ГДЕ
	|	ВыбранныйРегистр."+ИмяРеквизита+ "= &Организация";
	Запрос=Новый Запрос;
	Текст=СтрЗаменить(Текст,"#",ИскомыйТип);
	Запрос.Текст=Текст;
	Запрос.УстановитьПараметр("Организация",Объект.ОрганизацияКОтбору);
	Результат=Запрос.Выполнить();
	Выборка=Результат.Выбрать();
	
	Промежуточная_ТЗ=Новый ТаблицаЗначений;
	КвС=Новый КвалификаторыСтроки(250);
	МассивНужногоТипа=Новый Массив;
	ИскомыйТип2=СтрЗаменить(ИскомыйТип,"Документ.","ДокументСсылка.");
	ИскомыйТип3=Тип(ИскомыйТип2);
	МассивНужногоТипа.Добавить(ИскомыйТип3);
	ОпределениеТипа_Здесь=Новый ОписаниеТипов(МассивНужногоТипа);
	Промежуточная_ТЗ.Колонки.Добавить("Ссылка_Приемник",ОпределениеТипа_Здесь);
	Промежуточная_ТЗ.Колонки.Добавить("Ссылка_Приемник_Строка",Новый ОписаниеТипов("Строка",,,,КвС));
	Пока Выборка.Следующий() Цикл
		НоваяСтрока=Промежуточная_ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.Ссылка_Приемник_Строка=XMLСтрока(НоваяСтрока.Ссылка_Приемник);
	КонецЦикла;
	Возврат Промежуточная_ТЗ;
КонецФункции

&НаСервере
Функция СравнитьДваДокумента(Исходная_Таблица_Источник,Исходная_Таблица_Приемник,ДокументИмя)
	Исходная_Таблица_Источник.Индексы.Добавить("Ссылка_Источник_Строка");
	ТаблицаРазностейДокументов=Исходная_Таблица_Приемник.СкопироватьКолонки();
	Для Каждого Строка_Исходная_Таблица_Приемник Из Исходная_Таблица_Приемник Цикл
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("Ссылка_Источник_Строка",Строка_Исходная_Таблица_Приемник.Ссылка_Приемник_Строка);
		МассивСтрок=Исходная_Таблица_Источник.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество()>0 Тогда
			Продолжить;
		Иначе
			НовыйДокументCтрока=ТаблицаРазностейДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйДокументCтрока,Строка_Исходная_Таблица_Приемник);
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаРазностейДокументов;
КонецФункции

&НаСервере
// Создает временную таблицу по таблице значений
//
// Параметры
//	МенеджерВременныхТаблиц
//	НаборЗаписей
//	Замещать - если Истина, то таблица будет создана вместо обнаруженной в менеджере ВТ с таким же именем, если Ложь, то будет объединена с ней.
//	ИмяВТ
//
&НаСервере
Процедура ЗарплатаКадры_СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаЗначений, ИмяВТ, Замещать = Ложь) Экспорт
	
	ИменаКолонок = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗначений.Колонки, "Имя");
	ЗарплатаКадры_СоздатьВТПоТаблицеИменамПолей(МенеджерВременныхТаблиц, ИмяВТ, ТаблицаЗначений, ИменаКолонок, Замещать);
	
КонецПроцедуры

&НаСервере
Процедура ЗарплатаКадры_СоздатьВТПоТаблицеИменамПолей(МенеджерВременныхТаблиц, ИмяВТ, Таблица, ИменаПолейМассив, Замещать = Ложь, ПоляПараметры = Неопределено)
	
	Если ПоляПараметры = Неопределено Тогда
		ПоляПараметры = Новый Структура;
	КонецЕсли;
	
	ИменаПолейСтрока = "";
	Для Каждого ИмяПоля Из ИменаПолейМассив Цикл
		Если Не ПустаяСтрока(ИменаПолейСтрока) Тогда
			ИменаПолейСтрока = ИменаПолейСтрока + ", ";
		КонецЕсли;
		ИменаПолейСтрока = ИменаПолейСтрока + "ИмяТаблицы." + ИмяПоля;
	КонецЦикла;
	
	Объединять = Ложь;
	Если ЗарплатаКадры_ВТСуществует(МенеджерВременныхТаблиц, ИмяВТ) Тогда
		// Если такая таблица уже есть, то нужно пересоздать ее дополнением.
		Объединять = Не Замещать;
		Если Замещать Тогда
			// Если установлено требование замещать, то удаляем таблицу прежде
			ЗарплатаКадры_УничтожитьВТ(МенеджерВременныхТаблиц, ИмяВТ);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИмяТаблицы", Таблица);
	
	Если Не Объединять Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолейСтрока
		|ПОМЕСТИТЬ ВТИмяВТ
		|ИЗ
		|	&ИмяТаблицы КАК ИмяТаблицы";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаПолейСтрока", ИменаПолейСтрока);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИмяВТ", ИмяВТ);
		Для Каждого КлючИЗначение Из ПоляПараметры Цикл
			ИмяПараметра = КлючИЗначение.Ключ;
			ЗначениеПараметра = КлючИЗначение.Значение;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы." + ИмяПараметра, "&" + ИмяПараметра + " КАК " + ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
		КонецЦикла;
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ИменаПолейСтрока
	|ПОМЕСТИТЬ ВТПрежняя
	|ИЗ
	|	ВТИмяВТ КАК ИмяТаблицы";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаПолейСтрока", ИменаПолейСтрока);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИмяВТ", ИмяВТ);
	Запрос.Выполнить();
	
	ЗарплатаКадры_УничтожитьВТ(МенеджерВременныхТаблиц, ИмяВТ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ИменаПолейСтрока
	|ПОМЕСТИТЬ ВТТаблицаЗначений
	|ИЗ
	|	&ИмяТаблицы КАК ИмяТаблицы";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаПолейСтрока", ИменаПолейСтрока);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ИменаПолейСтрока
	|ПОМЕСТИТЬ ВТИмяВТ
	|ИЗ
	|	ВТТаблицаЗначений КАК ИмяТаблицы";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаПолейСтрока", ИменаПолейСтрока);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИмяВТ", ИмяВТ);
	Для Каждого КлючИЗначение Из ПоляПараметры Цикл
		ИмяПараметра = КлючИЗначение.Ключ;
		ЗначениеПараметра = КлючИЗначение.Значение;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы." + ИмяПараметра, "&" + ИмяПараметра + " КАК " + ИмяПараметра);
		Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ИменаПолейСтрока
	|ИЗ
	|	ВТПрежняя КАК ИмяТаблицы";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаПолейСтрока", ИменаПолейСтрока);
	Запрос.Выполнить();
	
	ЗарплатаКадры_УничтожитьВТ(МенеджерВременныхТаблиц, "ВТТаблицаЗначений");
	ЗарплатаКадры_УничтожитьВТ(МенеджерВременныхТаблиц, "ВТПрежняя");
	
КонецПроцедуры

&НаСервере
// Ищет по имени временную таблицу в менеджере
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	ИменаВТ                 - Строка - имя таблицы для поиска.
//
// Возвращаемое значение:
//	Булево
//
Функция ЗарплатаКадры_ВТСуществует(МенеджерВременныхТаблиц, ИмяВТ) Экспорт
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВТ) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Индекс(МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВТ)) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
// Уничтожает указанные временные таблицы
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	ИменаВТ                 - Массив, Строка - список уничтожаемых таблиц или имя одной таблицы
//	ПроверятьНаличие        - Булево - признак игнорирования отсутствия таблицы с указанным именем
//	                                   Истина - ничего не произойдет
//	                                   Ложь    - возникнет ошибка.
//
Процедура ЗарплатаКадры_УничтожитьВТ(МенеджерВременныхТаблиц, Знач ИменаВТ, ПроверятьНаличие = Ложь) Экспорт
	
	Если ТипЗнч(ИменаВТ) <> Тип("Массив") Тогда
		ИменаВТ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИменаВТ);
	КонецЕсли;
	
	ТекстЗапроса = "";
	Для Каждого ИмяВТ Из ИменаВТ Цикл
		Если ПроверятьНаличие Тогда
			Если Не ЗарплатаКадры_ВТСуществует(МенеджерВременныхТаблиц, ИмяВТ) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса + ";";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "УНИЧТОЖИТЬ " + ИмяВТ;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

//&НаСервере
//Функция ВывестиДокументыНаПечать(РезультирующаяТаблицаЗначений)
//	ТабДок=Новый ТабличныйДокумент;
//	лОбъект=РеквизитФормыВЗначение("Объект");
//	ТекМакет=лОбъект.ПолучитьМакет("ТаблицаРазностейДокументов");
//	ОбластьШапка=ТекМакет.ПолучитьОбласть("ОбластьШапка");
//	ТабДок.Вывести(ОбластьШапка);
//	Для Каждого Строка Из РезультирующаяТаблицаЗначений Цикл
//		ОбластьСтрока=ТекМакет.ПолучитьОбласть("ОбластьСтрока");
//		ОбластьСтрока.Параметры.Заполнить(Строка);
//		ТабДок.Вывести(ОбластьСтрока);
//	КонецЦикла;
//	Возврат ТабДок;
//КонецФункции

&НаКлиенте
Процедура ПолучитьДокументы(Команда)
	ПолучитьДокументыНаСервере();
	//ТабДок.Записать(Объект.ПутьККаталогу+"\01.xlsx",ТипФайлаТабличногоДокумента.XLSX);
КонецПроцедуры
#КонецОбласти

#Область УстановкаПодключения
&НаСервере
Функция ВыполнитьПодключаниеНаСервере()
	//0. Подключение
	СтруктураПодключения=СформироватьСтруктуруПодключения();
	СтруктураПроверки=ПроверитьДостаточностьСтруктурыДляПодключения(СтруктураПодключения);
	Если СтруктураПроверки.Отказ=Истина Тогда
		Сообщить(СтруктураПроверки.ТекстСообщения);
		Возврат Неопределено;
	Иначе
	КонецЕсли;
	
	Если СерверныйВариант Тогда
		CтрокаПодключения="Srvr = "+""""+СтруктураПодключения.ИмяСервераДляПодключения+""""+";"+"Ref = "+""""+СтруктураПодключения.ИмяИнформационнойБазыНаСервереДляПодключения+""""+";";
		Если НЕ СтруктураПодключения.ИмяПользователяНаСервереДляПодключения="" Тогда
			CтрокаПодключения=CтрокаПодключения+"Usr = " +""""+СтруктураПодключения.ИмяПользователяНаСервереДляПодключения + """" + ";";
			Если НЕ СтруктураПодключения.ПарольПользователяНаСервереДляПодключения="" Тогда
				CтрокаПодключения=CтрокаПодключения+"Pwd = "+""""+СтруктураПодключения.ПарольПользователяНаСервереДляПодключения+""""+";";
			Иначе
			КонецЕсли;
		Иначе
		КонецЕсли;
	Иначе
		CтрокаПодключения="File = "+""""+СтруктураПодключения.ИмяКаталогаИнформационнойБазы+""""+";";
		Если НЕ СтруктураПодключения.ИмяПользователяДляПодключения="" Тогда
			CтрокаПодключения=CтрокаПодключения+"Usr = "+""""+СтруктураПодключения.ИмяПользователяДляПодключения+""""+";";
			Если НЕ СтруктураПодключения.ПарольПользователяДляПодключения="" Тогда
				CтрокаПодключения=CтрокаПодключения+"Pwd = "+""""+СтруктураПодключения.ПарольПользователяДляПодключения+""""+";";
			Иначе
			КонецЕсли;
		Иначе
		КонецЕсли;
	КонецЕсли;
	ЗаписьЖурналаРегистрации("ОбновлениеИБ",,,,CтрокаПодключения);
	Попытка
		V83_Подключение=Новый COMОбъект("V83.ComConnector");
		V83_База=V83_Подключение.Connect(CтрокаПодключения);
		Сообщить("Подключение установлено");
		СтруктураОбъектовДляПодключения=Новый Структура("V83_Подключение,V83_База",V83_Подключение,V83_База);
		Возврат СтруктураОбъектовДляПодключения;
	Исключение
		V83_База=Неопределено;
		V83_Подключение=Неопределено;	
		Сообщить("Не удалось установить подключение");
		Сообщить(ОписаниеОшибки());
		СтруктураОбъектовДляПодключения=Новый Структура("V83_Подключение,V83_База",V83_Подключение,V83_База);
		Возврат СтруктураОбъектовДляПодключения;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПодключения()
	СтруктураПодключения=Новый Структура;
	СтруктураПодключения.Вставить("СерверныйВариант",СерверныйВариант);
	СтруктураПодключения.Вставить("ИмяКаталогаИнформационнойБазы", ИмяКаталогаИнформационнойБазы);
	СтруктураПодключения.Вставить("ИмяИнформационнойБазыНаСервереДляПодключения",ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Вставить("ИмяСервераДляПодключения",ИмяСервераДляПодключения);
	СтруктураПодключения.Вставить("ИмяПользователяДляПодключения",ИмяПользователяДляПодключения);
	СтруктураПодключения.Вставить("ПарольПользователяДляПодключения",ПарольПользователяДляПодключения);
	СтруктураПодключения.Вставить("ИмяПользователяНаСервереДляПодключения",ИмяПользователяНаСервереДляПодключения);
	СтруктураПодключения.Вставить("ПарольПользователяНаСервереДляПодключения",ПарольПользователяНаСервереДляПодключения);
	Возврат СтруктураПодключения;
КонецФункции

&НаСервере
Функция ПроверитьДостаточностьСтруктурыДляПодключения(СтруктураДляПодключения)
	СтруктураПроверки=Новый Структура;
	СтруктураПроверки.Вставить("Отказ",Ложь);
	СтруктураПроверки.Вставить("ТекстСообщения","");
	Если СтруктураДляПодключения.СерверныйВариант Тогда
		Если СтруктураДляПодключения.ИмяСервераДляПодключения="" Тогда
			СтруктураПроверки.Отказ=Истина;
			СтруктураПроверки.ТекстСообщения="Не задано имя сервера для подключения";
			Возврат СтруктураПроверки;
		ИначеЕсли СтруктураДляПодключения.ИмяИнформационнойБазыНаСервереДляПодключения="" Тогда
			СтруктураПроверки.Отказ=Истина;
			СтруктураПроверки.ТекстСообщения="Не задано имя информационной базы на сервере для подключения";
			Возврат СтруктураПроверки;			
		КонецЕсли;
	Иначе
		Если СтруктураДляПодключения.ИмяКаталогаИнформационнойБазы="" Тогда
			СтруктураПроверки.Отказ=Истина;
			СтруктураПроверки.ТекстСообщения="Не задано имя каталога базы";
			Возврат СтруктураПроверки;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПроверки;
КонецФункции
&НаСервере
Процедура ВыполнитьОтключение(СтруктураОбъектовДляПодключения)
	СтруктураОбъектовДляПодключения.V83_База=Неопределено;
	СтруктураОбъектовДляПодключения.V83_Подключение=Неопределено;
КонецПроцедуры
#КонецОбласти


