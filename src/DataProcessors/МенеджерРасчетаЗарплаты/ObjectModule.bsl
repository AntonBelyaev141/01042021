
#Область АБ_Доработка1_ПромежуточныеФункции_От_ГрафическогоИнтерфейса_До_ФункцииПолученияНужногоЗначения_5
&После("Инициализировать")
Процедура АБ_Инициализировать(ПериодРасчетаПараметр, ОрганизацияПараметр) Экспорт
	//1АБ Беляев 08.03.2021 + 
	НастройкиНачислений.Вставить("ИспользоватьНеТиповойРасчетНочных",Ложь);
	НастройкиНачислений.Вставить("ИспользоватьНеТиповойРасчетПраздничных",Ложь);
	//1АБ Беляев 08.03.2021 -
		
	//1АБ Беляев 14.03.2021 +
	НастройкиНДФЛ.Вставить("АБ_НеПредоставлятьВычеты",Ложь);
	//1АБ Беляев 14.03.2021 -
КонецПроцедуры
#КонецОбласти

#Область АБ_Доработка1_ПромежуточныеФункции_От_ГрафическогоИнтерфейса_До_ФункцииПолученияНужногоЗначения_6
&ИзменениеИКонтроль("ПоказателиСотрудников")
Функция АБ_ПоказателиСотрудников()
	Если КэшПоказателиСотрудников <> Неопределено Тогда
	Возврат КэшПоказателиСотрудников;
	КонецЕсли;
	
	ДополнительныеПоказатели = ДополнительныеПоказатели();
	
	ТаблицаПоказателейСотрудникаШаблон = Новый ТаблицаЗначений;
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Территория", Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("ДокументОснование");
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("УчитыватьДокументОснование", Новый ОписаниеТипов("Булево"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаПоказателейСотрудникаШаблон.Колонки.Добавить("ПолучатьДанныеНаНачалоМесяца", Новый ОписаниеТипов("Булево"));
	
	ТребованияНачислений = ТребованияНачисленийТаблица();
	ПоказателиНачислений = ПоказателиНачислений();
	
	ИзвестныеПоказатели = ИзвестныеПоказателиНачислений();
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ИзвестныеПоказатели, "Показатель, ИдентификаторСтроки");
	СтруктураПоискаИзвестных = Новый Структура("Показатель, ИдентификаторСтроки");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ОпределяющиеПоказатели, "Сотрудник, Организация, Показатель, Дата");
	СтруктураПоискаОпределяющих = Новый Структура("Сотрудник, Организация, Показатель, Дата");
	
	ПоказательДоляНеполногоВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени");
	
	СтоимостьЧасаПоказатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса");
	СтоимостьДняПоказатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня");
	СтоимостьДняЧасаПоказатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса");
	
	ПоказателиСтоимостиДняЧаса = Новый Соответствие;
	ПоказателиСтоимостиДняЧаса.Вставить(СтоимостьЧасаПоказатель, Истина);
	ПоказателиСтоимостиДняЧаса.Вставить(СтоимостьДняПоказатель, Истина);
	ПоказателиСтоимостиДняЧаса.Вставить(СтоимостьДняЧасаПоказатель, Истина);
	
	РазмерПособияДоТрехЛет = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерПособияПоУходуЗаРебенкомДоТрехЛет");
	ПроцентСевернойНадбавкиПоказатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка");
	РайонныйКоэффициентРФ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициентРФ");
	
	ПроцентДоплатыЗаНочные = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВНочноеВремя");
	ПроцентДоплатыЗаВечерние = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВВечернееВремя");
	#Вставка
	//1АБ Беляев 08.03.2021 + 
	ПроцентДоплатыЗаПраздничные=Справочники.ПоказателиРасчетаЗарплаты.НайтиПоНаименованию("ПроцентДоплатыЗаРаботуВПраздники");
	//1АБ Беляев 08.03.2021 -
	#КонецВставки
	
	ПроцентДоплатыЗаНочныеВоеннослужащим = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВНочноеВремяВоеннослужащим");
	ПроцентДоплатыЗаВечерниеВоеннослужащим = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВВечернееВремяВоеннослужащим");
	
	ПоказателиРазмерДоплатыВВечернееНочноеВремя = Новый Соответствие;
	ПоказателиРазмерДоплатыВВечернееНочноеВремя.Вставить(ПроцентДоплатыЗаНочные, Истина);
	ПоказателиРазмерДоплатыВВечернееНочноеВремя.Вставить(ПроцентДоплатыЗаВечерние, Истина);
	ПоказателиРазмерДоплатыВВечернееНочноеВремя.Вставить(ПроцентДоплатыЗаНочныеВоеннослужащим, Истина);
	ПоказателиРазмерДоплатыВВечернееНочноеВремя.Вставить(ПроцентДоплатыЗаВечерниеВоеннослужащим, Истина);
	
	БазовыйТарифГруппы = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.БазовыйТарифГруппы");
	
	СреднийЗаработокОбщий = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	
	ОписаниеСтажевыхПоказателейНачислений = ОписаниеСтажевыхПоказателейНачислений();
	
	ПоказателиСтоимостьЧасаДняТаблица = ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки();
	ПоказателиСтоимостьЧасаДняТаблица.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	#Вставка
	//1АБ Беляев 08.03.2021 + 
	ПоказателиСтоимостьЧасаДняТаблица.Колонки.Добавить("ИспользоватьНеТиповойРасчетНочных", Новый ОписаниеТипов("Булево"));
	ПоказателиСтоимостьЧасаДняТаблица.Колонки.Добавить("ИспользоватьНеТиповойРасчетПраздничных", Новый ОписаниеТипов("Булево"));
	//1АБ Беляев 08.03.2021 -
	#КонецВставки
	
	ПоказателиСотрудников = Новый Структура;
	ПоказателиСотрудников.Вставить("ПериодическиеПоказателиСотрудников", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПериодическиеПоказателиПодразделений", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПериодическиеПоказателиОрганизаций", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("РазовыеПоказателиСотрудников", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("РазовыеПоказателиПодразделений", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("РазовыеПоказателиОрганизаций", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиДоляНеполногоВремени", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиСтоимостьЧасаДня", ПоказателиСтоимостьЧасаДняТаблица);
	ПоказателиСотрудников.Вставить("СтажевыеПоказатели", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиРазмерПособияПоУходуЗаРебенком", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиПроцентСевернойНадбавки", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиРайонныйКоэффициентРФ", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиРазмерДоплатыВВечернееНочноеВремя", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ПоказателиБазовыйТарифГруппы", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.Вставить("ДополнительныеПоказатели", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	
	ПоказателиСотрудников.ДополнительныеПоказатели.Колонки.Удалить("ДокументОснование");
	ПоказателиСотрудников.ДополнительныеПоказатели.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ПоказателиСотрудников.ДополнительныеПоказатели.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	
	ПоказателиСотрудников.Вставить("ИзвестныеПоказатели", ТаблицаПоказателейСотрудникаШаблон.СкопироватьКолонки());
	ПоказателиСотрудников.ИзвестныеПоказатели.Колонки.Добавить("СтрокаТаблицыРасчета");
	
	Для Каждого ТекущаяСтрокаНачислений Из Начисления Цикл
	СтруктураПоискаИзвестных.ИдентификаторСтроки = ТекущаяСтрокаНачислений.ИдентификаторСтроки;
	ЗаполнитьЗначенияСвойств(СтруктураПоискаОпределяющих, ТекущаяСтрокаНачислений);
	СтруктураПоискаОпределяющих.Дата = НачалоМесяца(ТекущаяСтрокаНачислений.ДатаНачала);
	ПоказателиТекущегоНачисления = ПоказателиНачислений[ТекущаяСтрокаНачислений.Начисление];
	
	Если ПоказателиТекущегоНачисления = Неопределено
	Или ТекущаяСтрокаНачислений.ФиксЗаполнение Тогда
	
	Продолжить;
	КонецЕсли;
	
	Для Каждого ТекущийПоказатель Из ПоказателиТекущегоНачисления Цикл
	СтруктураПоискаИзвестных.Показатель = ТекущийПоказатель.Показатель;
	СтруктураПоискаОпределяющих.Показатель = ТекущийПоказатель.Показатель;
	ЗначенияИзвестныхПоказателей = ИзвестныеПоказатели.НайтиСтроки(СтруктураПоискаИзвестных);
	ЗначенияОпределяющихПоказателей = ОпределяющиеПоказатели.НайтиСтроки(СтруктураПоискаОпределяющих);
	
	ПолучатьДанныеНаНачалоМесяца = Ложь;
	ПолучатьДанныеНаНачало = Ложь;
	Если ЗначенияИзвестныхПоказателей.Количество() > 0 Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ИзвестныеПоказатели.Добавить();
	СтрокаТаблицПоказателей.Значение = ЗначенияИзвестныхПоказателей[0].Значение;
	СтрокаТаблицПоказателей.СтрокаТаблицыРасчета = ТекущаяСтрокаНачислений;
	ИначеЕсли ЗначенияОпределяющихПоказателей.Количество() > 0 Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ИзвестныеПоказатели.Добавить();
	СтрокаТаблицПоказателей.Значение = ЗначенияОпределяющихПоказателей[0].Значение;
	СтрокаТаблицПоказателей.СтрокаТаблицыРасчета = ТекущаяСтрокаНачислений;
	ИначеЕсли ТекущийПоказатель.Показатель = СреднийЗаработокОбщий
	И ЗначениеЗаполнено(ТекущаяСтрокаНачислений.ДокументОснование) Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПериодическиеПоказателиСотрудников.Добавить();
	
	СтрокаТаблицПоказателей.УчитыватьДокументОснование = Истина;
	ИначеЕсли ДополнительныеПоказатели.Найти(ТекущийПоказатель.Показатель) <> Неопределено Тогда
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ДополнительныеПоказатели.Добавить();
	ИначеЕсли ТекущийПоказатель.Показатель = ПоказательДоляНеполногоВремени Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиДоляНеполногоВремени.Добавить();
	
	ИначеЕсли ПоказателиСтоимостиДняЧаса[ТекущийПоказатель.Показатель] = Истина Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиСтоимостьЧасаДня.Добавить();
	ПолучатьДанныеНаНачало = Истина;
	#Вставка
				//1АБ Беляев 08.03.2021 + 
				АБ_ПризнакСоответствия=Ложь;
				Для Каждого АБ_ПоказательМассива Из ПоказателиТекущегоНачисления Цикл
					Если АБ_ПоказательМассива.Показатель=ПроцентДоплатыЗаНочные Тогда
						Если НастройкиНачислений.Свойство("ИспользоватьНеТиповойРасчетНочных") Тогда
							СтрокаТаблицПоказателей.ИспользоватьНеТиповойРасчетНочных=НастройкиНачислений.ИспользоватьНеТиповойРасчетНочных;
						Иначе
							СтрокаТаблицПоказателей.ИспользоватьНеТиповойРасчетНочных=Ложь;
						КонецЕсли;
						СтрокаТаблицПоказателей.ИспользоватьНеТиповойРасчетПраздничных=Ложь;
						АБ_ПризнакСоответствия=Истина;
						Прервать;
					ИначеЕсли АБ_ПоказательМассива.Показатель=ПроцентДоплатыЗаПраздничные Тогда
						СтрокаТаблицПоказателей.ИспользоватьНеТиповойРасчетНочных=Ложь;
						Если НастройкиНачислений.Свойство("ИспользоватьНеТиповойРасчетПраздничных") Тогда
							СтрокаТаблицПоказателей.ИспользоватьНеТиповойРасчетПраздничных=НастройкиНачислений.ИспользоватьНеТиповойРасчетПраздничных;
						Иначе
							СтрокаТаблицПоказателей.ИспользоватьНеТиповойРасчетПраздничных=Ложь;
						КонецЕсли;
						АБ_ПризнакСоответствия=Истина;
						Прервать;
					Иначе
					Продолжить;
					КонецЕсли;
				КонецЦикла;
				
				//1АБ Беляев + 04.07.2021
				
				Если АБ_ПризнакСоответствия = Истина И (СтрокаТаблицПоказателей.ИспользоватьНеТиповойРасчетНочных Или СтрокаТаблицПоказателей.ИспользоватьНеТиповойРасчетПраздничных)  Тогда
						ТекущаяСтрокаНачислений.ВремяВЧасах = Истина;
				КонецЕсли;
				//1АБ Беляев - 04.07.2021
				
				Если АБ_ПризнакСоответствия = Ложь Тогда
					СтрокаТаблицПоказателей.ИспользоватьНеТиповойРасчетНочных=Ложь;
					СтрокаТаблицПоказателей.ИспользоватьНеТиповойРасчетПраздничных=Ложь;
				КонецЕсли;
				//1АБ Беляев 08.03.2021 -
				#КонецВставки
	
	ИначеЕсли ОписаниеСтажевыхПоказателейНачислений[ТекущийПоказатель.Показатель] <> Неопределено Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.СтажевыеПоказатели.Добавить();
	
	ИначеЕсли ТекущийПоказатель.Показатель = РазмерПособияДоТрехЛет Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиРазмерПособияПоУходуЗаРебенком.Добавить();
	ПолучатьДанныеНаНачалоМесяца = Истина;
	
	ИначеЕсли ТекущийПоказатель.Показатель = ПроцентСевернойНадбавкиПоказатель Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиПроцентСевернойНадбавки.Добавить();
	
	ИначеЕсли ТекущийПоказатель.Показатель = РайонныйКоэффициентРФ Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиРайонныйКоэффициентРФ.Добавить();
	
	ИначеЕсли ПоказателиРазмерДоплатыВВечернееНочноеВремя[ТекущийПоказатель.Показатель] = Истина Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиРазмерДоплатыВВечернееНочноеВремя.Добавить();
	
	ИначеЕсли ТекущийПоказатель.Показатель = БазовыйТарифГруппы Тогда
	
	Если ТекущийПоказатель.ЗапрашиватьПриВводе Тогда
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПериодическиеПоказателиСотрудников.Добавить();
	Иначе
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПоказателиБазовыйТарифГруппы.Добавить();
	КонецЕсли;
	
	ИначеЕсли ТекущийПоказатель.ПериодическийПоказательСотрудника Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПериодическиеПоказателиСотрудников.Добавить();
	
	Если ТекущийПоказатель.ЗапрашиватьПриВводе Тогда
	СтрокаТаблицПоказателей.УчитыватьДокументОснование = Истина;
	КонецЕсли;
	
	ИначеЕсли ТекущийПоказатель.ПериодическийПоказательПодразделения Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПериодическиеПоказателиПодразделений.Добавить();
	
	ИначеЕсли ТекущийПоказатель.ПериодическийПоказательОрганизации Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.ПериодическиеПоказателиОрганизаций.Добавить();
	
	ИначеЕсли ТекущийПоказатель.РазовыйПоказательСотрудника Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.РазовыеПоказателиСотрудников.Добавить();
	ПолучатьДанныеНаНачалоМесяца = Истина;
	
	ИначеЕсли ТекущийПоказатель.РазовыйПоказательПодразделения Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.РазовыеПоказателиПодразделений.Добавить();
	ПолучатьДанныеНаНачалоМесяца = Истина;
	
	ИначеЕсли ТекущийПоказатель.РазовыйПоказательОрганизации Тогда
	
	СтрокаТаблицПоказателей = ПоказателиСотрудников.РазовыеПоказателиОрганизаций.Добавить();
	ПолучатьДанныеНаНачалоМесяца = Истина;
	
	Иначе
	Продолжить;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицПоказателей, ТекущаяСтрокаНачислений);
	СтрокаТаблицПоказателей.Показатель = ТекущийПоказатель.Показатель;
	
	Если ПолучатьДанныеНаНачало Тогда
	СтрокаТаблицПоказателей.Период = ТекущаяСтрокаНачислений.ДатаНачала;
	ИначеЕсли ПолучатьДанныеНаНачалоМесяца Тогда
	СтрокаТаблицПоказателей.Период = НачалоМесяца(ТекущаяСтрокаНачислений.ДатаНачала);
	СтрокаТаблицПоказателей.ПолучатьДанныеНаНачалоМесяца = Истина;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрокаНачислений.ПериодПолученияПоказателей) Тогда
	СтрокаТаблицПоказателей.Период = ТекущаяСтрокаНачислений.ПериодПолученияПоказателей;
	ИначеЕсли ТребованияНачислений[ТекущаяСтрокаНачислений.Начисление].ПолучатьДанныеНаНачало
	И ТребованияНачислений[ТекущаяСтрокаНачислений.Начисление].НачисляетсяВЦеломЗаМесяц Тогда
	
	СтрокаТаблицПоказателей.Период = НачалоМесяца(ТекущаяСтрокаНачислений.ДатаНачала);
	СтрокаТаблицПоказателей.ПолучатьДанныеНаНачалоМесяца = Истина;
	ИначеЕсли ТребованияНачислений[ТекущаяСтрокаНачислений.Начисление].ПолучатьДанныеНаНачало Тогда
	СтрокаТаблицПоказателей.Период = ТекущаяСтрокаНачислений.ДатаНачала;
	ИначеЕсли ТекущийПоказатель.СчитатьКакПремиюЗаДИДОНаНачалоМесяца Тогда
	СтрокаТаблицПоказателей.Период = НачалоМесяца(ТекущаяСтрокаНачислений.ДатаНачала);
	СтрокаТаблицПоказателей.ПолучатьДанныеНаНачалоМесяца = Истина;
	ИначеЕсли ТребованияНачислений[ТекущаяСтрокаНачислений.Начисление].НачисляетсяВЦеломЗаМесяц Тогда
	СтрокаТаблицПоказателей.Период = ТекущаяСтрокаНачислений.ДатаОкончания;
	Иначе
	СтрокаТаблицПоказателей.Период = ТекущаяСтрокаНачислений.ДатаНачала;
	КонецЕсли;
	КонецЦикла;
	КонецЦикла;
	
	КэшПоказателиСотрудников = ПоказателиСотрудников;
	
	ПоказателиСотрудников.ДополнительныеПоказатели.Колонки.Период.Имя = "ДатаНачала";
	
	Возврат ПоказателиСотрудников;
КонецФункции




&ИзменениеИКонтроль("СтруктураИсходныхДанныхДляРасчетаСтоимостиЧасаДня")
Функция АБ_СтруктураИсходныхДанныхДляРасчетаСтоимостиЧасаДня()
	СтруктураИсходныхДанных = Новый Структура;
	СтруктураИсходныхДанных.Вставить("ВидТарифнойСтавки");
	СтруктураИсходныхДанных.Вставить("ПорядокРасчета");
	СтруктураИсходныхДанных.Вставить("ГрафикПолногоВремени");
	СтруктураИсходныхДанных.Вставить("НормаДнейГрафикаМесяц");
	СтруктураИсходныхДанных.Вставить("НормаЧасовГрафикаМесяц");
	СтруктураИсходныхДанных.Вставить("НормаЧасовПолногоГрафикаМесяц");
	СтруктураИсходныхДанных.Вставить("НормаЧасовКалендаряМесяц");
	СтруктураИсходныхДанных.Вставить("НормаДнейКалендаряМесяц");
	СтруктураИсходныхДанных.Вставить("НормаЧасовКалендаряГод");
	#Вставка
	//1АБ Беляев 08.03.2021 + 
	СтруктураИсходныхДанных.Вставить("СреднегодовоеКоличествоЧасовДляНетиповыхНочных");
	СтруктураИсходныхДанных.Вставить("СреднегодовоеКоличествоЧасовДляНетиповыхПраздничных");
	//1АБ Беляев 08.03.2021 -
	#КонецВставки
	СтруктураИсходныхДанных.Вставить("НормаДнейКалендаряГод");
	СтруктураИсходныхДанных.Вставить("СовокупнаяТарифнаяСтавка");
	СтруктураИсходныхДанных.Вставить("УчетВремениВЧасах");
	СтруктураИсходныхДанных.Вставить("РасчетВремениВЧасах");
	СтруктураИсходныхДанных.Вставить("ЕстьПоказательДоляНеполногоРабочегоВремени");
	СтруктураИсходныхДанных.Вставить("ДоляНеполногоРабочегоВремени"); 
	СтруктураИсходныхДанных.Вставить("НеполныйРабочийДень"); 

	Возврат СтруктураИсходныхДанных;
КонецФункции

#КонецОбласти

#Область АБ_Доработка1_НепосредственноеДобавлениеФункционала_ФункцияПолученияНужногоЗначения_7
//1АБ Беляев 08.03.2021 + 
Процедура АБ_ЗаполнитьСреднегодовыеКоличестваЧасовНеТиповые(ИсходныеДанныеДляРасчета,ДатаНачала,РежимРасчета="")
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	АБ_СреднегодовыеКоличестваЧасовДляНеТиповогоРасчетаНочныхПраздничныхСрезПоследних.АБ_СреднегодовоеКоличествоЧасов КАК СреднегодовоеКоличествоЧасов
	             |ИЗ
	             |	РегистрСведений.АБ_СреднегодовыеКоличестваЧасовДляНетиповогоРасчетаНочныхПраздничных.СрезПоследних(КОНЕЦПЕРИОДА(&ДатаНачала, ДЕНЬ), АБ_ТипНормы = &ТипНормы) КАК АБ_СреднегодовыеКоличестваЧасовДляНеТиповогоРасчетаНочныхПраздничныхСрезПоследних";
	Если РежимРасчета="ЭтоНочные" Тогда
		ТипНормы=Перечисления.АБ_ТипыНорм.АБ_Ночные;		
	ИначеЕсли РежимРасчета="ЭтоПраздничные" Тогда
		ТипНормы=Перечисления.АБ_ТипыНорм.АБ_Праздничные;
	Иначе
		ИсходныеДанныеДляРасчета.СреднегодовоеКоличествоЧасовДляНетиповыхНочных=0;
		ИсходныеДанныеДляРасчета.СреднегодовоеКоличествоЧасовДляНеТиповыхПраздничных=0;
		Возврат;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("ТипНормы",ТипНормы);
	Результат=Запрос.Выполнить();
	Выборка=Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипНормы=Перечисления.АБ_ТипыНорм.АБ_Ночные Тогда
		ИсходныеДанныеДляРасчета.СреднегодовоеКоличествоЧасовДляНеТиповыхНочных=Выборка.СреднегодовоеКоличествоЧасов;
		ИсходныеДанныеДляРасчета.СреднегодовоеКоличествоЧасовДляНеТиповыхПраздничных=0;
		ИначеЕсли ТипНормы=Перечисления.АБ_ТипыНорм.АБ_Праздничные Тогда
		ИсходныеДанныеДляРасчета.СреднегодовоеКоличествоЧасовДляНеТиповыхНочных=0;
		ИсходныеДанныеДляРасчета.СреднегодовоеКоличествоЧасовДляНеТиповыхПраздничных=Выборка.СреднегодовоеКоличествоЧасов;
		КонецЕсли;
	Иначе
		ИсходныеДанныеДляРасчета.СреднегодовоеКоличествоЧасовДляНетиповыхНочных=0;
		ИсходныеДанныеДляРасчета.СреднегодовоеКоличествоЧасовДляНеТиповыхПраздничных=0;
	КонецЕсли;	
КонецПроцедуры
//1АБ Беляев 08.03.2021 -
&ИзменениеИКонтроль("РассчитатьЗначениеСтоимостиЧаса")
Функция АБ_РассчитатьЗначениеСтоимостиЧаса(Выборка)
	Значение = 0;

	// * Если показатель сотрудника - часовая ставка, значение не пересчитываем.
	Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
		Возврат Выборка.СовокупнаяТарифнаяСтавка;
	КонецЕсли;

	// * Если показатель сотрудника - дневная ставка, пересчитываем в часовую.
	Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
		Если Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
			Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовГрафикаМесяц * Выборка.НормаДнейГрафикаМесяц;
			КонецЕсли;
		ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
			Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовКалендаряМесяц * Выборка.НормаДнейКалендаряМесяц;
			КонецЕсли;
		ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
			Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
				Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовКалендаряГод * Выборка.НормаДнейКалендаряГод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// * Если показатель сотрудника - месячная ставка (оклад), пересчитываем в часовую.
	Если Выборка.ВидТарифнойСтавки <> Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда
		Возврат Значение;
	КонецЕсли;

	Если Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
		Если ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) Тогда 
			Если Выборка.УчетВремениВЧасах Тогда
				Если Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовПолногоГрафикаМесяц;
				КонецЕсли;
			Иначе 
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени И Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовПолногоГрафикаМесяц;
				ИначеЕсли Не Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени И Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовГрафикаМесяц;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
				Если Выборка.ЕстьПоказательДоляНеполногоРабочегоВремени Тогда
					Значение = Выборка.СовокупнаяТарифнаяСтавка * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаЧасовГрафикаМесяц;
				Иначе
					Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовГрафикаМесяц;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
		Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
			Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовКалендаряМесяц;
		КонецЕсли;
	ИначеЕсли Выборка.ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
		#Удаление
		Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
			Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовКалендаряГод * 12;
		КонецЕсли;
		#КонецУдаления
		#Вставка
		//1АБ Беляев 08.03.2021 +
		Если Выборка.СреднегодовоеКоличествоЧасовДляНетиповыхНочных<>0 Тогда
		Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.СреднегодовоеКоличествоЧасовДляНетиповыхНочных;
		ИначеЕсли Выборка.СреднегодовоеКоличествоЧасовДляНеТиповыхПраздничных<>0 Тогда
		Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.СреднегодовоеКоличествоЧасовДляНетиповыхПраздничных;
		ИначеЕсли Выборка.НормаЧасовКалендаряГод <> 0 Тогда 
		Значение = Выборка.СовокупнаяТарифнаяСтавка / Выборка.НормаЧасовКалендаряГод * 12;
		КонецЕсли;
		//1АБ Беляев 08.03.2021 -
		#КонецВставки
	КонецЕсли;

	Возврат Значение;
КонецФункции

&ИзменениеИКонтроль("РассчитатьЗначениеСтоимостиЧасаДня")
Функция АБ_РассчитатьЗначениеСтоимостиЧасаДня(Показатель, ИсходныеДанныеДляРасчета, ПоказателиСтоимости, ТочностьПоказателей)
	Значение = 0;
	Если НеобходимРасчетСтоимостиДня(Показатель, ИсходныеДанныеДляРасчета.ВидТарифнойСтавки, ИсходныеДанныеДляРасчета.РасчетВремениВЧасах, ПоказателиСтоимости) Тогда
		Значение = РассчитатьЗначениеСтоимостиДня(ИсходныеДанныеДляРасчета);	
	ИначеЕсли НеобходимРасчетСтоимостиЧаса(Показатель, ИсходныеДанныеДляРасчета.ВидТарифнойСтавки, ИсходныеДанныеДляРасчета.РасчетВремениВЧасах, ПоказателиСтоимости) Тогда
		Значение = РассчитатьЗначениеСтоимостиЧаса(ИсходныеДанныеДляРасчета);	
	Иначе
		Значение = ИсходныеДанныеДляРасчета.СовокупнаяТарифнаяСтавка		
	КонецЕсли;	

	#Удаление
	Значение = ОкруглитьЗначениеПоказателя(Значение, Показатель, ТочностьПоказателей);
	#КонецУдаления
	#Вставка
	//1АБ Беляев 08.03.2021 +
	Если (ИсходныеДанныеДляРасчета.СреднегодовоеКоличествоЧасовДляНеТиповыхНочных<>0) Или (ИсходныеДанныеДляРасчета.СреднегодовоеКоличествоЧасовДляНеТиповыхПраздничных<>0)  Тогда
	Значение = Окр(Значение,10);
	Иначе
	Значение = ОкруглитьЗначениеПоказателя(Значение, Показатель, ТочностьПоказателей);
	КонецЕсли;
	//1АБ Беляев 09.03.2021 - 
	#КонецВставки

	Возврат Значение;
КонецФункции






#КонецОбласти



#Область АБ_Доработка4_НеПредоставлятьВычеты
&ИзменениеИКонтроль("РезультатРасчетаНДФЛ")
Функция АБ_РезультатРасчетаНДФЛ()

	ИмяЗамера = "НачислениеЗарплаты.РасчетНДФЛ";
	Замер = НачатьЗамерВремени();

	Если РасчетОдногоМесяца Тогда
		НаборЗаписейДляРасчетаНДФЛ = НаборыЗаписей;
	Иначе
		НаборЗаписейДляРасчетаНДФЛ = ОбщегоНазначения.СкопироватьРекурсивно(НаборыЗаписей);

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборыЗаписейНакопляемые.СведенияОДоходахНДФЛ, НаборыЗаписей.СведенияОДоходахНДФЛ);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборыЗаписейНакопляемые.АвансовыеПлатежиИностранцевПоНДФЛ, НаборыЗаписей.АвансовыеПлатежиИностранцевПоНДФЛ);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборыЗаписейНакопляемые.ИмущественныеВычетыНДФЛ, НаборыЗаписей.ИмущественныеВычетыНДФЛ);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборыЗаписейНакопляемые.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ, НаборыЗаписей.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборыЗаписейНакопляемые.РасчетыНалогоплательщиковСБюджетомПоНДФЛ, НаборыЗаписей.РасчетыНалогоплательщиковСБюджетомПоНДФЛ);
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	#Удаление
	НДФЛ = УчетНДФЛ.РассчитатьНалогПоОсновнойСтавке(
		ИсключаемыйРегистратор, 
		Организация, 
		МесяцНачисления,
		СписокФизическихЛиц,
		, , 
		НастройкиНДФЛ.ОкончательныйРасчет, 
		НастройкиНДФЛ.ДатаВыплаты,
		НаборЗаписейДляРасчетаНДФЛ);
	УстановитьПривилегированныйРежим(Ложь);
	#КонецУдаления
	#Вставка
	//1АБ Беляев 14.03.2021 +
	АБ_СтруктураПередачи=Новый Структура("АБ_НеПредоставлятьВычеты,ДвиженияТекущегоРегистратора",НастройкиНДФЛ.АБ_НеПредоставлятьВычеты,НаборЗаписейДляРасчетаНДФЛ);
	НДФЛ = УчетНДФЛ.РассчитатьНалогПоОсновнойСтавке(
	ИсключаемыйРегистратор,
	Организация,
	МесяцНачисления,
	СписокФизическихЛиц,
	, ,
	НастройкиНДФЛ.ОкончательныйРасчет,
	НастройкиНДФЛ.ДатаВыплаты,
	АБ_СтруктураПередачи);
	//1АБ Беляев 14.03.2021 - 
	#КонецВставки
	
	РезультатРасчетаНДФЛВТаблицу(НДФЛ);
	
	ЗакончитьЗамерВремени(ИмяЗамера, Замер);
	Возврат НДФЛ;

КонецФункции


&ИзменениеИКонтроль("СтоимостьЧасаДня")
Функция АБ_СтоимостьЧасаДня(ЗаполняемыеПоказатели)
	СтоимостьЧасаДня = Новый Соответствие;

	МенеджерУчетаВремени = МенеджерУчетаВремени();

	ЗаполняемыеПоказатели.Сортировать("Сотрудник, Период", Новый СравнениеЗначений);

	ПоказателиСтоимости = ПоказателиСтоимостиЧасаДня();

	ОтборПоказателей = ОбщегоНазначения.ВыгрузитьКолонку(ПоказателиСтоимости, "Значение");
	ТочностьПоказателей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОтборПоказателей, "Точность");

	ЗначенияСовокупныхТарифныхСтавок = СводныеДанныеПлановыхНачисленийСотрудников();
	ОбходТаблицыСовокупныхСтавок = КоллекцииБЗК.ОбходТаблицы(ЗначенияСовокупныхТарифныхСтавок, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);

	ГрафикиСотрудников = ИсточникиДанныхУчетаВремени();
	ОбходТаблицыГрафиков = КоллекцииБЗК.ОбходТаблицы(ГрафикиСотрудников, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);

	КадроваяИстория = КадроваяИстория();
	ОбходКадровойИстории = КоллекцииБЗК.ОбходТаблицы(КадроваяИстория, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);

	СотрудникиФильтрДляРасчетаСтавок = НовыйТаблицаФильтрПоСотрудникам();

	КадровыеДанныеПоИдентификаторамСтрок = Новый Соответствие;
	ЗначенияСовокупныхСтавокПоИдентификаторамСтрок = Новый Соответствие;
	ГрафикиСотрудниковПоИдентификаторам = Новый Соответствие;
	ПорядокРасчетаПоИдентификаторам = Новый Соответствие;
	ОтборОсновныхНачислений = Новый Соответствие;

	ТекущееЗначениеСтавки = Неопределено;
	ГрафикСотрудника = Неопределено;
	КадровыеДанные = Неопределено;
	СтрокиПоказателейКРасчету = Новый Массив;

	Для Каждого СтрокаПоказателей Из ЗаполняемыеПоказатели Цикл
		ТекущееЗначениеСтавки = КоллекцииБЗК.СледующаяСтрокаВключающаяПериод(ОбходТаблицыСовокупныхСтавок, СтрокаПоказателей, СтрокаПоказателей.Период, ТекущееЗначениеСтавки);
		Если ТекущееЗначениеСтавки = Неопределено Тогда
			Продолжить;
		КонецЕсли;	

		КадровыеДанные = КоллекцииБЗК.СледующаяСтрокаВключающаяПериод(ОбходКадровойИстории, СтрокаПоказателей, СтрокаПоказателей.Период, КадровыеДанные); 
		ГрафикСотрудника = КоллекцииБЗК.СледующаяСтрокаВключающаяПериод(ОбходТаблицыГрафиков, СтрокаПоказателей, СтрокаПоказателей.Период, ГрафикСотрудника);

		Если НеобходимоНормированиеПоказателяСтоимостиЧасаДня(СтрокаПоказателей.Показатель, ТекущееЗначениеСтавки, СтрокаПоказателей.ВремяВЧасах, ПоказателиСтоимости) Тогда 
			СтрокаФильтра = СотрудникиФильтрДляРасчетаСтавок.Добавить();
			СтрокаФильтра.Сотрудник = СтрокаПоказателей.Сотрудник;
			СтрокаФильтра.ДатаНачала = НачалоМесяца(СтрокаПоказателей.Период);
			СтрокаФильтра.ДатаОкончания = КонецМесяца(СтрокаПоказателей.Период);

			ЗначенияСовокупныхСтавокПоИдентификаторамСтрок.Вставить(СтрокаПоказателей.ИдентификаторСтроки, ТекущееЗначениеСтавки);
			ГрафикиСотрудниковПоИдентификаторам.Вставить(СтрокаПоказателей.ИдентификаторСтроки, ГрафикСотрудника);	
			КадровыеДанныеПоИдентификаторамСтрок.Вставить(СтрокаПоказателей.ИдентификаторСтроки, КадровыеДанные);

			ОтборОсновныхНачислений.Вставить(ТекущееЗначениеСтавки.ОсновноеНачисление);
			СтрокиПоказателейКРасчету.Добавить(СтрокаПоказателей);
		Иначе	
			Значение = ОкруглитьЗначениеПоказателя(ТекущееЗначениеСтавки.СовокупнаяТарифнаяСтавка, СтрокаПоказателей.Показатель, ТочностьПоказателей); 
			СтоимостьЧасаДня.Вставить(СтрокаПоказателей.ИдентификаторСтроки, Значение);
		КонецЕсли;	
	КонецЦикла;	

	Если СотрудникиФильтрДляРасчетаСтавок.Количество() = 0 Тогда
		Возврат СтоимостьЧасаДня;
	КонецЕсли;	

	ОтборОсновныхНачислений = ОбщегоНазначения.ВыгрузитьКолонку(ОтборОсновныхНачислений, "Ключ");
	ПоказателиОсновныхНачислений = ПланыВидовРасчета.Начисления.ПоказателиНачислений(ОтборОсновныхНачислений);
	СвойстваОсновныхНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборОсновныхНачислений, "УчетВремениВЧасах");

	СвойстваОбщихГрафиков = СвойстваОбщихГрафиков();
	СвойстваОбщихГрафиковПоИдентификаторамСтрок = Новый Соответствие;

	СотрудникиФильтрДляРасчетаСтавок.Свернуть("Сотрудник, ДатаНачала, ДатаОкончания");

	ФильтрПолученияНормыВремени = МенеджерУчетаВремени.НовыйФильтрПолученияНормыВремени();
	ФильтрПолученияДанныхКалендарей = УчетРабочегоВремениРасширенный.НовыйФильтрПолученияСводныхДанныхКалендарей();

	ПорядокРасчетаСтоимостиЕдиницыВремени = РасчетЗарплатыРасширенный.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников(СотрудникиФильтрДляРасчетаСтавок);
	ОбходТаблицыПорядкаРасчета = КоллекцииБЗК.ОбходТаблицы(ПорядокРасчетаСтоимостиЕдиницыВремени, "Сотрудник", "ДатаНачала", "ДатаОкончания", Истина);

	ПорядокРасчетаПоУмолчанию = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты().ПорядокРасчетаСтоимостиЕдиницыВремени;
	ТекущаяСтрокаПорядкаРасчета = Неопределено;
	Для Каждого СтрокаПоказателей Из СтрокиПоказателейКРасчету Цикл		
		ТекущаяСтрокаПорядкаРасчета = КоллекцииБЗК.СледующаяСтрокаВключающаяПериод(ОбходТаблицыПорядкаРасчета, СтрокаПоказателей, СтрокаПоказателей.Период, ТекущаяСтрокаПорядкаРасчета); 
		ПорядокРасчета = ?(ТекущаяСтрокаПорядкаРасчета = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрокаПорядкаРасчета.ПорядокРасчета), ПорядокРасчетаПоУмолчанию, ТекущаяСтрокаПорядкаРасчета.ПорядокРасчета);
		ПорядокРасчетаПоИдентификаторам.Вставить(СтрокаПоказателей.ИдентификаторСтроки, ПорядокРасчета);

		ГрафикСотрудника = ГрафикиСотрудниковПоИдентификаторам[СтрокаПоказателей.ИдентификаторСтроки];
		Если ГрафикСотрудника = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СвойстваТекущегоГрафика = СвойстваОбщихГрафиков[ГрафикСотрудника.ОбщийГрафик];
		СвойстваОбщихГрафиковПоИдентификаторамСтрок.Вставить(СтрокаПоказателей.ИдентификаторСтроки, СвойстваТекущегоГрафика);

		ДанныеПлановыхНачисленийСотрудника = ЗначенияСовокупныхСтавокПоИдентификаторамСтрок[СтрокаПоказателей.ИдентификаторСтроки];
		СвойстваОсновногоНачисления = СвойстваОсновныхНачислений[ДанныеПлановыхНачисленийСотрудника.ОсновноеНачисление];

		Если НеобходимыДанныеГрафикаДляРасчетаСтоимостиЧасаДня(ПорядокРасчета, СвойстваТекущегоГрафика, СвойстваОсновногоНачисления) Тогда	
			СтрокаФильтра = ФильтрПолученияНормыВремени.Добавить();
			СтрокаФильтра.ИсточникДанныхНормыВремени = ГрафикСотрудника.ИсточникДанныхНормыВремени;
			СтрокаФильтра.ПериодРегистрацииНормыВремени = ГрафикСотрудника.ПериодРегистрацииНормыВремени;
			СтрокаФильтра.Месяц = НачалоМесяца(СтрокаПоказателей.Период);
		КонецЕсли;
		Если ПорядокРасчета <> Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
			СтрокаФильтра = ФильтрПолученияДанныхКалендарей.Добавить();
			СтрокаФильтра.ПроизводственныйКалендарь = СвойстваОбщихГрафиков[ГрафикСотрудника.ОбщийГрафик].ПроизводственныйКалендарь;
			СтрокаФильтра.Месяц = НачалоМесяца(СтрокаПоказателей.Период);
		КонецЕсли;	
	КонецЦикла;	 

	НормаВремениПоИсточникам = МенеджерДанныхУчетаВремени.НормаВремениПоИсточникамДанных(ФильтрПолученияНормыВремени);	
	ДанныеКалендарей = УчетРабочегоВремениРасширенный.ДанныеПроизводственныхКалендарейСводно(ФильтрПолученияДанныхКалендарей);		
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(НормаВремениПоИсточникам, "ИсточникДанныхНормыВремени, ПериодРегистрацииНормыВремени, Месяц");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеКалендарей, "ПроизводственныйКалендарь, Месяц");

	ИсходныеДанныеДляРасчета = СтруктураИсходныхДанныхДляРасчетаСтоимостиЧасаДня();
	Для Каждого СтрокаПоказателей Из СтрокиПоказателейКРасчету Цикл		
		ГрафикСотрудника = ГрафикиСотрудниковПоИдентификаторам[СтрокаПоказателей.ИдентификаторСтроки];

		НормаВремениПоСотруднику = Неопределено;
		ДанныеКалендаряПоСотруднику = Неопределено;
		СвойстваТекущегоГрафика = Неопределено;
		Если ГрафикСотрудника <> Неопределено Тогда
			НормаВремениПоСотруднику = НормаВремениПоИсточникуДанных(НормаВремениПоИсточникам, ГрафикСотрудника, НачалоМесяца(СтрокаПоказателей.Период));
			ДанныеКалендаряПоСотруднику = ДанныеКалендаряПоИсточникуДанных(ДанныеКалендарей, ГрафикСотрудника, НачалоМесяца(СтрокаПоказателей.Период), СвойстваОбщихГрафиков);
			СвойстваТекущегоГрафика = СвойстваОбщихГрафиков[ГрафикСотрудника.ОбщийГрафик];
		КонецЕсли;	

		ДанныеПлановыхНачисленийСотрудника = ЗначенияСовокупныхСтавокПоИдентификаторамСтрок[СтрокаПоказателей.ИдентификаторСтроки];

		ЗаполнитьДанныеНачисленийРасчетаСтоимостиЧасаДня(ИсходныеДанныеДляРасчета, ДанныеПлановыхНачисленийСотрудника, ПорядокРасчетаПоИдентификаторам[СтрокаПоказателей.ИдентификаторСтроки], ПоказателиОсновныхНачислений);
		ЗаполнитьНормыГрафикаРасчетаСтоимостиЧасаДня(ИсходныеДанныеДляРасчета, НормаВремениПоСотруднику, СвойстваТекущегоГрафика);
		ЗаполнитьНормыКалендаряРасчетаСтоимостиЧасаДня(ИсходныеДанныеДляРасчета, ДанныеКалендаряПоСотруднику, СвойстваТекущегоГрафика);
		#Вставка
		//1АБ Беляев 08.03.2021 + 
		Если СтрокаПоказателей.ИспользоватьНеТиповойРасчетНочных Тогда
		АБ_ЗаполнитьСреднегодовыеКоличестваЧасовНеТиповые(ИсходныеДанныеДляРасчета,СтрокаПоказателей.Период,"ЭтоНочные");
		ИначеЕсли СтрокаПоказателей.ИспользоватьНеТиповойРасчетПраздничных Тогда
		АБ_ЗаполнитьСреднегодовыеКоличестваЧасовНеТиповые(ИсходныеДанныеДляРасчета,СтрокаПоказателей.Период,"ЭтоПраздничные");
		Иначе
		АБ_ЗаполнитьСреднегодовыеКоличестваЧасовНеТиповые(ИсходныеДанныеДляРасчета,СтрокаПоказателей.Период,"");
		КонецЕсли;
		//1АБ Беляев 08.03.2021 -
		#КонецВставки
		
		ЗаполнитьДополнительныеДанныеРасчетаСтоимостиЧасаДня(
		ИсходныеДанныеДляРасчета,
		КадровыеДанныеПоИдентификаторамСтрок[СтрокаПоказателей.ИдентификаторСтроки],
		СвойстваОсновныхНачислений[ДанныеПлановыхНачисленийСотрудника.ОсновноеНачисление],
		СтрокаПоказателей.ВремяВЧасах,
		СвойстваТекущегоГрафика);
				
		Значение = РассчитатьЗначениеСтоимостиЧасаДня(СтрокаПоказателей.Показатель, ИсходныеДанныеДляРасчета, ПоказателиСтоимости, ТочностьПоказателей); 	

		СтоимостьЧасаДня.Вставить(СтрокаПоказателей.ИдентификаторСтроки, Значение);
	КонецЦикла;	

	Возврат СтоимостьЧасаДня;	
КонецФункции
#КонецОбласти
