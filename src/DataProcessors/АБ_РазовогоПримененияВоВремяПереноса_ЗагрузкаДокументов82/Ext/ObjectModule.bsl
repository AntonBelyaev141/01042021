///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Раздел настраиваемых функций:

Функция ПолучитьСтатьюУвольнения(КодОКИН) Экспорт
	
	Если КодОКИН = "08" Тогда
		
		Возврат Справочники.ОснованияУвольненияИзОрганизации.НайтиПоНаименованию("п. 3 ст. 77 ТК");
		
	ИначеЕсли КодОКИН = "13" Тогда
		
		Возврат Справочники.ОснованияУвольненияИзОрганизации.НайтиПоНаименованию("Расторжение срочного трудового договора Ст. 79 ТК РФ");
	
	Иначе
		
		Сообщить("Не опознана причина увольнения с кодом """ + КодОКИН + """.");
		
		Возврат Неопределено;
	
	КонецЕсли;	

КонецФункции // ПолучитьСтатьюУвольнения()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ВРпоИмени(ИмяВР) Экспорт
	
	Если ИмяВР = "Беременным" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриПостановкеНаУчетВРанниеСрокиБеременности;
		
	ИначеЕсли ИмяВР = "ПриРожденииРебенка" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриРожденииРебенка;
	
	ИначеЕсли ИмяВР = "Вознаграждение к юбилею" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Вознаграждение к юбилею");
		
	ИначеЕсли ИмяВР = "Доплата по приказу" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Доплата по приказу");
		
	ИначеЕсли ИмяВР = "Персональная надбавка" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Персональная надбавка");
		
	ИначеЕсли ИмяВР = "Компенсация за питание" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Компенсация за питание");
		
	ИначеЕсли ИмяВР = "Материальная помощь" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Материальная помощь");
		
	ИначеЕсли ИмяВР = "Премия месячная" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Месячная премия");
		
	ИначеЕсли ИмяВР = "Компенсация за обязательный медосмотр" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Компенсация за обязательный медосмотр");
		
	ИначеЕсли ИмяВР = "Бригадирские" Тогда	
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Бригадирские");	
		
	ИначеЕсли ИмяВР = "Поощрительная надбавка по положению (суммой)" Тогда	
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Поощрительная надбавка по положению (суммой)");
		
	ИначеЕсли ИмяВР = "Компенсация за обязательный медосмотр" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Компенсация за обязательный медосмотр");
		
	ИначеЕсли ИмяВР = "Соцподдержка" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Соцподдержка");
		
	ИначеЕсли ИмяВР = "Компенсация за использование личного транспорта" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Компенсация за использование личного транспорта");
		
	ИначеЕсли ИмяВР = "Аренда автомобиля" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Аренда автомобиля");
		
	ИначеЕсли ИмяВР = "Управление транспортным средством" Тогда
		
		Возврат ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.НайтиПоНаименованию("Управление транспортным средством");		
			
	Иначе
		
		Сообщить("Не опознан ВР: " + ИмяВР);
		
		Возврат Неопределено;
	
	КонецЕсли;

КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ВРпоИмениЗП(ИмяВР) Экспорт
	
	Если ИмяВР = "СдельноПремиальная" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Оплата по производственным нарядам");		
		
	ИначеЕсли ИмяВР = "ПоврПремПочасТариф" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Оплата по часовому тарифу");		
	
	ИначеЕсли ИмяВР = "ПоврПремПочасОклад" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Оклад по часам");
		
	ИначеЕсли ИмяВР = "ТабельПочасТариф" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Оплата по часовому тарифу");
		
	ИначеЕсли ИмяВР = "ТабельПодневнОклад" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Оклад по дням");
		
	ИначеЕсли ИмяВР = "ТабельПочасОклад" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Оклад по часам");
		
	ИначеЕсли ИмяВР = "ПоврПремПодневнОклад" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Оклад по часам");
		
	ИначеЕсли ИмяВР = "ПоврПодневнОклад" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Оклад по часам");
		
	Иначе
		
		Сообщить("Не опознан вид расчета: " + ИмяВР);
	
	КонецЕсли;

КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВидОтпуска(М) Экспорт
	
	СтрокаПроверки = СтрЗаменить(М[3]," ","");
	
	Если СтрокаПроверки = "Отпускзасвойсчет(краткосрочный)" Тогда
		
		Возврат Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты;
		
	ИначеЕсли СтрокаПроверки = "Отпускзасвойсчет(долгосрочный)" Тогда	
		
		Возврат Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускБезСохраненияЗарплаты;
		
	ИначеЕсли СтрокаПроверки = "Отпускочередной" Тогда
		
		Возврат Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный;
		
	Иначе
		
		Если ПолучитьВРПричинеОтсутствия(М[5], Ложь) = Неопределено Тогда
			
			Сообщить("Не найден отпуск с кодом: " + СтрокаПроверки);		
		
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьВидОтпуска()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВидСреднегоЗаработка(М) Экспорт
	
	Если СокрЛП(М[5]) = "ДниДоноров" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Дни доноров");
	
	ИначеЕсли СокрЛП(М[5]) = "ЛьготныеДни" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Оплата дополнительных выходных дней по уходу за детьми - инвалидами");
		
	ИначеЕсли СокрЛП(М[5]) = "Командировка" Тогда
		
		Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.НайтиПоНаименованию("Командировка");
		
	Иначе
		
		Сообщить("Не опознан вид расчета по среднему заработку.");
		
		Возврат Неопределено;
	
	КонецЕсли;	

КонецФункции // ПолучитьВидСреднегоЗаработка()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВидДокОтпуска(М, Номер) Экспорт
	
	Если М[3] = "Отпуск очередной" Тогда
		
		ДокВид82 = "НачислениеОтпускаРаботникамОрганизаций";
		
		Возврат ДокВид82;
		
	ИначеЕсли М[3] = "Компенсация отпуска при увольнении" Тогда
		
		ДокВид82 = "РасчетПриУвольненииРаботникаОрганизаций";
		
		Возврат ДокВид82;
		
	ИначеЕсли М[3] = "Отпуск за свой счет (краткосрочный)" ИЛИ
		М[3] = "Отпуск за свой счет (долгосрочный)" Тогда
		
		ДокВид82 = "НевыходыВОрганизациях";
		
		Номер = Номер + "о";
		
		Возврат ДокВид82;
		
	Иначе
		
		Сообщить("Не опознан вид отпуска для выбора вида документа: " + М[3]);
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьВидОтпуска() 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВидДокНачисления(М) Экспорт
	
	Если М[3] = "Беременным" ИЛИ
		М[3] = "ПриРожденииРебенка" ИЛИ
		М[3] = "Вознаграждение к юбилею" ИЛИ
		М[3] = "Доплата по приказу" ИЛИ
		М[3] = "Персональная надбавка" ИЛИ
		М[3] = "Материальная помощь" ИЛИ
		М[3] = "Бригадирские" ИЛИ
		М[3] = "Поощрительная надбавка по положению (суммой)" ИЛИ
		М[3] = "Компенсация за обязательный медосмотр" ИЛИ
		М[3] = "Соцподдержка" ИЛИ
		М[3] = "Компенсация за использование личного транспорта" ИЛИ
		М[3] = "Аренда автомобиля" ИЛИ
		М[3] = "Управление транспортным средством" ИЛИ					
		М[3] = "Компенсация за питание"
		
		Тогда
		
		ДокВид82 = "РегистрацияРазовыхНачисленийРаботниковОрганизаций";
		
	ИначеЕсли М[3] = "Удержано по заявлению" ИЛИ
		М[3] = "Исполнительский сбор"
		
		Тогда
		
		ДокВид82 = "РегистрацияРазовыхУдержанийРаботниковОрганизаций";					
		
	ИначеЕсли М[3] = "Премия месячная" Тогда
		
		ДокВид82 = "ПремииРаботниковОрганизаций";
		
	Иначе
		
		Сообщить("Не опознан вид начисления сотрудника """ + М[3] + """.");
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДокВид82;
	
КонецФункции // ПолучитьВидДокНачисления() 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВидДокНачисленияСписком(М, Номер, ВР) Экспорт
	
	Если М[2] = "Премия месячная" Тогда
		
		ДокВид82 = "ПремииРаботниковОрганизаций";
		
	Иначе					
		
		ДокВид82 = "РегистрацияРазовыхНачисленийРаботниковОрганизаций";
		
	КонецЕсли;
	
	ВР = ВРпоИмени(М[2]);
	
	Номер = Номер + "с";
	
	Возврат ДокВид82;
	
КонецФункции // ПолучитьВидДокНачисленияСписком()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьПричинуНетрудоспособности(М) Экспорт

	Если М[6] = "ОбщееЗаболевание" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание;
	ИначеЕсли М[6] = "ПоБеременностиИРодам" Тогда
		Возврат Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам;
	Иначе
		Сообщить("Не опознана причина нетрудоспособности.");
		Возврат Неопределено;
	КонецЕсли;		

КонецФункции // ПолучитьПричинуНетрудоспособности() 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьВРПричинеОтсутствия(ПричинаОтсутствия, Сообщать = Истина) Экспорт

	Если ПричинаОтсутствия = "НеВыяснено" Тогда
		
		Возврат ПланывидовРасчета.ОсновныеНачисленияОрганизаций.Невыход;
		
	ИначеЕсли ПричинаОтсутствия = "Прогул" Тогда				
		
		Возврат ПланывидовРасчета.ОсновныеНачисленияОрганизаций.Прогул;
		
	Иначе
		
		Если Сообщать Тогда
			
			Сообщить("Причина отсутствия не опознана.");		
		
		КонецЕсли;		
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции // ПолучитьПричинуОтсутствия()
 
 
// Конец раздела настраиваемых функций

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСубконто(ПарамВидСубконто, ЗначениеСубконто) Экспорт
	
	ВидСубконто = "";	
	
	Если ПарамВидСубконто = "Номенклатурные группы" Тогда
		ВидСубконто = "НоменклатурныеГруппы";
	ИначеЕсли ПарамВидСубконто = "Статьи затрат" Тогда
		ВидСубконто = "СтатьиЗатрат";
	ИначеЕсли ПарамВидСубконто = "Подразделения" Тогда
		ВидСубконто = "ПодразделенияОрганизаций";		
	ИначеЕсли ПарамВидСубконто = "" Тогда
		Возврат Неопределено;
	Иначе	
		Сообщить("Не найден вид субконто: " + Строка(ПарамВидСубконто));
		Возврат Неопределено;
	КонецЕсли;
	
	Эл = Справочники[ВидСубконто].НайтиПоНаименованию(ЗначениеСубконто);
	
	Если Эл = Справочники[ВидСубконто].ПустаяСсылка() Тогда
		
		Эл = Справочники[ВидСубконто].СоздатьЭлемент();
		
		Эл.Наименование = ЗначениеСубконто;
		
		Эл.Записать();	
		
	КонецЕсли;
	
	Возврат Эл.Ссылка;
	
КонецФункции // ПолучитьСубконто()

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция СотрудникПоКоду(СотрудникКод, Прием = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиОрганизаций.Ссылка,
		|	СотрудникиОрганизаций.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Код = &Код
		//|	И СотрудникиОрганизаций.ДатаПриемаНаРаботу " + ?(Прием, "=", "<>") + " &ПустаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПриемаНаРаботу УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("Код", СотрудникКод);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Сообщить("Сотрудник с кодом """ + СотрудникКод + """ не найден.");
		
		Возврат Неопределено;
	
	Иначе
		
		Возврат Результат.Выгрузить()[0].Ссылка;
	
	КонецЕсли; 

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция НепринятныйСотрудникПоКоду(СотрудникКод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиОрганизаций.Ссылка,
		|	СотрудникиОрганизаций.ДатаПриемаНаРаботу КАК ДатаПриемаНаРаботу
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Код = &Код
		|	И СотрудникиОрганизаций.ДатаПриемаНаРаботу = &ПустаяДата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПриемаНаРаботу УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("Код", СотрудникКод);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		//Сообщить("Непринятый сотрудник с кодом """ + СотрудникКод + """ не найден.");
		
		Возврат Неопределено;
	
	Иначе
		
		Возврат Результат.Выгрузить()[0].Ссылка;
	
	КонецЕсли; 

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Функция ПодразделениеСотрудника(Сотрудник) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК Подразделение
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних";

	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат Результат.Выгрузить()[0].Подразделение;
		
	КонецЕсли;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция СуществуетЭлемСправочника(Элем) Экспорт
	
	Если Элем = Неопределено Тогда
		
		Сообщить("Элемент справочника """ + Элем + """ не определен.");
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	Если Элем.Пустая() Тогда
		
		Сообщить("Не найден элемент справочника """ + Элем.Метаданные().Имя + """: "+ Строка(Элем));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьИПодобратьОрганизациюПередОткрытиемФормы(СотрудникОбъект) Экспорт
	//
	//Организация = СотрудникОбъект.Организация;

	//Если Не ЗначениеЗаполнено(Организация)  Тогда
	//	ОбособленноеПодразделение = РаботаСДиалогами.ПолучитьОрганизацию();
	//	СотрудникОбъект.ОбособленноеПодразделение = ОбособленноеПодразделение;
	//	СотрудникОбъект.Организация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(ОбособленноеПодразделение);
	//Иначе //организацию передали в форму
	//	// проверим является ли она головной, заполним обособленное подразделение
	//	ГоловнаяОрганизация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
	//	Если Организация = ГоловнаяОрганизация Тогда
	//		// подберем обособленное подразделение
	//		ОрганизацияПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	//		Если Не ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
	//			// не задана организация по умолчанию
	//			СотрудникОбъект.ОбособленноеПодразделение = Организация;
	//		ИначеЕсли Организация = ОбщегоНазначенияЗК.ГоловнаяОрганизация(ОрганизацияПоУмолчанию) Тогда
	//			//организация по умолчанию или головная или является обособленным подразделением той организации, что передана в форму
	//			СотрудникОбъект.ОбособленноеПодразделение = ОрганизацияПоУмолчанию;
	//		Иначе
	//			//организация по умолчанию не соответствует организации переданной в форму
	//			СотрудникОбъект.ОбособленноеПодразделение = Организация;
	//		КонецЕсли;	
	//	Иначе // передали обособленное подразделение
	//		СотрудникОбъект.ОбособленноеПодразделение = Организация;
	//		СотрудникОбъект.Организация = ГоловнаяОрганизация;
	//	КонецЕсли;	
	//КонецЕсли;

КонецПроцедуры


Процедура ЗаполнитьСотрудникаПоФизлицу(Физлицо, СотрудникОбъект) Экспорт
	
	//СотрудникОбъект.Наименование = Физлицо.Наименование;
	//
	//СотрудникОбъект.Код = Физлицо.Код;
	//
	//СотрудникОбъект.Физлицо = Физлицо;
	//
	//Если Не ЗначениеЗаполнено(СотрудникОбъект.ВидДоговора) ТОгда
	//	СотрудникОбъект.ВидДоговора  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;	
	//КонецЕсли;	
	//Если СотрудникОбъект.ВидДоговора  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
	//	СотрудникОбъект.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
	//	СотрудникОбъект.ЗанимаемыхСтавок = 1;
	//КонецЕсли;
	//
	//Если СотрудникОбъект.ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
	//	СотрудникиОрганизацийКлиент.ПроверитьИПодобратьОрганизациюПередОткрытиемФормы(СотрудникОбъект);	
	//КонецЕсли;	
	//
	//мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	//
	//СотрудникОбъект.ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
	//
	////Если Не Физлицо.Пустая() Тогда
	//	//если в форму передали физлицо
	//	//ВыборФизлица  = Истина;
	//	ФизлицоОбъект = Физлицо.ПолучитьОбъект();
	//	СотрудникОбъект.Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, СотрудникОбъект.ПостфиксНаименования);
	//	//СотрудникиОрганизацийКлиент.УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно(ЭтаФорма);
	//	//СотрудникиОрганизацийКлиент.ПрочитатьФИО(ЭтаФорма);
	//	//СотрудникиОрганизацийКлиент.ПроверитьИУстановитьВидЗанятости(Ложь, ЭтаФорма);
	//	СотрудникОбъект.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
	//	СотрудникОбъект.Актуальность = Истина;
	////КонецЕсли;
	//
	//// заполним дату договора сегодняшней датой
	//СотрудникОбъект.ДатаДоговора = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	//СотрудникОбъект.НомерДоговора = СотрудникОбъект.ПолучитьНомерТрудовогоДоговора();
	
КонецПроцедуры